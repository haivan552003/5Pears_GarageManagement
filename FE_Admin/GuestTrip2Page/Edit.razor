@page "/rentail_guest_trip/{id:int}"
@using Microsoft.AspNetCore.SignalR.Client
@using MudBlazor
@using System.Text.Json
@using System.Collections.Concurrent
@using System.Net
@inject HttpClient httpClient
@inject IJSRuntime js
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject ISnackbar Snackbar

<style>
    .fs-14{
        font-size: 14px;
    }

    .text-gray{
        color: #637280;
    }
</style>

<MudContainer Style="margin-top: 45px; margin-bottom: 25px;">
    <MudGrid>
        <MudItem xs="8">
            <MudPaper Class="p-4 mb-5" Elevation="1">
                <MudGrid>
                    <MudItem xs="12" Class="mx-auto">
                        <MudText Typo="Typo.h6" Color="Color.Primary">Thông tin khách hàng</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField ShrinkLabel @bind-Value="addCus.phone_number" Label="Số điện thoại" Margin="Margin.Dense" Variant="Variant.Outlined" OnBlur="@SearchPhoneNumber" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField ShrinkLabel @bind-Value="addCus.fullname" Label="Họ và tên" Margin="Margin.Dense" Variant="Variant.Outlined"/>
                    </MudItem>
                    <MudItem xs="12" Class="d-flex justify-end">
                        @if (!SaveButton)
                        {
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary" OnClick="AddCus">Lưu</MudButton>
                        }
                    </MudItem>
                </MudGrid>
            </MudPaper>
            <MudPaper Class="p-4" Elevation="1">
                <MudGrid>
                    <MudItem xs="12" Class="mx-auto">
                        <MudText Typo="Typo.h6" Color="Color.Primary">Chọn ghế</MudText>
                    </MudItem>

                    <MudItem xs="10">
                        <MudGrid>
                            @foreach (var item in car_seat)
                            {
                                var isDisabled = item.status == "Đã đặt" || takenSeats.Contains(item.id.ToString()) || item.name.ToLower() == "tài xế"; ;
                                var buttonColor = selectedSeats.Contains(item.id) ? Color.Success : Color.Primary;

                                <MudItem xs="2">
                                    <MudButton Variant="Variant.Outlined"
                                               Color="@buttonColor"
                                               Size="Size.Small"
                                               Disabled="@isDisabled"
                                               OnClick="() => OnSeatSelected(item.id, item.name)">
                                        @item.name
                                    </MudButton>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudItem>
                    <MudItem xs="2">
                        <MudGrid>
                            <MudItem xs="12" Class="d-flex align-items-center">
                                <MudIcon Icon="@Icons.Material.Filled.Chair" Color="Color.Default" />
                                <MudText Typo="Typo.h6" Style="font-size: 12px;" Class="ml-1">Đã bán</MudText>
                            </MudItem>
                            <MudItem xs="12" Class="d-flex align-items-center">
                                <MudIcon Icon="@Icons.Material.Filled.Chair" Color="Color.Primary" />
                                <MudText Typo="Typo.h6" Style="font-size: 12px;" Class="ml-1">Còn trống</MudText>
                            </MudItem>
                            <MudItem xs="12" Class="d-flex align-items-center">
                                <MudIcon Icon="@Icons.Material.Filled.Chair" Color="Color.Success" />
                                <MudText Typo="Typo.h6" Style="font-size: 12px;" Class="ml-1">Đang chọn</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudItem>

                </MudGrid>
            </MudPaper>

            
                   </MudItem>

        <MudItem xs="4">
            <MudPaper Class="p-4 mb-5" Elevation="1">
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6" Color="Color.Primary">Thông tin vé</MudText>
                    </MudItem>
                    <MudItem xs="3" Class="pb-2" Style="padding: 0px; padding-left: 12px;">
                        <MudText Typo="Typo.subtitle1" Color="Color.Default" Class="fs-14">Tuyến Xe</MudText>
                    </MudItem>
                    <MudItem xs="9" Class="pb-2" Style="padding: 0px; padding-right: 12px;">
                        <MudText Align="Align.End" Class="fw-bold fs-14" Typo="Typo.subtitle1">@TRIPDETAILS.from - @TRIPDETAILS.to</MudText>
                    </MudItem>

                    <MudItem xs="3" Class="pb-2" Style="padding: 0px; padding-left: 12px;">
                        <MudText Typo="Typo.subtitle1" Color="Color.Default" Class="fs-14">Khởi hành</MudText>
                    </MudItem>
                    <MudItem xs="9" Class="pb-2" Style="padding: 0px; padding-right: 12px;">
                        <MudText Align="Align.End" Class="fw-bold fs-14" Typo="Typo.subtitle1" Style="color: #00613D;">@TRIPDETAILS.time_start</MudText>
                    </MudItem>

                    <MudItem xs="4" Class="pb-2" Style="padding: 0px; padding-left: 12px;">
                        <MudText Typo="Typo.subtitle1" Color="Color.Default" Class="fs-14">Số Lượng Ghế</MudText>
                    </MudItem>
                    <MudItem xs="8" Class="pb-2" Style="padding: 0px; padding-right: 12px;">
                        <MudText Align="Align.End" Class="fw-bold fs-14" Typo="Typo.subtitle1">@selectedSeats.Count</MudText>
                    </MudItem>

                    <MudItem xs="3" Class="pb-2" Style="padding: 0px; padding-left: 12px;">
                        <MudText Typo="Typo.subtitle1" Color="Color.Default" Class="fs-14">Tên ghế</MudText>
                    </MudItem>
                    <MudItem xs="9" Class="pb-2" Style="padding: 0px; padding-right: 12px;">
                        <MudText Align="Align.End" Class="fw-bold fs-14" Typo="Typo.subtitle1"> @string.Join(", ", selectedSeatNames)</MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <MudItem xs="12" Style="margin-top:-5px;margin-bottom:10px;text-align:center">
                <MudRadioGroup @bind-Value="Dense_Radio">
                    <MudRadio Value="true" Color="Color.Primary" Dense="true" Size="Size.Medium">
                        <MudText Typo="Typo.subtitle1" Color="Color.Default" Class="fs-16">Tiền Mặt</MudText>
                    </MudRadio>
                    <MudRadio Value="false" Color="Color.Secondary" Dense="false" Size="Size.Medium">
                        <MudText Typo="Typo.subtitle1" Color="Color.Default" Class="fs-16">Chuyển Khoản</MudText>
                    </MudRadio>
                </MudRadioGroup>
            </MudItem>

            
            @if(Dense_Radio == true)
            {
                <MudPaper Class="p-4" Elevation="1">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Color="Color.Primary">Chi tiết giá</MudText>
                        </MudItem>

                        <MudItem xs="3" Class="pb-2" Style="padding: 0px; padding-left: 12px;">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default" Class="fs-14">Giá vé</MudText>
                        </MudItem>
                        <MudItem xs="9" Class="pb-2" Style="padding: 0px; padding-right: 12px;">
                            <MudText Align="Align.End" Class="fw-bold fs-14" Typo="Typo.subtitle1">@TRIPDETAILS.price.ToString("#,##0") VNĐ</MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField ShrinkLabel @bind-Value="_tienKhachDua" Label="Tiền khách đưa" Margin="Margin.Dense" Variant="Variant.Outlined" OnBlur="@CalculateChange" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField ShrinkLabel @bind-Value="_tienThua" Label="Tiền thừa" Margin="Margin.Dense" Variant="Variant.Outlined" Disabled="true" />
                        </MudItem>

                        <MudItem xs="12" Class="pb-4">
                            <MudDivider Style="border: 1px;" />
                        </MudItem>
                        <MudItem xs="3" Class="pb-2" Style="padding: 0px; padding-left: 12px;">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default" Class="fs-14">Tổng Tiền</MudText>
                        </MudItem>
                        <MudItem xs="9" Class="pb-2" Style="padding: 0px; padding-right: 12px;">
                            <MudText Align="Align.End" Color="Color.Secondary" Class="fw-bold fs-14" Typo="Typo.subtitle1">@TRIPDETAILS.sale.ToString("#,##0") VNĐ</MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudButton Variant="Variant.Filled" Class="w-100" Color="Color.Primary" Size="Size.Medium" OnClick="@OnCheckout">Thanh Toán</MudButton>
                        </MudItem>

                    </MudGrid>
                </MudPaper>
                @if (errorMessageCheckCus != null)
                {
                    <MudItem xs="12">
                        <MudText Color="Color.Error" Class="mt-2 text-center">
                            @errorMessageCheckCus
                        </MudText>
                    </MudItem>
                }

            }
            else
            {
                <MudPaper Class="p-4" Elevation="1">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Color="Color.Primary">Chi tiết giá</MudText>
                        </MudItem>

                        <MudItem xs="3" Class="pb-2" Style="padding: 0px; padding-left: 12px;">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default" Class="fs-14">Giá vé</MudText>
                        </MudItem>
                        <MudItem xs="9" Class="pb-2" Style="padding: 0px; padding-right: 12px;">
                            <MudText Align="Align.End" Class="fw-bold fs-14" Typo="Typo.subtitle1">@TRIPDETAILS.price.ToString("#,##0") VNĐ</MudText>
                        </MudItem>
                        <MudItem xs="12" Class="pb-4">
                            <MudDivider Style="border: 1px;" />
                        </MudItem>
                        <MudItem xs="3" Class="pb-2" Style="padding: 0px; padding-left: 12px;">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default" Class="fs-14">Tổng Tiền</MudText>
                        </MudItem>
                        <MudItem xs="9" Class="pb-2" Style="padding: 0px; padding-right: 12px;">
                            <MudText Align="Align.End" Color="Color.Secondary" Class="fw-bold fs-14" Typo="Typo.subtitle1">@TRIPDETAILS.sale.ToString("#,##0") VNĐ</MudText>
                        </MudItem>

                        <MudItem xs="12">
                            <MudButton Variant="Variant.Filled" Class="w-100" Color="Color.Primary" Size="Size.Medium" OnClick="@OnCheckout">Thanh Toán</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
                @if (errorMessageCheckCus != null)
                {
                    <MudItem xs="12">
                        <MudText Color="Color.Error" Class="mt-2 text-center">
                            @errorMessageCheckCus
                        </MudText>
                    </MudItem>
                }
            }

        </MudItem>
    </MudGrid>
</MudContainer>
<script>
    // Lấy token từ localStorage
    function getAuthToken() {
        return localStorage.getItem("authToken");
    }
</script>
@code {
    private customer addCus = new customer();
    private string errorMessageCheckCus;
    private bool SaveButton = false;
    public bool Dense_Radio { get; set; } = true;
    private decimal _tienKhachDua = 0;
    private decimal _tienThua = 0;




    public string TextValue { get; set; }
    [Parameter] public int id { get; set; }
    private int cus_id;
    private HubConnection? hubConnection;
    private List<string> takenSeats = new List<string>();
    private trip trips;
    private TRIPDETAILS TRIPDETAILS = new TRIPDETAILS();
    private List<car_seat_rentail> car_seat = new List<car_seat_rentail>();
    private List<car_seat_not_null> car_seat_not_null;
    private customer customer = new customer();
    private string urlTrip = "http://localhost:49922/api/Trips/trip";
    private string urlCus = "http://localhost:49922/api/Customer";
    private string urlBill = "http://localhost:49922/api/GuestTrip";
    private string urlTopGuestTrip = "http://localhost:49922/api/GuestTrip/GetTop";
    private string urlViewTrip = "http://localhost:49922/api/Trips/viewTrip/";
    private string urlSeatNotNull = "http://localhost:49922/api/GuestTrip/GetSeatNotNull/";
    private string urlVNPayCreate = "http://localhost:49922/api/Payment/create-payment";


    private string urlGetTopCus = "http://localhost:49922/api/Customer/GetTop";
    private string urlUpdateStatusBill = "http://localhost:49922/api/GuestTrip/PutStatus2";

    private List<int> selectedSeats = new List<int>();
    private List<string> selectedSeatNames = new List<string>();
    private static ConcurrentDictionary<string, bool> userCheckoutStatus = new ConcurrentDictionary<string, bool>();

    private Timer? inactivityTimer;

    private guest_trip_create bill = new guest_trip_create();
    private Guest_Customer customers = new Guest_Customer();

    private int empId;
    private bool isHubConnected = false;


    protected override async Task OnInitializedAsync()
    {
        await LoadTripDetail();
        hubConnection = new HubConnectionBuilder()
             .WithUrl(Navigation.ToAbsoluteUri("http://localhost:49922/seatHub"))
             .Build();

        // Xử lý chọn ghế từ các client khác
        hubConnection.On<int>("ReceiveSeatSelection", (seatId) =>
        {
            if (!takenSeats.Contains(seatId.ToString()))
            {
                takenSeats.Add(seatId.ToString());
                StateHasChanged();
            }
        });

        // Xử lý bỏ chọn ghế từ các client khác
        hubConnection.On<int>("ReceiveSeatDeselection", (seatId) =>
        {
            if (takenSeats.Contains(seatId.ToString()))
            {
                takenSeats.Remove(seatId.ToString());
                StateHasChanged();
            }
        });

        // Nhận toàn bộ danh sách ghế đã chọn khi client mới kết nối
        hubConnection.On<List<int>>("ReceiveAllSelectedSeats", (seatIds) =>
        {
            takenSeats = seatIds.Select(id => id.ToString()).ToList();
            StateHasChanged();
        });

        hubConnection.On("ReceiveCheckoutNotification", async () =>
         {
             await ReloadSeats();
             await InvokeAsync(() => StateHasChanged());
         });

        await hubConnection.StartAsync();

        // InitializeInactivityTimer();
    }

    private void InitializeInactivityTimer()
    {
        inactivityTimer = new Timer(async _ =>
        {
            if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
            {
                await hubConnection.StopAsync();
            }

            await InvokeAsync(() =>
            {
                Navigation.NavigateTo("http://localhost:5162/");
            });
        }, null, TimeSpan.FromMinutes(5), Timeout.InfiniteTimeSpan);

        InterceptUserActivity();
    }

    private async Task ResetInactivityTimer()
    {
        if (inactivityTimer != null)
        {
            inactivityTimer.Change(TimeSpan.FromSeconds(10), Timeout.InfiniteTimeSpan);
        }
    }

    private void InterceptUserActivity()
    {
        var dotNetRef = DotNetObjectReference.Create(this);
        js.InvokeVoidAsync("addEventListenersForActivity", dotNetRef);
    }

    [JSInvokable]
    public async Task UserActivityDetected()
    {
        await ResetInactivityTimer();
    }
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task ReloadSeats()
    {
        var currentSelectedSeats = new List<int>(selectedSeats);

        var seatsResponse = await httpClient.GetFromJsonAsync<TRIPDETAILS>($"{urlViewTrip}{id}");
        if (seatsResponse != null)
        {
            TRIPDETAILS = seatsResponse;

            takenSeats = seatsResponse.car_seat
                .Where(seat => seat.status == "Đã đặt")
                .Select(seat => seat.id.ToString())
                .ToList();
            Console.WriteLine("Taken Seats: " + string.Join(", ", takenSeats));
        }

        selectedSeats = currentSelectedSeats;
        Console.WriteLine("Restored Selected Seats: " + string.Join(", ", selectedSeats));
    }


    private async Task LoadUser()
    {
        customer = await httpClient.GetFromJsonAsync<customer>($"{urlCus}/{cus_id}");
    }
    private async Task LoadTripDetail()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<TRIPDETAILS>($"{urlViewTrip}{id}");
            TRIPDETAILS = response;
            car_seat = response.car_seat.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task OnSeatSelected(int seatId, string seatName)
    {
        if (selectedSeats.Contains(seatId))
        {
            selectedSeats.Remove(seatId);
            selectedSeatNames.Remove(seatName);

            if (hubConnection?.State == HubConnectionState.Connected)
            {
                await hubConnection.SendAsync("UnselectSeat", seatId);
            }
        }
        else
        {
            if (selectedSeats.Count < 5)
            {
                selectedSeats.Add(seatId);
                selectedSeatNames.Add(seatName);

                if (hubConnection?.State == HubConnectionState.Connected)
                {
                    await hubConnection.SendAsync("SelectSeat", seatId);
                }
            }
        }
        TRIPDETAILS.sale = (TRIPDETAILS.price - TRIPDETAILS.voucher) * selectedSeats.Count();
    }

    private async Task OnCheckout()
    {
        if (selectedSeats.Count() == 0)
        {
            errorMessageCheckCus = "Quý khách vui lòng chọn ghế.";
            return;
        }

        if (cus_id != 0)
        {
            bill.cus_id = cus_id;
        }
        else
        {
            if (string.IsNullOrWhiteSpace(addCus.fullname) ||
            string.IsNullOrWhiteSpace(addCus.phone_number))
            {
                errorMessageCheckCus = "Quý khách vui lòng điền đầy đủ thông tin hoặc đăng nhập.";
                return;
            }
            var response = await httpClient.GetAsync($"http://localhost:49922/api/Validate/CheckPhoneNumberCustomer/{addCus.phone_number}");
            if (response.StatusCode == HttpStatusCode.NotFound)
            {
                Console.WriteLine("Số điện thoại chưa được đăng ký, tiếp tục thêm khách hàng.");
                await AddCus();
            }
            else if (response.IsSuccessStatusCode)
            {
                var existingCustomer = await response.Content.ReadFromJsonAsync<Guest_Customer>();
                if (existingCustomer != null)
                {
                    cus_id = existingCustomer.id;
                    bill.cus_id = cus_id;
                }
            }
            else
            {
                errorMessageCheckCus = "Đã xảy ra lỗi khi kiểm tra số điện thoại.";
                Console.WriteLine(errorMessageCheckCus);
            }
        }

        empId = await GetEmpIdFromToken();
        bill.emp_id = empId;

        if (selectedSeats.Count() == 1)
        {
            //1 ghế
            // bill.emp_id = 5;
            bill.trip_detail_id = id;
            bill.car_seat_id = selectedSeats.First();
            bill.parent_id = 0;
            bill.cus_id = cus_id;
            bill.price = TRIPDETAILS.sale;


            var response = await httpClient.PostAsJsonAsync(urlBill, bill);
            if (response.IsSuccessStatusCode)
            {
                var responseTop = await httpClient.GetAsync(urlTopGuestTrip);
                var jsonResponse = await responseTop.Content.ReadAsStringAsync();
                Console.WriteLine("Response JSON: " + jsonResponse);

                var guestTrips = JsonSerializer.Deserialize<List<guest_trip>>(jsonResponse);
                var guestTripId = guestTrips.First().id;

                var updateResponse = await httpClient.PutAsJsonAsync($"{urlUpdateStatusBill}/{guestTripId}", new
                {
                    id = guestTripId
                });

            }
            else
            {
                Console.WriteLine("Thêm thất bại");
            }
        }
        else
        {
            //nhiều ghế
            // bill.emp_id = 5;
            bill.trip_detail_id = id;
            bill.parent_id = 0;
            bill.car_seat_id = null;
            bill.cus_id = cus_id;
            bill.price = TRIPDETAILS.sale;

            var firstResponse = await httpClient.PostAsJsonAsync(urlBill, bill);
            if (firstResponse.IsSuccessStatusCode)
            {
                var responseTop = await httpClient.GetAsync(urlTopGuestTrip);
                var jsonResponse = await responseTop.Content.ReadAsStringAsync();
                var guestTrips = JsonSerializer.Deserialize<List<guest_trip>>(jsonResponse);
                var guestTripId = guestTrips.First().id;

                var seatPrice = TRIPDETAILS.sale / selectedSeats.Count();
                bool allBillsCreatedSuccessfully = true;

                foreach (var seatId in selectedSeats)
                {
                    bill.car_seat_id = seatId;
                    bill.parent_id = guestTripId;
                    bill.price = seatPrice;

                    var response = await httpClient.PostAsJsonAsync(urlBill, bill);
                    if (!response.IsSuccessStatusCode)
                    {
                        Console.WriteLine("Thêm ghế thất bại");
                    }

                }
                var updateResponse = await httpClient.PutAsJsonAsync($"{urlUpdateStatusBill}/{guestTripId}", new
                {
                    id = guestTripId
                });



            }
            else
            {
                Console.WriteLine("Thêm thất bại");
            }
        }

    }

    private async Task SearchPhoneNumber()
    {
        if (string.IsNullOrWhiteSpace(addCus.phone_number))
        {
            addCus.fullname = string.Empty;
            return;
        }
        var response = await httpClient.GetAsync($"http://localhost:49922/api/Validate/CheckPhoneNumberCustomer/{addCus.phone_number}");
        if (response.IsSuccessStatusCode)
        {
            var responseTop = await httpClient.GetAsync(urlTopGuestTrip);
            var jsonResponse = await responseTop.Content.ReadAsStringAsync();
            var guestTrips = JsonSerializer.Deserialize<List<guest_trip_create>>(jsonResponse);
            var guestTripId = guestTrips.First().id;
            var existingCustomer = await response.Content.ReadFromJsonAsync<Guest_Customer>();
            if (existingCustomer != null)
            {
                addCus.fullname = existingCustomer.fullname;
                addCus.Id = existingCustomer.id;
                SaveButton = true;
            }
            else
            {
                errorMessageCheckCus = "Số điện thoại chưa được đăng ký.";
                SaveButton = false;
            }
        }
        else if (response.StatusCode == HttpStatusCode.NotFound)
        {
            errorMessageCheckCus = "Số điện thoại không tồn tại.";
        }
        else
        {
            errorMessageCheckCus = $"Đã xảy ra lỗi khi kiểm tra số điện thoại. Mã lỗi: {response.StatusCode}";
            Console.WriteLine($"API Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}");
        }
    }

    private async Task AddCus()
    {
        try
        {
            addCus.password = "123456";
            addCus.birthday = DateTime.Now.AddYears(-18);
            addCus.gender = 0;
            addCus.citizen_identity_img1 = null;
            addCus.citizen_identity_number = null;
            addCus.driver_license_img1 = null;
            addCus.driver_license_number = null;
            addCus.status = true;
            addCus.img_cus = null;
            var response = await httpClient.PostAsJsonAsync(urlCus, addCus);
            if (response.IsSuccessStatusCode)
            {
                var responseTop = await httpClient.GetAsync(urlGetTopCus);
                var jsonResponse = await responseTop.Content.ReadAsStringAsync();
                Console.WriteLine($"JSON Response: {jsonResponse}");

                var customerTop = JsonSerializer.Deserialize<List<Guest_Customer>>(jsonResponse);
                if (customerTop != null && customerTop.Any())
                {
                    foreach (var customer in customerTop)
                    {
                        Console.WriteLine($"Customer ID: {customer.id}");
                    }
                    var cusID = customerTop.First().id;
                    Console.WriteLine(customerTop.FirstOrDefault().id);
                    bill.cus_id = cusID;
                }
                else
                {
                    Console.WriteLine("Danh sách khách hàng trả về rỗng hoặc null.");
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi thêm khách hàng: {ex.Message}", Severity.Error);
        }
    }

    private void CalculateChange()
    {

        decimal priceValue = Convert.ToDecimal(TRIPDETAILS.sale);
        _tienThua = _tienKhachDua - priceValue;
        StateHasChanged();
    }

    private async Task<int> GetEmpIdFromToken()
    {
        var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (!string.IsNullOrEmpty(token))
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            var empIdClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "emp_id");
            if (empIdClaim != null)
            {
                return int.Parse(empIdClaim.Value);
            }
        }

        return 0;
    }

}




