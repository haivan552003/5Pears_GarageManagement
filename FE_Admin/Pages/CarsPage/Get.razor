@page "/getcars"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime js
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
    <MudGrid Class="pa-0">
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-3" Items="_items"></MudBreadcrumbs>
            </MudPaper>
            <MudPaper Elevation="0">
                <MudDataGrid Class="mx-auto pa-2" T="car" Dense="true" Hover="true" Bordered="true" Striped="true" MultiSelection="true"
                             Items="@Elements" SortMode="SortMode.Multiple" Filterable="false" QuickFilter="@_quickFilter"
                             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">

                    <ToolBarContent>
                        <MudItem xs="4" Elevation="0" Class="pb-3">
                            <MudTextField @bind-Value="_searchString" Placeholder="Tìm kiếm..." Adornment="Adornment.Start" Immediate="true"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </MudItem>
                        <MudItem xs="8" Elevation="0" Class="d-flex justify-end flex-grow-1 gap-4 pb-3">
                            <MudButton Href="/addcar" Variant="Variant.Outlined" StartIcon="fas fa-plus" Color="Color.Info" Size="Size.Small">
                                Thêm mới
                            </MudButton>
                            <MudButton Href="/importcars" Class="ml-2" Variant="Variant.Outlined" StartIcon="fas fa-upload" Color="Color.Tertiary" Size="Size.Small">
                                Nhập file
                            </MudButton>
                            <MudButton Href="/exportcars" Class="ml-2" Variant="Variant.Outlined" StartIcon="fas fa-download" Color="Color.Tertiary" Size="Size.Small">
                                Xuất file
                            </MudButton>
                        </MudItem>
                    </ToolBarContent>

                    <Columns>                   
                        <PropertyColumn T="car" Class="fw-bold" TProperty="string" Property="x => x.car_name" Title="Tên xe"
                                        Style="width: 20%; white-space: nowrap;" />

                        <TemplateColumn T="car" Class="fw-bold" Title="Biển số xe" Style="white-space: nowrap;">
                            <CellTemplate Context="element">
                                @if (string.IsNullOrEmpty(element.Item.car_number))
                                {
                                    <MudChip Color="Color.Warning" Size="Size.Small" Variant="Variant.Text">Chưa cập nhật</MudChip>
                                }
                                else
                                {
                                    @element.Item.car_number
                                }
                            </CellTemplate>
                        </TemplateColumn>
                           <PropertyColumn T="car" Style="width: 80%;" TProperty="string" Title="Loại dịch vụ xe" Class="fw-bold">
                            <CellTemplate>
                                @(context.Item.is_retail == 0 ? "Xe dịch vụ" : "Xe cho thuê")
                            </CellTemplate>
                        </PropertyColumn>
                      

                        <PropertyColumn T="car" Class="fw-bold" TProperty="string" Property="x => x.color" Title="Màu sắc"
                                        Style="width: 15%; white-space: nowrap;" />

                        <PropertyColumn T="car" Class="fw-bold" TProperty="DateTime" Property="x => x.year_production" Title="Năm SX"
                                        Style="width: 10%; white-space: nowrap;" Format="yyyy" />

                        <PropertyColumn T="car" Class="fw-bold" TProperty="float" Property="x => x.price" Title="Giá"
                                        Style="width: 10%; white-space: nowrap;" />

                        <TemplateColumn T="car" Class="fw-bold" Title="Chức năng" Style="white-space: nowrap;">
                            <CellTemplate Context="element">
                                <MudTooltip Text="Đặt vé">
                                    <MudIconButton Href="@($"/calendarCar/{element.Item.id}")" Icon="@Icons.Material.Outlined.AddCircle" Color="Color.Secondary" Size="Size.Small" />
                                </MudTooltip>
                                <MudTooltip Text="Chỉnh sửa">
                                    <MudIconButton Href="@($"/editcar/{element.Item.id}")" Icon="far fa-edit" Color="Color.Success" Size="Size.Small" />
                                </MudTooltip>
                                <MudTooltip Text="Xóa">
                                    <MudIconButton Icon="far fa-trash-alt" Color="Color.Error" Size="Size.Small"
                                                   OnClick="@(async () => { await OpenDeleteDialog(element.Item); })" />
                                </MudTooltip>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>

                    <PagerContent>
                        <MudDataGridPager T="car" />
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private IEnumerable<car> Elements = new List<car>();
    private string _searchString;
    private string carsUrl = "http://localhost:49922/api/Cars/getAllCars";

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Quản lý xe", href: "/getcars", icon: @Icons.Material.Outlined.DirectionsCar),
        new BreadcrumbItem("Danh sách xe", href: "/getcars", icon: @Icons.Material.Outlined.List),
    };

    private Func<car, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return $"{x.car_code} {x.car_name} {x.car_number} {x.color}".Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadCars();
    }

    private async Task LoadCars()
    {
        try
        {
            Elements = await httpClient.GetFromJsonAsync<List<car>>(carsUrl);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi tải dữ liệu: {ex.Message}", Severity.Error);
        }
    }

    void RowClicked(DataGridRowClickEventArgs<car> args)
    {
        // Optional row click handling
    }

    void RowRightClicked(DataGridRowClickEventArgs<car> args)
    {
        // Optional right-click handling
    }

    void SelectedItemsChanged(HashSet<car> items)
    {
        // Optional selection handling
    }

    private async Task OpenDeleteDialog(car car)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Bạn có chắc chắn muốn xóa xe {car.car_number}?" },
            { "ButtonText", "Xóa" },
            { "Color", Color.Error }
        };

        var dialog = DialogService.Show<Delete>("Xác nhận xóa", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DeleteCar(car.id);
        }
    }

    private async Task DeleteCar(int id)
    {
        try
        {
            // Gửi yêu cầu kiểm tra khách hàng có hóa đơn hay không
            var response = await httpClient.GetFromJsonAsync<ApiResponse>($"http://localhost:49922/api/Validate/ValidateCars/{id}");

            if (response.Success)
            {
                // Nếu khách hàng có thể xóa được, tiếp tục xóa khách hàng
                var deleteResponse = await httpClient.DeleteAsync($"{carsUrl}/{id}");
                if (deleteResponse.IsSuccessStatusCode)
                {
                    Snackbar.Add("Xóa xe thành công!", Severity.Success);
                    await LoadCars();
                }
                else
                {
                    Snackbar.Add("Xóa xe thành công!", Severity.Success);
                    await LoadCars();
                }
            }
            else
            {
                // Nếu không thể xóa (do khách hàng có hóa đơn), lấy thông báo từ API
                string errorMessage = response.Message ?? "Không thể xóa xe này.";
                Snackbar.Add(errorMessage, Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi xảy ra: {ex.Message}", Severity.Error);
        }
    }
    public class ApiResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; }
    }
}