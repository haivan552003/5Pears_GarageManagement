@page "/ocrcar"
@using System.Net.Http.Json
@using IronOcr
@using Newtonsoft.Json
@inject HttpClient httpClient
@inject IJSRuntime js
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.Medium">
    <MudGrid Class="pa-0">
        <MudItem xs="6">
            <MudPaper Elevation="0">
                <MudImage Src="@newCar.car_number" Elevation="25" Class="img-fluid w-100" id="capturedImage" />


                <InputFile id="imageInput" OnChange="@LoadDriverImage" hidden accept=".jpg,.jpeg,.png" />
                <MudButton HtmlTag="label" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Class="ma-3" for="imageInput">Chọn File</MudButton>

@*                 <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Class="ma-3" OnClick="() => StartCamera()">Mở camera</MudButton>
 *@             <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Class="ma-3" OnClick="() => ScanImage1()">Quét ảnh</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Class="ma-3" OnClick="() => OpenFullScreenDialog()">Camera</MudButton>

            </MudPaper>
        </MudItem>

        <MudItem xs="6">
            <MudPaper Elevation="0">
                <MudText Typo="Typo.h5" Class="fw-bold">THÔNG TIN XE</MudText>

                <MudGrid>
                    <MudItem xs="6" Class="pb-3">
                        <MudText Typo="Typo.subtitle1" Class="fw-bold">Biển số xe:</MudText>
                        <MudText Typo="Typo.subtitle1" Class="fw-bold">Tên xe:</MudText>
                        <MudText Typo="Typo.subtitle1" Class="fw-bold">Màu xe:</MudText>
                        <MudText Typo="Typo.subtitle1" Class="fw-bold">Loại xe:</MudText>
                        <MudText Typo="Typo.subtitle1" Class="fw-bold">Hãng xe:</MudText>
                        <MudText Typo="Typo.subtitle1" Class="fw-bold">Loại hộp số:</MudText>
                        <MudText Typo="Typo.subtitle1" Class="fw-bold">Ngày hết hạn đăng kiểm:</MudText>
                        <MudText Typo="Typo.subtitle1" Class="fw-bold">Nhiên liệu:</MudText>
                    </MudItem>
                    <MudItem xs="6" Class="pb-3">
                        <MudTextField Style="margin-top:-10px" id="resultInput" @bind-Value="FoundCar.car_number" />

                        @if (SelectedCar != null)
                        {
                            <MudText Typo="Typo.subtitle1" Align="Align.End">@SelectedCar.car_name</MudText>
                            <MudText Typo="Typo.subtitle1" Align="Align.End">@SelectedCar.color</MudText>
                            <MudText Typo="Typo.subtitle1" Align="Align.End">@SelectedCar.type_name</MudText>
                            <MudText Typo="Typo.subtitle1" Align="Align.End">@SelectedCar.brand_name</MudText>
                            <MudText Typo="Typo.subtitle1" Align="Align.End">@(SelectedCar.isAuto == 0 ? "Số tự động" : "Số sàn")</MudText>
                            <MudText Typo="Typo.subtitle1" Align="Align.End">@SelectedCar.vehicle_registration_end.ToString("dd/MM/yyyy")</MudText>
                            <MudText Typo="Typo.subtitle1" Align="Align.End">
                                   @(SelectedCar.fuel == 1 ? "Xăng RON 92 (E5)" :
                                    (SelectedCar.fuel == 2 ? "RON 92-III" :
                                    (SelectedCar.fuel == 3 ? "RON 95-IV" :
                                    (SelectedCar.fuel == 4 ? "Diesel 0,05%S" :
                                    (SelectedCar.fuel == 5 ? "Diesel 0,001%S (Diesel Euro 5)" :
                                    (SelectedCar.fuel == 6 ? "Pin Lithium-ion(Li-ion)" :
                                    (SelectedCar.fuel == 7 ? "Pin Lithium Iron Phosphate" :
                                    (SelectedCar.fuel == 8 ? "Pin thể rắn(Solid-State Battery)" :
                                    (SelectedCar.fuel == 9 ? "Hybrid truyền thống(HEV)" : "Không xác định")))))))))
                            </MudText>

                        }
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <MudItem xs="12">
            <MudPaper Elevation="0">
                <MudText Typo="Typo.h5" Class="fw-bold">LỊCH TRÌNH XE</MudText>

                @if (SelectedTripDetails != null && SelectedTripDetails.Any())
                {
                    <MudTable Items="@SelectedTripDetails">
                        <HeaderContent>
                            <MudTh Class="fw-bold">Địa điểm</MudTh>
                            <MudTh>Bắt Đầu</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Địa điểm">
                                  <MudText Typo="Typo.subtitle2"> @context.from (@context.location_from)</MudText>
                                  <MudIcon Icon="@Icons.Material.Filled.ArrowForwardIos" Size="Size.Small"/>
                                  <MudText Typo="Typo.subtitle2"> @context.to (@context.location_to)</MudText>
                                
                            </MudTd>
                            <MudTd DataLabel="Bắt Đầu">@context.time_start.ToString("dd/MM/yyyy HH:mm")</MudTd>
@*                             <MudTd DataLabel="Kết Thúc">@context.time_end.ToString("dd/MM/yyyy HH:mm")</MudTd> *@
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudText Typo="Typo.body2" Class="text-center my-4">Không có chi tiết chuyến đi</MudText>
                }
            </MudPaper>
        </MudItem>

    </MudGrid>
</MudContainer>

@code {
    private car newCar = new car();
    private car FoundCar = new car();
    private TripCarLocation SelectedCar;
    private List<TripDetailViewModel> SelectedTripDetails = new List<TripDetailViewModel>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Hiển thị ảnh đã chụp nếu có trong localStorage
            await js.InvokeVoidAsync("displayCapturedImage");
        }
    }

    private async Task SearchCar()
    {
        if (!string.IsNullOrEmpty(FoundCar.car_number) && FoundCar.car_number.Length >= 5)
        {
            try
            {
                var response = await httpClient.GetAsync($"http://localhost:49922/api/Cars/CarNumber/{FoundCar.car_number}");
                if (response.IsSuccessStatusCode)
                {
                    var responseData = await response.Content.ReadAsStringAsync();
                    SelectedCar = JsonConvert.DeserializeObject<TripCarLocation>(responseData);

                    if (SelectedCar != null &&
                        SelectedCar.Trip_Detail_Customs != null &&
                        SelectedCar.guest_Cars_Customs != null &&
                        SelectedCar.guest_Cars_Customs != null)
                    {
                        SelectedTripDetails = SelectedCar.Trip_Detail_Customs
                            .Zip(SelectedCar.Trip_Detail_Customs, (detail, custom) => new TripDetailViewModel
                                {
                                    from = custom.from,
                                    to = custom.to,
                                    time_start = detail.time_start,
                                    time_end = detail.time_end,
                                    location_from = detail.location_from,
                                    location_to = detail.location_to
                                })
                            .ToList();

                        StateHasChanged();
                    }
                    else
                    {
                        await js.InvokeVoidAsync( "Không tìm thấy chi tiết chuyến đi cho xe này.");
                        SelectedTripDetails.Clear();
                    }
                }
                else
                {
                    await js.InvokeVoidAsync("Không tìm thấy thông tin xe.");
                    SelectedTripDetails.Clear();
                    SelectedCar = null;
                }
            }
            catch (Exception ex)
            {
                await js.InvokeVoidAsync($"Lỗi: {ex.Message}");
                SelectedTripDetails.Clear();
                SelectedCar = null;
            }
        }
        else
        {
            await js.InvokeVoidAsync("Biển số xe không hợp lệ. Vui lòng kiểm tra lại.");
        }
    }
    private async Task LoadDriverImage(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"driver_images/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);
                    newCar.car_number = imageUrl;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync($"Lỗi tải ảnh: {ex.Message}");
        }
    }

    private async Task<string> GetBase64Image(IBrowserFile file)
    {
        try
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            var bytes = memoryStream.ToArray();
            return Convert.ToBase64String(bytes);
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Lỗi chuyển đổi ảnh: {ex.Message}");
            return null;
        }
    }

    private async Task ScanImage1()
    {
        try
        {
            var ocrResult = await js.InvokeAsync<string>("readTextFromImage", "imageInput", "resultInput");

            if (!string.IsNullOrEmpty(ocrResult) && ocrResult != "Không nhận diện được")
            {
                FoundCar.car_number = ocrResult.Trim();
                // await SearchCar();
            }
            else
            {
                FoundCar.car_number = string.Empty;
                await js.InvokeVoidAsync("alert", "Không thể nhận diện biển số xe. Vui lòng thử lại.");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            FoundCar.car_number = string.Empty;
            await js.InvokeVoidAsync("alert", $"Lỗi: {ex.Message}");
        }
        // await js.InvokeVoidAsync("scanCapturedImage", "resultInput");
    }

    private async Task OpenCameraDialog()
    {
        await DialogService.ShowAsync<CustomDialog>();
        await StartCamera();
    }

    private async Task StartCamera()
    {
        await js.InvokeVoidAsync("startCamera");
    }

    private async Task SwitchCamera()
    {
        await js.InvokeVoidAsync("switchCamera");
    }

    private async Task CaptureImage()
    {
        var imageData = await js.InvokeAsync<string>("captureImage");
        Console.WriteLine("Image Data: " + imageData);
    }
    private async Task OpenFullScreenDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions
            {
                FullScreen = true,
                CloseButton = true, 
                MaxWidth = MaxWidth.Large, 
            };

        await DialogService.ShowAsync<CustomDialog>("Full Screen Dialog", parameters, options);
        await StartCamera();
    }
    private async Task DownloadImage()
    {
        await js.InvokeVoidAsync("downloadImage");
    }

    public class TripCarLocation
    {
        public int id { get; set; }
        public string car_name { get; set; }
        public string car_code { get; set; }
        public string car_number { get; set; }
        public string color { get; set; }
        public DateTime vehicle_registration_start { get; set; }
        public DateTime vehicle_registration_end { get; set; }
        public float price { get; set; }
        public int type_id { get; set; }
        public string type_name { get; set; }
        public int brand_id { get; set; }
        public string brand_name { get; set; }
        public byte isAuto { get; set; }
        public DateTime year_production { get; set; }
        public float odo { get; set; }
        public float insurance_fee { get; set; }
        public int fuel { get; set; }
        public string description { get; set; }
        public int number_seat { get; set; }
        public List<trip_detail_custom> Trip_Detail_Customs { get; set; }
        public List<guest_cars_custom> guest_Cars_Customs { get; set; }
        public List<guest_car_driver_custom> guest_Car_Driver_Customs { get; set; }
    }

    public class trip_detail_custom
    {
        public string from { get; set; }
        public string to { get; set; }
        public string location_from { get; set; }
        public string location_to { get; set; }
        public string driver_name { get; set; }
        public DateTime time_start { get; set; }
        public DateTime time_end { get; set; }
    }

    public class trip_custom
    {
        public string from { get; set; }
        public string to { get; set; }
        public string location_from { get; set; }
        public string location_to { get; set; }
    }

    public class guest_cars_custom
    {
        public DateTime date_start { get; set; }
        public DateTime date_end { get; set; }
    }
    public class guest_car_driver_custom
    {
        public DateTime date_start { get; set; }
        public DateTime date_end { get; set; }
        public string driver_name { get; set; }
    }

    public class TripDetailViewModel
    {
        public string from { get; set; }
        public string to { get; set; }
        public string location_from { get; set; }
        public string location_to { get; set; }
        public DateTime time_start { get; set; }
        public DateTime time_end { get; set; }
    }

    public class car
    {
        public string car_number { get; set; }
    }
}