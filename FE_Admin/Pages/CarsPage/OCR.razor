@page "/ocrcar"
@using System.Net.Http.Json
@using IronOcr
@using Newtonsoft.Json
@inject HttpClient httpClient
@inject IJSRuntime js
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.85); /* Màu trắng với độ mờ 50% */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Đảm bảo overlay hiển thị trên các thành phần khác */
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </MudItem>
    </div>
}
<MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.Small">
    <MudPaper Elevation="1">
        <MudGrid Class="pa-3">
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="text-center">
                    <MudImage Src="@newCar.car_number" Elevation="0" Style="max-width:350px; height: 150px" Class="mb-3 mx-auto" id="capturedImage" />


                    <InputFile id="imageInput" OnChange="@LoadDriverImage" hidden accept=".jpg,.jpeg,.png" />
                    <MudButton HtmlTag="label" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Class="m-0 d-none d-md-flex mx-auto" Style="max-width:350px" for="imageInput">Chọn ảnh từ thư viện</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Class="ma-2 d-sm-none" OnClick="() => OpenFullScreenDialog()">Máy ảnh</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Small" Class="ma-2 d-sm-none" OnClick="() => ScanImage1()">Kiểm tra ảnh</MudButton>

                    @*             <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Class="ma-3" OnClick="() => StartCamera()">Mở camera</MudButton> *@

                </MudPaper>
            </MudItem>

            <MudItem xs="12">
                <MudPaper Elevation="0">
                    <MudText Typo="Typo.h5" Class="fw-bold" Color="Color.Primary">THÔNG TIN XE</MudText>
                    <MudText Typo="Typo.subtitle1" Class="fw-bold">Biển số xe</MudText>
                    <MudTextField id="resultInput" Variant="Variant.Outlined" Disabled="true" Margin="Margin.Dense" @bind-Value="FoundCar.car_number" />
                    <MudGrid>
                        <MudItem xs="6" Class="pb-3">
                            <MudText Typo="Typo.subtitle1" Class="fw-bold">Tên xe:</MudText>
                            <MudText Typo="Typo.subtitle1" Class="fw-bold">Màu xe:</MudText>
                            <MudText Typo="Typo.subtitle1" Class="fw-bold">Loại xe:</MudText>
                            <MudText Typo="Typo.subtitle1" Class="fw-bold">Hãng xe:</MudText>
                            <MudText Typo="Typo.subtitle1" Class="fw-bold">Loại hộp số:</MudText>
                            <MudText Typo="Typo.subtitle1" Class="fw-bold">Hạn đăng kiểm:</MudText>
                            <MudText Typo="Typo.subtitle1" Class="fw-bold">Nhiên liệu:</MudText>
                        </MudItem>
                        <MudItem xs="6" Class="pb-2">

                            @if (SelectedCar != null)
                            {
                                <MudText Typo="Typo.subtitle1" Align="Align.End">@SelectedCar.car_name</MudText>
                                <MudText Typo="Typo.subtitle1" Align="Align.End">@SelectedCar.color</MudText>
                                <MudText Typo="Typo.subtitle1" Align="Align.End">@SelectedCar.type_name</MudText>
                                <MudText Typo="Typo.subtitle1" Align="Align.End">@SelectedCar.brand_name</MudText>
                                <MudText Typo="Typo.subtitle1" Align="Align.End">@(SelectedCar.isAuto == false ? "Số tự động" : "Số sàn")</MudText>
                                <MudText Typo="Typo.subtitle1" Align="Align.End">@SelectedCar.vehicle_registration_end.ToString("dd/MM/yyyy")</MudText>
                                <MudText Typo="Typo.subtitle1" Align="Align.End">
                                    @(SelectedCar.fuel == 1 ? "Xăng RON 92 (E5)" :
                                        (SelectedCar.fuel == 2 ? "RON 92-III" :
                                        (SelectedCar.fuel == 3 ? "RON 95-IV" :
                                        (SelectedCar.fuel == 4 ? "Diesel 0,05%S" :
                                        (SelectedCar.fuel == 5 ? "Diesel 0,001%S (Diesel Euro 5)" :
                                        (SelectedCar.fuel == 6 ? "Pin Lithium-ion(Li-ion)" :
                                        (SelectedCar.fuel == 7 ? "Pin Lithium Iron Phosphate" :
                                        (SelectedCar.fuel == 8 ? "Pin thể rắn(Solid-State Battery)" :
                                        (SelectedCar.fuel == 9 ? "Hybrid truyền thống(HEV)" : "Không xác định")))))))))
                                </MudText>

                            }
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>

            <MudItem xs="12">
                <MudPaper Elevation="0">
                    <MudText Typo="Typo.h5" Class="fw-bold mt-2" Color="Color.Primary">LỊCH TRÌNH XE</MudText>

                    <MudDataGrid Class="mx-auto pa-2" T="trip_detail_custom" Dense="true" Hover="true" Bordered="true" Striped="true" MultiSelection="true"
                                 SortMode="SortMode.Multiple" Filterable="false" Hideable="true">
                        <Columns>
                            <PropertyColumn T="trip_detail_custom" Class="fw-bold" TProperty="string" Property="x => x.date" Title="Thời gian" />
                            <PropertyColumn T="trip_detail_custom" Class="fw-bold" TProperty="string" Property="x => x.location" Title="Địa điểm" />
                        </Columns>
                        <PagerContent>
                            <MudDataGridPager T="trip_detail_custom" />
                        </PagerContent>
                    </MudDataGrid>

                </MudPaper>
            </MudItem>
        </MudGrid>

    </MudPaper>
</MudContainer>

@code {
    private bool isLoading = false;
    private car newCar = new car();
    private car FoundCar = new car();
    private TripCarLocation SelectedCar;
    private List<trip_detail_custom> trip_detail_custom = new List<trip_detail_custom>();
    private List<guest_cars_custom> guest_cars_custom = new List<guest_cars_custom>();
    private List<guest_car_driver_custom> guest_car_driver_custom = new List<guest_car_driver_custom>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Kiểm tra nếu ảnh tồn tại trong localStorage
            var imageData = await js.InvokeAsync<string>("localStorage.getItem", "imageInput");
            if (!string.IsNullOrEmpty(imageData))
            {
                await js.InvokeVoidAsync("displayCapturedImage");
                await ScanImage1();
            }
        }
    }


    private async Task SearchCar()
    {
        isLoading = true;
        if (!string.IsNullOrEmpty(FoundCar.car_number) && FoundCar.car_number.Length >= 5)
        {
            try
            {
                Console.WriteLine($"Bắt đầu gọi API với car_number: {FoundCar.car_number}");

                Console.WriteLine("Bắt đầu gọi API...");
                var url = $"http://localhost:49922/api/Cars/CarNumber/{FoundCar.car_number}";
                Console.WriteLine("URL: " + url);

                var json = await httpClient.GetStringAsync(url);
                Console.WriteLine("JSON trả về từ API:");
                Console.WriteLine(json);

                var response = JsonConvert.DeserializeObject<TripCarLocation>(json);
                Console.WriteLine("Deserialization thành công.");

                if (response != null)
                {
                    SelectedCar = response;

                    // Log chi tiết từng danh sách
                    Console.WriteLine("Trip_Detail_Customs:");
                    response.Trip_Detail_Customs.ForEach(item => Console.WriteLine(item));


                    Console.WriteLine("guest_Cars_Customs:");
                    response.guest_Cars_Customs.ForEach(item => Console.WriteLine(item));

                    Console.WriteLine("guest_Car_Driver_Customs:");
                    response.guest_Car_Driver_Customs.ForEach(item => Console.WriteLine(item));

                    trip_detail_custom = response.Trip_Detail_Customs.ToList();
                    guest_cars_custom = response.guest_Cars_Customs.ToList();
                    guest_car_driver_custom = response.guest_Car_Driver_Customs.ToList();
                }
                else
                {
                    Console.WriteLine("Response từ API là null.");
                }
            }
            catch (HttpRequestException httpEx)
            {
                Console.WriteLine($"Lỗi HTTP: {httpEx.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Lỗi khi gọi API: {ex.Message}");
            }

        }
        else
        {
            await js.InvokeVoidAsync("Biển số xe không hợp lệ. Vui lòng kiểm tra lại.");
        }
        isLoading = false;
    }
    private async Task LoadDriverImage(InputFileChangeEventArgs e)
    {
        isLoading = true;
        try
        {
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"driver_images/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);
                    newCar.car_number = imageUrl;
                    ScanImage1();
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync($"Lỗi tải ảnh: {ex.Message}");
        }
    }

    private async Task<string> GetBase64Image(IBrowserFile file)
    {
        try
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            var bytes = memoryStream.ToArray();
            return Convert.ToBase64String(bytes);
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Lỗi chuyển đổi ảnh: {ex.Message}");
            return null;
        }
    }

    private async Task ScanImage1()
    {
        try
        {
            var ocrResult = await js.InvokeAsync<string>("readTextFromImage", "imageInput");

            if (!string.IsNullOrEmpty(ocrResult) && ocrResult != "Không nhận diện được")
            {
                FoundCar.car_number = ocrResult.Trim();
                await SearchCar();
            }
            else
            {
                FoundCar.car_number = string.Empty;
                Snackbar.Add("Không thể nhận diện biển số xe", Severity.Warning);
            }

            await js.InvokeVoidAsync("localStorage.removeItem", "imageInput");

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi: {ex.Message}");
        }
    }

    private async Task OpenCameraDialog()
    {
        await DialogService.ShowAsync<CustomDialog>();
        await StartCamera();
    }

    private async Task StartCamera()
    {
        await js.InvokeVoidAsync("startCamera");
    }

    private async Task SwitchCamera()
    {
        await js.InvokeVoidAsync("switchCamera");
    }

    private async Task CaptureImage()
    {
        var imageData = await js.InvokeAsync<string>("captureImage");
        Console.WriteLine("Image Data: " + imageData);
    }
    private async Task OpenFullScreenDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions
            {
                FullScreen = true,
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
            };

        await DialogService.ShowAsync<CustomDialog>("Máy ảnh", parameters, options);
        await StartCamera();
    }
    private async Task DownloadImage()
    {
        await js.InvokeVoidAsync("downloadImage");
    }

    public class car_number_check
    {
        public string car_number { get; set; }
    }

}