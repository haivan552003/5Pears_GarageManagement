@page "/editcar/{id:int}"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime js
<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255); /* Màu trắng với độ mờ 50% */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Đảm bảo overlay hiển thị trên các thành phần khác */
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudImage Src="/Image/404.jpg" Alt="NOT FOUND" Elevation="0" Fluid="true" />
        </MudItem>
    </div>
}

<MudContainer MaxWidth="MaxWidth.False" Class="mt-14 pa-0">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-3" Items="_items"></MudBreadcrumbs>
            </MudPaper>
        </MudItem>
        <EditForm Model="@Car" OnValidSubmit="SubmitForm">
            <MudGrid>
                <MudItem xs="12" md="8">
                    <DataAnnotationsValidator />
                    <MudPaper Class="pa-4">
                        <MudText Typo="Typo.h5" Class="mb-4">Thông tin xe</MudText>
                        <MudGrid>
                            <MudItem xs="4">
                                <MudTextField Variant="Variant.Outlined" @bind-Value="Car.car_number" Label="Biển số xe" Disabled="true" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField Variant="Variant.Outlined" @bind-Value="Car.car_name" Label="Tên xe" Required="true" RequiredError="Tên xe là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateCarName))" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect Variant="Variant.Outlined"
                                           @bind-Value="Car.fuel"
                                           Label="Nhiên liệu"
                                           Required="true"
                                           RequiredError="Nhiên liệu là bắt buộc">
                                    <MudSelectItem Value="1">Xăng RON 92 (E5)</MudSelectItem>
                                    <MudSelectItem Value="2">RON 95-III</MudSelectItem>
                                    <MudSelectItem Value="3">RON 95-IV</MudSelectItem>
                                    <MudSelectItem Value="4">Diesel 0,05%S</MudSelectItem>
                                    <MudSelectItem Value="5">Diesel 0,001%S (Diesel Euro 5)</MudSelectItem>
                                    <MudSelectItem Value="6">Pin Lithium-ion (Li-ion)</MudSelectItem>
                                    <MudSelectItem Value="7">Pin Lithium Iron Phosphate (LFP)</MudSelectItem>
                                    <MudSelectItem Value="8">Pin thể rắn (Solid-State Battery)</MudSelectItem>
                                    <MudSelectItem Value="9">Hybrid truyền thống (HEV)</MudSelectItem>
                                    <MudSelectItem Value="10">Plug-in Hybrid (PHEV)</MudSelectItem>
                                    <MudSelectItem Value="11">Pin CATL</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4">
                                <MudNumericField Variant="Variant.Outlined" @bind-Value="Car.price" Label="Giá xe" Min="0" Step="1000" Required="true" RequiredError="Giá xe là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidatePrice))" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField Variant="Variant.Outlined" @bind-Value="Car.color" Label="Màu xe" Required="true" RequiredError="Màu xe đi được là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateColor))" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudDatePicker @bind-Date="registrationStartDate" DateFormat="dd/MM/yyyy" Label="Ngày đăng kiểm" Required="true" Variant="Variant.Outlined" RequiredError="Ngày đăng ký là bắt buộc" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudDatePicker @bind-Date="registrationEndDate" DateFormat="dd/MM/yyyy" Label="Ngày hết hạn đăng kiểm" Required="true" Variant="Variant.Outlined" RequiredError="Ngày hết hạn đăng ký là bắt buộc" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect @bind-Value="Car.isAuto"
                                           Label="Loại hộp số"
                                           Required="true"
                                           RequiredError="Vui lòng chọn loại hộp số"
                                           Variant="Variant.Outlined">
                                    <MudSelectItem Value="@((byte)0)">Số sàn</MudSelectItem>
                                    <MudSelectItem Value="@((byte)1)">Số tự động</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect @bind-Value="Car.is_retail"
                                           Label="Loại dịch vụ"
                                           Required="true"
                                           RequiredError="Vui lòng chọn loại dịch vụ"
                                           Variant="Variant.Outlined">
                                    <MudSelectItem Value="@((byte)0)">Xe dịch vụ</MudSelectItem>
                                    <MudSelectItem Value="@((byte)1)">Xe cho thuê</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="3">
                                <MudDatePicker @bind-Date="productionDate"
                                               Label="Năm sản xuất"
                                               Required="true"
                                               RequiredError="Năm sản xuất là bắt buộc"
                                               Variant="Variant.Outlined"
                                               OpenTo="OpenTo.Year" FixMonth="@DateTime.Today.Month" FixDay="@DateTime.Today.Day" DateFormat="yyyy"
                                               Placeholder="Năm sản xuất" />
                            </MudItem>
                            <MudItem xs="3">
                                <MudTextField Variant="Variant.Outlined" @bind-Value="Car.location_car" Placeholder="Vị trí xe" Label="Vị trí xe" Disabled="true" />
                            </MudItem>
                            <MudItem xs="3">
                                <MudNumericField Variant="Variant.Outlined" @bind-Value="Car.odo" Label="Số km đã đi" Required="true" RequiredError="Số km đã đi là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateOdo))" />
                            </MudItem>
                            <MudItem xs="3">
                                <MudTextField Variant="Variant.Outlined" @bind-Value="Car.voucher" Placeholder="Voucher" Label="Voucher" Required="true" Min="0" Step="1000" />
                            </MudItem>
                            <MudItem xs="3">
                                <MudNumericField Variant="Variant.Outlined" @bind-Value="Car.number_seat" Label="Số ghế" Disabled="true" />
                            </MudItem>
                            <MudItem xs="3">
                                <MudNumericField Variant="Variant.Outlined" @bind-Value="Car.insurance_fee" Label="Phí bảo hiểm" Required="true" Min="0" Step="1000" RequiredError="Phí bảo hiểm là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateBh))" />
                            </MudItem>
                            <MudItem xs="3">
                                <MudSelect @bind-Value="Car.type_id" Label="Loại Xe" Required="true" Variant="Variant.Outlined">
                                    @if (car_types != null)
                                    {
                                        @foreach (var role in car_types)
                                        {
                                            <MudSelectItem Value="role.id">@role.name</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="3">
                                <MudSelect @bind-Value="Car.brand_id" Label="Hãng Xe" Required="true" Variant="Variant.Outlined">
                                    @if (car_brands != null)
                                    {
                                        @foreach (var role in car_brands)
                                        {
                                            <MudSelectItem Value="role.id">@role.name</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField Variant="Variant.Outlined" @bind-Value="Car.description" Label="Mô tả" Required="true" Lines="3" RequiredError="Mô tả là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateDescription))" />
                            </MudItem>
                            <MudItem xs="12" Class="d-flex justify-end mt-4">
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Secondary"
                                           OnClick="Cancel"
                                           Class="mx-2">Hủy</MudButton>
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Secondary"
                                           OnClick="OpenAddMultipleCarsDialogg"
                                           Class="mx-2">Thêm nhiều xe cùng loại</MudButton>
                                <MudButton ButtonType="ButtonType.Submit"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Save">Lưu</MudButton>
                            </MudItem>
                        </MudGrid>

                    </MudPaper>
                </MudItem>

                <MudItem xs="12" md="4">
                    <MudPaper Elevation="3" Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-4">Ghế</MudText>
                        <MudButton OnClick="OpenAddSeatDialog"
                                   Variant="Variant.Outlined"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Class="mb-5">
                            Thêm ghế
                        </MudButton>
                        <MudGrid Class="overflow-y-auto" Style="max-height: 580px;">
                            @foreach (var seat in CarSeats)
                            {
                                <MudItem xs="12">
                                    <MudCard>
                                        <MudCardContent>
                                            <MudGrid>
                                                <MudItem xs="9">
                                                    <MudText>@seat.name (Hàng: @seat.row, Tầng: @seat.col)</MudText>
                                                </MudItem>
                                                <MudItem xs="3" Class="d-flex justify-end">
                                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                                   Color="Color.Primary"
                                                                   OnClick="@(() => OpenEditSeatDialog(seat))" />
                                                </MudItem>
                                            </MudGrid>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="3" Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-4">Hình ảnh xe</MudText>
                        <div class="d-flex gap-2 mb-3">
                            <MudButton OnClick="OpenAddImageDialog"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Add">
                                Thêm ảnh
                            </MudButton>
                            <MudButton OnClick="DeleteSelectedImages"
                                       Variant="Variant.Filled"
                                       Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       Disabled="@(!SelectedImages.Any())">
                                Xóa ảnh đã chọn
                            </MudButton>
                        </div>

                        <MudGrid>

                            <MudItem xs="12">
                                <MudCard>
                                    <MudCardContent>
                                        <MudGrid>
                                            @foreach (var image in CarImages)
                                            {
                                                <MudItem xs="2">
                                                    <MudCheckBox T="bool"
                                                                 Checked="@(SelectedImages.Contains(image.id))"
                                                                 CheckedChanged="@( (bool value) => OnImageSelected(value, image.id))" />
                                                    <img src="@image.name" class="img-fluid" style="width:250px; height: 200px" alt="Alternate Text" />
                                                    @* <MudText>@image.name</MudText> *@
                                                </MudItem>
                                            }
                                            @*  <MudItem xs="3" Class="d-flex justify-end">
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                            Color="Color.Primary"
                                            OnClick="@(() => OpenEditImageDialog(image))" />
                                            </MudItem> *@
                                        </MudGrid>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>

                        </MudGrid>
                    </MudPaper>
                </MudItem>



            </MudGrid>
        </EditForm>
    </MudGrid>
</MudContainer>

@code {
    [Parameter] public int id { get; set; }

    private car_create Car = new car_create();
    private List<car_seat> CarSeats = new List<car_seat>();
    private List<car_img> CarImages = new List<car_img>();
    private HashSet<int> SelectedImages = new HashSet<int>();
    private string apiUrl = "http://localhost:49922/api";
    private DateTime? registrationStartDate;
    private DateTime? registrationEndDate;
    private DateTime? productionDate;
    private List<dropdown> car_types = new List<dropdown>();
    private List<dropdown> car_brands = new List<dropdown>();
    private string userRole;
    private bool isInitialized = false;
    private bool isLoading = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;

            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();

                    if (handler.CanReadToken(token))
                    {
                        var jwtToken = handler.ReadJwtToken(token);

                        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");

                        if (roleClaim != null)
                        {
                            userRole = roleClaim.Value;
                        }
                        else
                        {
                            Console.WriteLine("Role claim not found in the token.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi giải mã token: {ex.Message}");
                }
            }
            CheckRole();
            StateHasChanged();
        }
    }

    private void CheckRole()
    {
        if (userRole == "1")
        {
            Console.WriteLine("User is an Admin.");
        }
        else if (userRole == "2")
        {
            Console.WriteLine("User is a regular User.");
        }
        else if (userRole == "3")
        {
            Console.WriteLine("User is a regular Driver.");
        }
        else
        {
            isLoading = true;
        }
    }

    private string typeUrl = "http://localhost:49922/api/Dropdown/car_type";
    private string brandUrl = "http://localhost:49922/api/Dropdown/car_brand";

    private int numberOfCarsToAdd = 1;  // Số lượng xe để thêm

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Xe", "/getcars", icon: Icons.Material.Outlined.DirectionsCar),
        new BreadcrumbItem("Danh sách xe", "/getcars", icon: Icons.Material.Outlined.List),
        new BreadcrumbItem("Chỉnh sửa xe", null, icon: Icons.Material.Outlined.Edit)
    };
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Car = await httpClient.GetFromJsonAsync<car_create>($"{apiUrl}/Cars/{id}");
            if (Car != null)
            {
                productionDate = Car.year_production;
                registrationStartDate = Car.vehicle_registration_start;
                registrationEndDate = Car.vehicle_registration_end;
            }
       

            await LoadCarAndSeats();
            await LoadCarImages();
            await LoadType();
            await LoadBrand();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải thông tin xe: {ex.Message}", Severity.Error);
        }
    }
    private async Task LoadType()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<dropdown>>(typeUrl);
            if (response != null)
            {
                car_types = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải danh sách vai trò: {ex.Message}", Severity.Error);
        }
    }
    private async Task LoadBrand()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<dropdown>>(brandUrl);
            if (response != null)
            {
                car_brands = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải danh sách vai trò: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenAddSeatDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("CarId", id);
        var dialog = DialogService.Show<EditSeat>("Thêm ghế mới", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var newSeat = (car_seat)result.Data;
            var response = await httpClient.PostAsJsonAsync($"{apiUrl}/Cars/PostCarSeat", newSeat);
            if (response.IsSuccessStatusCode)
            {
                await LoadCarAndSeats();
                Snackbar.Add("Thêm ghế mới thành công", Severity.Success);
            }
            else
            {
                Snackbar.Add("Lỗi khi thêm ghế mới", Severity.Error);
            }
        }
    }

    private async Task OpenEditSeatDialog(car_seat seat)
    {
        var parameters = new DialogParameters();
        parameters.Add("Seat", seat);
        parameters.Add("CarId", id);
        var dialog = DialogService.Show<EditSeat>("Chỉnh sửa thông tin ghế", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var updatedSeat = (car_seat)result.Data;
            var response = await httpClient.PutAsJsonAsync($"{apiUrl}/Cars/putCarSeat/{seat.id}", updatedSeat);
            if (response.IsSuccessStatusCode)
            {
                await LoadCarAndSeats();
                Snackbar.Add("Cập nhật thông tin ghế thành công", Severity.Success);
            }
            else
            {
                Snackbar.Add("Lỗi khi cập nhật thông tin ghế", Severity.Error);
            }
        }
    }

    private async Task LoadCarAndSeats()
    {
        try
        {
            var carResponse = await httpClient.GetFromJsonAsync<car_create>($"{apiUrl}/Cars/{id}");

            // Load car seats
            var seatsResponse = await httpClient.GetFromJsonAsync<List<car_seat>>($"{apiUrl}/Cars/getCarSeats/{id}");
            if (seatsResponse != null)
            {
                CarSeats = seatsResponse;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Xe chưa có ghế, vui lòng thêm ghế", Severity.Warning);
        }
    }

    private async Task SubmitForm()
    {
        try
        {
            if (registrationStartDate.HasValue && registrationEndDate.HasValue)
            {
                if (registrationEndDate.Value <= registrationStartDate.Value)
                {
                    Snackbar.Add("Ngày hết hạn đăng kiểm phải sau ngày đăng kiểm", Severity.Error);
                    return;
                }
            }
            if (productionDate.HasValue && productionDate.Value.Year > DateTime.Now.Year)
            {
                Snackbar.Add("Năm sản xuất không được lớn hơn năm hiện tại", Severity.Error);
                return;
            }
            if (registrationStartDate.HasValue)
                Car.vehicle_registration_start = registrationStartDate.Value;
            if (registrationEndDate.HasValue)
                Car.vehicle_registration_end = registrationEndDate.Value;
            if (productionDate.HasValue)
                Car.year_production = productionDate.Value;


            var carResponse = await httpClient.PutAsJsonAsync($"{apiUrl}/Cars/putCars/{id}", Car);
            if (!carResponse.IsSuccessStatusCode)
            {
                if (carResponse.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    Snackbar.Add("Biển số xe này đã tồn tại. Vui lòng chọn biển số khác.", Severity.Error);
                    return;
                }

                Snackbar.Add("Có lỗi xảy ra khi cập nhật thông tin xe", Severity.Error);
                return;
            }

            foreach (var seat in CarSeats)
            {
                var seatResponse = await httpClient.PutAsJsonAsync($"{apiUrl}/Cars/putCarSeat/{seat.id}", seat);
                if (!seatResponse.IsSuccessStatusCode)
                {
                    throw new Exception($"Lỗi cập nhật thông tin ghế: {await seatResponse.Content.ReadAsStringAsync()}");
                }
            }

            Snackbar.Add("Cập nhật thành công", Severity.Success);
            navigationManager.NavigateTo("/getcars");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi: {ex.Message}", Severity.Error);
        }
    }


    private async Task OpenAddMultipleCarsDialogg()
    {
        var parameters = new DialogParameters();
        parameters.Add("CarId", id);

        var dialog = DialogService.Show<AddCars>("Thêm nhiều ảnh", parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            int numberOfCars = (int)result.Data;
            await AddMultipleCars(numberOfCars);
        }
    }

    private async Task AddMultipleCars(int numberOfCars)
    {
        try
        {
            var addCarssRequest = new Add_Carss
                {
                    car_id = Car.id,                          // ID của xe gốc
                    quantity = numberOfCars,                  // Số lượng xe cần tạo
                    number_seat = Car.number_seat,           // Số ghế của xe gốc
                    car_number = Car.car_number,              // Biển số xe của xe gốc
                    color = Car.color,                        // Màu sắc của xe
                    vehicle_registration_start = Car.vehicle_registration_start, // Ngày bắt đầu đăng ký xe
                    vehicle_registration_end = Car.vehicle_registration_end,     // Ngày kết thúc đăng ký xe
                    price = Car.price,                        // Giá của xe
                    isAuto = Car.isAuto,                      // Tự động (1/0)
                    is_retail = Car.is_retail,                  // Bán lẻ (1/0)
                    type_id = Car.type_id,                    // ID loại xe
                    brand_id = Car.brand_id,                  // ID thương hiệu xe
                    year_production = Car.year_production,    // Năm sản xuất
                    odo = Car.odo,                            // Odometer (số km đã đi)
                    insurance_fee = Car.insurance_fee,        // Phí bảo hiểm
                    fuel = Car.fuel,                          // Loại nhiên liệu
                    description = Car.description,            // Mô tả chi tiết
                    car_name = Car.car_name,                  // Tên xe
                    voucher = Car.voucher                     // Mã giảm giá (nếu có)
                };

            var response = await httpClient.PostAsJsonAsync($"{apiUrl}/Cars/PostCarsss", addCarssRequest);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Đã thêm {numberOfCars} xe thành công", Severity.Success);
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Lỗi: {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi: {ex.Message}", Severity.Error);
        }
    }
    private async Task LoadCarImages()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<car_img>>($"{apiUrl}/Cars/GetImgById/{id}");
            if (response != null)
            {
                CarImages = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Chưa có ảnh xe nào được thêm", Severity.Info);
        }
    }

    private async Task OpenAddImageDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("CarId", id);
        var dialog = DialogService.Show<EditImg>("Thêm nhiều ảnh", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var newImages = (List<car_img>)result.Data;
            try
            {
                var tasks = newImages.Select(img =>
                    httpClient.PostAsJsonAsync($"{apiUrl}/Cars/CreateImg", img));

                var responses = await Task.WhenAll(tasks);

                if (responses.All(r => r.IsSuccessStatusCode))
                {
                    await LoadCarImages();
                    Snackbar.Add("Thêm ảnh mới thành công", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Có lỗi xảy ra khi thêm một số ảnh", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Lỗi khi thêm ảnh mới: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task OpenEditImageDialog(car_img image)
    {
        var parameters = new DialogParameters();
        parameters.Add("Image", image);
        parameters.Add("CarId", id);
        var dialog = DialogService.Show<EditImg>("Chỉnh sửa thông tin ảnh", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var updatedImage = (car_img)result.Data;
            var response = await httpClient.PutAsJsonAsync($"{apiUrl}/Cars/updateImg/{image.id}", updatedImage);
            if (response.IsSuccessStatusCode)
            {
                await LoadCarImages();
                Snackbar.Add("Cập nhật thông tin ảnh thành công", Severity.Success);
            }
            else
            {
                Snackbar.Add("Lỗi khi cập nhật thông tin ảnh", Severity.Error);
            }
        }
    }

    private void OnImageSelected(bool isChecked, int imageId)
    {
        if (isChecked)
        {
            SelectedImages.Add(imageId);
        }
        else
        {
            SelectedImages.Remove(imageId);
        }
    }

    private async Task DeleteSelectedImages()
    {
        if (!SelectedImages.Any()) return;

        var parameters = new DialogParameters
        {
            { "ContentText", $"Bạn có chắc chắn muốn xóa {SelectedImages.Count} ảnh đã chọn không?" },
            { "ButtonText", "Xóa" },
            { "Color", Color.Error }
        };

        var dialog = DialogService.Show<DeleteImg>("Xác nhận xóa", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            try
            {
                var deleteTasks = SelectedImages.Select(imageId =>
                    httpClient.DeleteAsync($"{apiUrl}/Cars/deleteImg/{imageId}"));

                var results = await Task.WhenAll(deleteTasks);

                if (results.All(r => r.IsSuccessStatusCode))
                {
                    await LoadCarImages();
                    SelectedImages.Clear();
                    Snackbar.Add("Xóa ảnh thành công", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Có lỗi xảy ra khi xóa một số ảnh", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Lỗi: {ex.Message}", Severity.Error);
            }
        }
    }

    private void Cancel()
    {
        navigationManager.NavigateTo("/getcars");
    }
    private IEnumerable<string> CarValidateCarNumber(string number)
    {
        if (string.IsNullOrWhiteSpace(number))
        {
            yield return "Vui lòng điền bảng số.";
        }
        else
        {
            var regex = new System.Text.RegularExpressions.Regex(@"^[A-Za-z]{2}-\d{5}$");
            if (!regex.IsMatch(number))
            {
                yield return "Biển số xe không hợp lệ. Định dạng phải là XX-12345.";
            }
        }
    }

    private IEnumerable<string> CarValidateCarName(string carname)
    {
        if (string.IsNullOrWhiteSpace(carname))
        {
            yield return "Vui lòng điền tên xe.";
        }
        else if (carname.Length < 5 || carname.Length > 100)
        {
            yield return "Tên xe không hợp lệ.";
        }
    }

    private IEnumerable<string> CarValidateColor(string color)
    {
        if (string.IsNullOrWhiteSpace(color))
        {
            yield return "Vui lòng điền màu xe.";
        }
        else if (color.Length > 20)
        {
            yield return "Màu xe không hợp lệ.";
        }
    }

    private IEnumerable<string> CarValidatePrice(string price)
    {
        if (string.IsNullOrWhiteSpace(price))
        {
            yield return "Vui lòng điền giá xe.";
        }
        else if (price.Length < 0)
        {
            yield return "giá xe không hợp lệ.";
        }
    }

    private IEnumerable<string> CarValidateOdo(string odo)
    {
        if (string.IsNullOrWhiteSpace(odo))
        {
            yield return "Vui lòng điền số km.";
        }
        else if (odo.Length < 0)
        {
            yield return "giá xe không hợp lệ.";
        }
    }
    private IEnumerable<string> CarValidateBh(string bh)
    {
        if (string.IsNullOrWhiteSpace(bh))
        {
            yield return "Vui lòng điền phí bảo hiểm.";
        }
        else if (bh.Length < 0)
        {
            yield return "Phí bảo hiểm không hợp lệ.";
        }
    }

    private IEnumerable<string> CarValidateDescription(string description)
    {
        if (string.IsNullOrWhiteSpace(description))
        {
            yield return "Vui lòng điền mô tả.";
        }
        else if (description.Length < 2 || description.Length > 250)
        {
            yield return "Mô tả không hợp lệ.";
        }
    }
}