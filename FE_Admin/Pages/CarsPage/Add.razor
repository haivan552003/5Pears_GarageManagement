@page "/addcar"
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime


<MudContainer Class="mt-16 pa-4" MaxWidth="MaxWidth.Large">
    <MudPaper Elevation="0" Class="mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
        <MudBreadcrumbs Class="pa-3" Items="_items"></MudBreadcrumbs>
    </MudPaper>
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h5" Class="mb-4">Thêm xe mới</MudText>
        <MudForm @ref="form">
            <MudGrid>
                <MudItem xs="4">
                    <MudButton>Quét</MudButton>
                </MudItem>
                <MudItem xs="4">
                    <MudText Typo="Typo.subtitle1">Tải lên hình ảnh:</MudText>
                    <input type="file" id="imageInput" accept="image/*" />
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                               OnClick="() => ScanImage()">Quét ảnh</MudButton>
                </MudItem>
                
                <MudItem xs="4">
                    <MudTextField Variant="Variant.Filled" @bind-Value="newCar.car_code" Label="Mã xe" ReadOnly="true" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField id="resultInput" Variant="Variant.Outlined"
                                  Label="Nội dung từ hình ảnh"
                                  @bind-Value="newCar.car_number" Placeholder="Kết quả OCR sẽ hiển thị ở đây" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="newCar.car_name" Label="Tên xe" Placeholder="Nhập tên xe" Required="true" RequiredError="Tên xe là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateCarName))" />
                </MudItem>
                <MudItem xs="4">
                    <MudSelect Variant="Variant.Outlined" @bind-Value="newCar.fuel" Label="Nhiên liệu" Required="true" RequiredError="Nhiên liệu là bắt buộc">
                        <MudSelectItem Value="1">Xăng RON 92 (E5)</MudSelectItem>
                        <MudSelectItem Value="2">RON 95-III</MudSelectItem>
                        <MudSelectItem Value="3">RON 95-IV</MudSelectItem>
                        <MudSelectItem Value="4">Diesel 0,05%S</MudSelectItem>
                        <MudSelectItem Value="5">Diesel 0,001%S (Diesel Euro 5)</MudSelectItem>
                        <MudSelectItem Value="6">Pin Lithium-ion (Li-ion)</MudSelectItem>
                        <MudSelectItem Value="7">Pin Lithium Iron Phosphate (LFP)</MudSelectItem>
                        <MudSelectItem Value="8">Pin thể rắn (Solid-State Battery)</MudSelectItem>
                        <MudSelectItem Value="9">Hybrid truyền thống (HEV)</MudSelectItem>
                        <MudSelectItem Value="10">Plug-in Hybrid (PHEV)</MudSelectItem>
                    </MudSelect>

                </MudItem>
                <MudItem xs="4">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="newCar.color" Label="Màu xe" Placeholder="Nhập màu xe" Required="true" RequiredError="Màu xe là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateColor))" />
                </MudItem>
                @*   <MudItem xs="4">
                <MudDatePicker @bind-Date="@vehicle_registration_start" Label="Ngày đăng ký" Required="true" RequiredError="Ngày đăng ký là bắt buộc" />
                </MudItem>
                <MudItem xs="4">
                <MudDatePicker Date="@vehicle_registration_end" Label="Ngày hết hạn đăng ký" Required="true" RequiredError="Ngày hết hạn đăng ký là bắt buộc" />
                </MudItem> *@
                <MudItem xs="4">
                    <MudNumericField Variant="Variant.Outlined" @bind-Value="newCar.price" Label="Giá xe" Placeholder="Nhập giá xe" Required="true" RequiredError="Giá xe là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidatePrice))" />
                </MudItem>
                <MudItem xs="4">
                    <MudSelect @bind-Value="newCar.type_id" Label="Loại xe" Required="true" Variant="Variant.Outlined">
                        @if (car_types != null)
                        {
                            @foreach (var role in car_types)
                            {
                                <MudSelectItem Value="role.id">@role.name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudSelect @bind-Value="newCar.brand_id" Label="Hãng xe" Required="true" Variant="Variant.Outlined">
                        @if (car_brands != null)
                        {
                            @foreach (var role in car_brands)
                            {
                                <MudSelectItem Value="role.id">@role.name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem> 
                <MudItem xs="4">
                    <MudSelect @bind-Value="newCar.is_auto"
                               Label="Loại hộp số"
                               Required="true"
                               RequiredError="Vui lòng chọn loại hộp số"
                               Variant="Variant.Outlined">
                        <MudSelectItem Value="@((byte)0)">Số sàn</MudSelectItem>
                        <MudSelectItem Value="@((byte)1)">Số tự động</MudSelectItem>
                    </MudSelect>
                </MudItem>
                @*    <MudItem xs="4">
                <MudDatePicker Date="@year_production" Label="Năm sản xuất" Required="true" RequiredError="Năm sản xuất là bắt buộc" PickerVariant="PickerVariant.Dialog" />
                </MudItem> *@
                <MudItem xs="4">
                    <MudNumericField Variant="Variant.Outlined" @bind-Value="newCar.odo" Label="Số km đã đi" Required="true" RequiredError="Số km đã đi là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateOdo))" />
                </MudItem>
                <MudItem xs="4">
                    <MudNumericField Variant="Variant.Outlined" @bind-Value="newCar.insurance_fee" Label="Phí bảo hiểm" Required="true" RequiredError="Phí bảo hiểm là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateBh))" />
                </MudItem>
                <MudItem xs="4">
                    <MudSelect Variant="Variant.Outlined" @bind-Value="newCar.status" Label="Trạng thái" Required="true" RequiredError="Trạng thái là bắt buộc">
                        @*  <MudSelectItem Value="@("1")">Có sẵn</MudSelectItem>
                        <MudSelectItem Value="@("2")">Đã thuê</MudSelectItem>
                        <MudSelectItem Value="@("3")">Bảo trì</MudSelectItem> *@
                        <MudSelectItem Value="@("1")">Đang hoạt động</MudSelectItem>
                        <MudSelectItem Value="@("2")">Ngưng hoạt động</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="newCar.description" Label="Mô tả" Placeholder="Nhập mô tả" Required="true" Lines=" 3 " RequiredError="Mô tả là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateDescription))" />
                </MudItem>

            </MudGrid>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="AddCar">Thêm xe</MudButton>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private car newCar = new car();
    private MudForm form;

    private DateTime? vehicle_registration_start;
    private DateTime? vehicle_registration_end;
    private DateTime? year_production;
    private List<dropdown> car_types = new List<dropdown>();
    private List<dropdown> car_brands = new List<dropdown>();

    private string typeUrl = "http://localhost:49922/api/Dropdown/car_type";
    private string brandUrl = "http://localhost:49922/api/Dropdown/car_brand";

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Quản lý xe", href: "/getcars", icon: @Icons.Material.Outlined.DirectionsCar),
        new BreadcrumbItem("Danh sách xe", href: "/getcars", icon: @Icons.Material.Outlined.List),
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadType();
        await LoadBrand();
    }

    private async Task ScanImage()
    {
        await JSRuntime.InvokeVoidAsync("readTextFromImage", "imageInput", "resultInput");
    }

    private async Task LoadType()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<dropdown>>(typeUrl);
            if (response != null)
            {
                car_types = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải danh sách vai trò: {ex.Message}", Severity.Error);
        }
    }
    private async Task LoadBrand()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<dropdown>>(brandUrl);
            if (response != null)
            {
                car_brands = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải danh sách vai trò: {ex.Message}", Severity.Error);
        }
    }
    private async Task AddCar()
    {
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                var response = await httpClient.PostAsJsonAsync("http://localhost:49922/api/Cars/PostCars", newCar);
                var content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Thêm xe thành công", Severity.Success);
                    newCar = new car(); // Reset form
                    newCar.brand_id = 1;
                    newCar.type_id = 1;
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Thêm xe thất bại. Lỗi: {content}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Lỗi: {ex.Message}", Severity.Error);
            }
        }
    }

    private IEnumerable<string> CarValidateCarNumber(string number)
    {
        if (string.IsNullOrWhiteSpace(number))
        {
            yield return "Vui lòng điền bảng số.";
        }
        else
        {
            var regex = new System.Text.RegularExpressions.Regex(@"^[A-Za-z]{2}-\d{5}$");
            if (!regex.IsMatch(number))
            {
                yield return "Biển số xe không hợp lệ. Định dạng phải là XX-12345.";
            }
        }
    }

    private IEnumerable<string> CarValidateCarName(string carname)
    {
        if (string.IsNullOrWhiteSpace(carname))
        {
            yield return "Vui lòng điền tên xe.";
        }
        else if (carname.Length < 5 || carname.Length > 100)
        {
            yield return "Tên xe không hợp lệ.";
        }
    }

    private IEnumerable<string> CarValidateColor(string color)
    {
        if (string.IsNullOrWhiteSpace(color))
        {
            yield return "Vui lòng điền màu xe.";
        }
        else if (color.Length > 20)
        {
            yield return "Màu xe không hợp lệ.";
        }
    }

    private IEnumerable<string> CarValidatePrice(string price)
    {
        if (string.IsNullOrWhiteSpace(price))
        {
            yield return "Vui lòng điền giá xe.";
        }
        else if (price.Length < 0)
        {
            yield return "giá xe không hợp lệ.";
        }
    }

    private IEnumerable<string> CarValidateOdo(string odo)
    {
        if (string.IsNullOrWhiteSpace(odo))
        {
            yield return "Vui lòng điền số km.";
        }
        else if (odo.Length < 0)
        {
            yield return "giá xe không hợp lệ.";
        }
    }
    private IEnumerable<string> CarValidateBh(string bh)
    {
        if (string.IsNullOrWhiteSpace(bh))
        {
            yield return "Vui lòng điền phí bảo hiểm.";
        }
        else if (bh.Length < 0)
        {
            yield return "Phí bảo hiểm không hợp lệ.";
        }
    }

    private IEnumerable<string> CarValidateDescription(string description)
    {
        if (string.IsNullOrWhiteSpace(description))
        {
            yield return "Vui lòng điền mô tả.";
        }
        else if (description.Length < 2 || description.Length > 250)
        {
            yield return "Mô tả không hợp lệ.";
        }
    }
}