@page "/addcar"
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject NavigationManager nv
@inject IJSRuntime js
<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255); /* Màu trắng với độ mờ 50% */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Đảm bảo overlay hiển thị trên các thành phần khác */
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudImage Src="/Image/404.jpg" Alt="NOT FOUND" Elevation="0" Fluid="true" />
        </MudItem>
    </div>
}


<MudContainer MaxWidth="MaxWidth.False" Class="mt-14 pa-0">
    <MudPaper Elevation="0" Class="mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
        <MudBreadcrumbs Class="pa-3" Items="_items"></MudBreadcrumbs>
    </MudPaper>
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h5" Class="mb-4">Thêm xe mới</MudText>
        <MudForm @ref="form">
            <MudGrid>

                <MudItem xs="12">

                </MudItem>
                <MudItem xs="4">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="newCar.car_number" Label="Biển số xe" Placeholder="Nhập biển số xe" Required="true" RequiredError="Biển số xe là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateCarNumber))" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="newCar.car_name" Label="Tên xe" Placeholder="Nhập tên xe" Required="true" RequiredError="Tên xe là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateCarName))" />
                </MudItem>
                <MudItem xs="4">
                    <MudSelect Variant="Variant.Outlined" @bind-Value="newCar.fuel" Placeholder="Nhập nhiên liệu" Label="Nhiên liệu" Required="true" RequiredError="Nhiên liệu là bắt buộc">
                        <MudSelectItem Value="1">Xăng RON 92 (E5)</MudSelectItem>
                        <MudSelectItem Value="2">RON 95-III</MudSelectItem>
                        <MudSelectItem Value="3">RON 95-IV</MudSelectItem>
                        <MudSelectItem Value="4">Diesel 0,05%S</MudSelectItem>
                        <MudSelectItem Value="5">Diesel 0,001%S (Diesel Euro 5)</MudSelectItem>
                        <MudSelectItem Value="6">Pin Lithium-ion (Li-ion)</MudSelectItem>
                        <MudSelectItem Value="7">Pin Lithium Iron Phosphate (LFP)</MudSelectItem>
                        <MudSelectItem Value="8">Pin thể rắn (Solid-State Battery)</MudSelectItem>
                        <MudSelectItem Value="9">Hybrid truyền thống (HEV)</MudSelectItem>
                        <MudSelectItem Value="10">Plug-in Hybrid (PHEV)</MudSelectItem>
                        <MudSelectItem Value="11">Pin CATL</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="newCar.color" Label="Màu xe"  Placeholder="Nhập màu xe" Required="true" RequiredError="Màu xe là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateColor))" />
                </MudItem>
                <MudItem xs="4">
                    <MudDatePicker @bind-Date="vehicle_registration_start" Variant="Variant.Outlined" Placeholder="Ngày đăng kiểm" Label="Ngày đăng kiểm" Required="true" RequiredError="Ngày đăng kiểm là bắt buộc" />
                </MudItem>
                <MudItem xs="4">
                    <MudDatePicker @bind-Date="vehicle_registration_end" Label="Ngày hết hạn đăng kiểm" Placeholder="Ngày hết hạn đăng kiểm" Variant="Variant.Outlined" Required="true" RequiredError="Ngày hết hạn đăng kiểm là bắt buộc" />
                </MudItem>
                <MudItem xs="4">
                    <MudNumericField Variant="Variant.Outlined" @bind-Value="newCar.price" Label="Giá xe" Placeholder="Nhập giá xe" Min="0" Step="1000" Required="true" RequiredError="Giá xe là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidatePrice))" />
                </MudItem>
                <MudItem xs="4">
                    <MudSelect @bind-Value="newCar.type_id" Label="Loại xe" Required="true" Variant="Variant.Outlined">
                        @if (car_types != null)
                        {
                            @foreach (var role in car_types)
                            {
                                <MudSelectItem Value="role.id">@role.name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudSelect @bind-Value="newCar.brand_id" Label="Hãng xe" Required="true" Variant="Variant.Outlined">
                        @if (car_brands != null)
                        {
                            @foreach (var role in car_brands)
                            {
                                <MudSelectItem Value="role.id">@role.name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="3">
                    <MudSelect @bind-Value="newCar.isAuto"
                               Label="Loại hộp số"
                               Required="true"
                               RequiredError="Vui lòng chọn loại hộp số"
                               Variant="Variant.Outlined">
                        <MudSelectItem Value="@((byte)0)">Số tự động</MudSelectItem>
                        <MudSelectItem Value="@((byte)1)">Số sàn</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="3">
                    <MudDatePicker @bind-Date="year_production" Label="Năm sản xuất" OpenTo="OpenTo.Year" FixMonth="@DateTime.Today.Month" FixDay="@DateTime.Today.Day" DateFormat="yyyy" Placeholder="Năm sản xuất" Variant="Variant.Outlined" Required="true" RequiredError="Năm sản xuất là bắt buộc" PickerVariant="PickerVariant.Dialog" />
                </MudItem>
                <MudItem xs="3">
                    <MudNumericField Variant="Variant.Outlined" @bind-Value="newCar.odo" Label="Số km đã đi" Placeholder="Số KM đã đi" Required="true" RequiredError="Số km đã đi là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateOdo))" />
                </MudItem>
                <MudItem xs="3">
                    <MudNumericField Variant="Variant.Outlined"
                                     @bind-Value="newCar.insurance_fee"
                                     Label="Phí bảo hiểm"
                                     Placeholder="Phí bảo hiểm"
                                     Required="true"
                                      Min="0" Step="1000"
                                     RequiredError="Phí bảo hiểm là bắt buộc"
                                     Validation="@(new Func<float, string>(ValidateInsuranceFee))"
                                     />
                </MudItem>
                <MudItem xs="3">
                    <MudSelect Variant="Variant.Outlined"
                               Value="newCar.is_retail"
                               ValueChanged="@(async (byte value) => await OnCarTypeChanged(value))"
                               Label="Loại xe"
                               Required="true"
                               Placeholder="Loại xe"
                               RequiredError="Loại xe là bắt buộc">
                        <MudSelectItem Value="@((byte)0)">Xe dịch vụ</MudSelectItem>
                        <MudSelectItem Value="@((byte)1)">Xe cho thuê</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="3">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="newCar.location_car" Label="Vị trí xe" Placeholder="Nhập vị trí xe" ReadOnly />
                </MudItem>
                <MudItem xs="3">
                    <MudNumericField Variant="Variant.Outlined"
                                     @bind-Value="newCar.voucher"
                                     Label="Voucher"
                                    Step="1000"
                                     Placeholder="Nhập giá trị voucher"
                                     Validation="@(new Func<float, string>(ValidateVoucher))"
                                     Min="0" />
                </MudItem>
                <MudItem xs="3">
                    <MudSelect T="int" @bind-Value="newCar.number_seat"
                               Label="Số ghế"
                               Required="true"
                               RequiredError="Số ghế là bắt buộc"
                               Variant="Variant.Outlined">
                        @foreach (var seatOption in availableSeatOptions)
                        {
                            <MudSelectItem Value="@seatOption">@seatOption chỗ</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="newCar.description" Label="Mô tả" Placeholder="Nhập mô tả" Required="true" Lines="3" RequiredError="Mô tả là bắt buộc" Validation="@(new Func<string, IEnumerable<string>>(CarValidateDescription))" />
                </MudItem>
            </MudGrid>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-4" OnClick="AddCar">Thêm xe</MudButton>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private car_create newCar = new car_create();
    private MudForm form;

    private DateTime? vehicle_registration_start;
    private DateTime? vehicle_registration_end;
    private DateTime? year_production;
    private List<dropdown> car_types = new List<dropdown>();
    private List<dropdown> car_brands = new List<dropdown>();
    private string userRole;
    private bool isInitialized = false;
    private bool isLoading = false;

    private List<int> availableSeatOptions = new List<int> { 4, 7, 16, 29, 44 };

    private async Task OnCarTypeChanged(byte value)
    {
        newCar.is_retail = value;
        if (value == 0)
        {
            availableSeatOptions = new List<int> { 16, 29, 44 };
        }
        else if (value == 1)
        {
            availableSeatOptions = new List<int> { 4, 7, 16, 29, 44 };
        }
        newCar.number_seat = availableSeatOptions.FirstOrDefault();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;

            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();

                    if (handler.CanReadToken(token))
                    {
                        var jwtToken = handler.ReadJwtToken(token);

                        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");

                        if (roleClaim != null)
                        {
                            userRole = roleClaim.Value;
                        }
                        else
                        {
                            Console.WriteLine("Role claim not found in the token.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi giải mã token: {ex.Message}");
                }
            }
            CheckRole();
            StateHasChanged();
        }
    }

    private void CheckRole()
    {
        if (userRole == "1")
        {
            Console.WriteLine("User is an Admin.");
        }
        else if (userRole == "2")
        {
            Console.WriteLine("User is a regular User.");
        }
        else if (userRole == "3")
        {
            Console.WriteLine("User is a regular Driver.");
        }
        else
        {
            isLoading = true;
        }
    }

    private string typeUrl = "http://localhost:49922/api/Dropdown/car_type";
    private string brandUrl = "http://localhost:49922/api/Dropdown/car_brand";

    private string ocrApiUrl = "https://api.ocr-service.com/v1/ocr"; // Địa chỉ API OCR của bạn
    private string ocrApiKey = "your-api-key-here";

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Quản lý xe", href: "/getcars", icon: @Icons.Material.Outlined.DirectionsCar),
        new BreadcrumbItem("Danh sách xe", href: "/getcars", icon: @Icons.Material.Outlined.List),
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadType();
        await LoadBrand();
    }

    private async Task LoadType()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<dropdown>>(typeUrl);
            if (response != null)
            {
                car_types = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải danh sách vai trò: {ex.Message}", Severity.Error);
        }
    }
    private async Task LoadBrand()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<dropdown>>(brandUrl);
            if (response != null)
            {
                car_brands = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải danh sách vai trò: {ex.Message}", Severity.Error);
        }
    }


    private async Task AddCar()
    {
        await form.Validate();
        if (vehicle_registration_start.HasValue && vehicle_registration_end.HasValue)
        {
            if (vehicle_registration_end.Value <= vehicle_registration_start.Value)
            {
                Snackbar.Add("Ngày hết hạn đăng kiểm phải sau ngày đăng kiểm", Severity.Error);
                return;
            }
        }
        if (year_production.HasValue && year_production.Value.Year > DateTime.Now.Year)
        {
            Snackbar.Add("Năm sản xuất không được lớn hơn năm hiện tại", Severity.Error);
            return;
        }
        if (year_production.HasValue)
        {
            newCar.year_production = year_production.Value;
        }
        if (vehicle_registration_start.HasValue)
        {
            newCar.vehicle_registration_start = vehicle_registration_start.Value;
        }
        if (vehicle_registration_end.HasValue)
        {
            newCar.vehicle_registration_end = vehicle_registration_end.Value;
        }

        if (form.IsValid)
        {
            try
            {
                var response = await httpClient.PostAsJsonAsync("http://localhost:49922/api/Cars/PostCars/", newCar);            
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    var addedCar = JsonSerializer.Deserialize<car>(content);

                    if (addedCar != null && addedCar.id > 0)
                    {
                        if ( newCar.number_seat > 0)
                        {
                            try
                            {
                                var seats = GenerateSeats(addedCar.id, newCar.number_seat);
                                if (seats.Any())
                                {
                                    var seatsResponse = await httpClient.PostAsJsonAsync("http://localhost:49922/api/Cars/PostCarSeat", seats);

                                    if (!seatsResponse.IsSuccessStatusCode)
                                    {
                                        var errorContent = await seatsResponse.Content.ReadAsStringAsync();
                                        Snackbar.Add($"Thêm xe thành công nhưng không thể tạo sơ đồ ghế: {errorContent}", Severity.Warning);
                                    }
                                    else
                                    {
                                        Snackbar.Add("Thêm xe và sơ đồ ghế thành công", Severity.Success);
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                Snackbar.Add($"Thêm xe thành công nhưng có lỗi khi tạo ghế: {ex.Message}", Severity.Warning);
                            }
                        }
                        else
                        {
                            Snackbar.Add("Thêm xe thành công", Severity.Success);
                            nv.NavigateTo("/getcars");
                        }
                        // newCar = new car_create();
                        // vehicle_registration_start = null;
                        // vehicle_registration_end = null;
                        // year_production = null;
                      
                        // StateHasChanged();
                    }
                    Snackbar.Add("Thêm xe thành công", Severity.Success);
                    nv.NavigateTo("/getcars");
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
                {
                    Snackbar.Add("Biển số xe này đã tồn tại. Vui lòng chọn biển số khác.", Severity.Error);
                    return;
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Thêm xe thất bại: {errorContent}", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Lỗi khi thêm xe: {ex.Message}", Severity.Error);
            }
        }
    }

    private List<car_seat> GenerateSeats(int carId, int seatCount)
    {
        var seats = new List<car_seat>();

        // Thêm ghế tài xế
        seats.Add(new car_seat
            {
                car_id = carId,
                name = "TÀI XẾ",
                row = 1,
                col = 1
            });

      
        return seats;
    }


    private string CleanAndValidateCarNumber(string rawText)
    {
        string cleanedText = System.Text.RegularExpressions.Regex.Replace(rawText, @"[^\w-]", "");

        var regex = new System.Text.RegularExpressions.Regex(@"^[A-Za-z]{2}-\d{5}$");
        return regex.IsMatch(cleanedText) ? cleanedText : null;
    }

    private IEnumerable<string> CarValidateCarNumber(string number)
    {
        if (string.IsNullOrWhiteSpace(number))
        {
            yield return "Vui lòng điền biển số.";
        }
        else
        {
            number = number.Trim();

            var regexPattern = @"^\d{2}[A-Z]-\d{3}\.\d{2}$";

            bool isValid = System.Text.RegularExpressions.Regex.IsMatch(number, regexPattern);

            if (!isValid)
            {
                yield return "Biển số xe không hợp lệ. Ví dụ đúng: 65A-666.66";
            }
        }
    }
    private IEnumerable<string> CarValidateCarName(string carname)
    {
        if (string.IsNullOrWhiteSpace(carname))
        {
            yield return "Vui lòng điền tên xe.";
        }
        else if (carname.Length < 5 || carname.Length > 100)
        {
            yield return "Tên xe không hợp lệ.";
        }
    }

    private IEnumerable<string> CarValidateColor(string color)
    {
        if (string.IsNullOrWhiteSpace(color))
        {
            yield return "Vui lòng điền màu xe.";
        }
        else if (color.Length > 20)
        {
            yield return "Màu xe không hợp lệ.";
        }
    }

    private IEnumerable<string> CarValidatePrice(string price)
    {
        if (string.IsNullOrWhiteSpace(price))
        {
            yield return "Vui lòng điền giá xe.";
        }
        else if (price.Length < 0)
        {
            yield return "giá xe không hợp lệ.";
        }
    }

    private string ValidateInsuranceFee(float insuranceFee)
    {
        if (insuranceFee < 0)
        {
            return "Phí bảo hiểm không thể là số âm";
        }
        if (newCar.price > 0 && insuranceFee > newCar.price)
        {
            return "Phí bảo hiểm không thể lớn hơn giá xe";
        }
        return null;
    }

    private string ValidateVoucher(float voucher)
    {
        if (voucher < 0)
        {
            return "Giá trị voucher không thể là số âm";
        }
        if (newCar.price > 0 && voucher > newCar.price)
        {
            return "Giá trị voucher không thể lớn hơn giá xe";
        }
        return null;
    }
    private IEnumerable<string> CarValidateOdo(string odo)
    {
        if (string.IsNullOrWhiteSpace(odo))
        {
            yield return "Vui lòng điền số km.";
        }
        else if (odo.Length < 0)
        {
            yield return "giá xe không hợp lệ.";
        }
    }
    private IEnumerable<string> CarValidateBh(string bh)
    {
        if (string.IsNullOrWhiteSpace(bh))
        {
            yield return "Vui lòng điền phí bảo hiểm.";
        }
        else if (bh.Length < 0)
        {
            yield return "Phí bảo hiểm không hợp lệ.";
        }
    }

    private IEnumerable<string> CarValidateDescription(string description)
    {
        if (string.IsNullOrWhiteSpace(description))
        {
            yield return "Vui lòng điền mô tả.";
        }
        else if (description.Length < 2 || description.Length > 250)
        {
            yield return "Mô tả không hợp lệ.";
        }
    }
}