@page "/"
@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager NavigationManager
@layout EmptyLayout

<MudContainer Class="mt-16 pa-0" MaxWidth="MaxWidth.False">
    <MudGrid Class="pa-0">
        <MudItem xs="3" Class="mx-auto">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Typo="Typo.h4" Color="Color.Primary" Class="fw-bold text-center">BOXCARS</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudCard Class="pl-1 pe-1" Style="border-radius: 8px;">
                            <MudText Typo="Typo.h5" Class="fw-bold text-center pt-5">Đăng nhập</MudText>
                            <MudCardContent>
                                <MudRadioGroup Class="d-flex flex-column align-items-center" @bind-SelectedOption="LoginRole">
                                    <MudRadio Option="@("admin")" Color="Color.Primary">Quản trị</MudRadio>
                                    <MudRadio Option="@("driver")" Color="Color.Secondary">Tài xế</MudRadio>
                                </MudRadioGroup>

                                <MudTextField Label="Email" Class="mt-3"
                                              Variant="Variant.Outlined"
                                              Placeholder="Email"
                                              @bind-Value="model.email" For="@(() => model.email)" />
                                <MudTextField Label="Mật khẩu" Class="mt-3"
                                              Variant="Variant.Outlined"
                                              Placeholder="Mật khẩu"
                                              @bind-Value="model.password"
                                              For="@(() => model.password)"
                                              InputType="@PasswordInput"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="@PasswordInputIcon"
                                              OnAdornmentClick="TogglePasswordVisibility"
                                              AdornmentAriaLabel="Show Password" />
                            </MudCardContent>
                            <MudCardActions Class="d-flex justify-content-center me-2 ml-2">
                                <MudButton
                                    ButtonType="ButtonType.Submit"
                                    Variant="Variant.Filled"
                                    Color="Color.Primary"
                                    Style="width: 100%; height: 48px; max-width: 400px;"
                                    Class="mb-5">
                                    Đăng nhập
                                </MudButton>
                            </MudCardActions>
                            @if (LoginFailed)
                            {
                                <MudAlert Severity="Severity.Error" Class="mt-2">Đăng nhập thất bại. Vui lòng kiểm tra lại thông tin.</MudAlert>
                            }
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private login model = new login();
    private bool LoginFailed;
    private string LoginRole = "admin"; 

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            HttpResponseMessage response;
            string apiUrl = LoginRole == "admin"
                ? "http://localhost:49922/api/Login/gentoken-admin"
                : "http://localhost:49922/api/Login/gentoken-driver";

            response = await Http.PostAsJsonAsync(apiUrl, model);

            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();
                await js.InvokeVoidAsync("localStorage.setItem", "authToken", token);
                NavigationManager.NavigateTo("/index", true);
            }
            else
            {
                LoginFailed = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
            LoginFailed = true;
        }
    }

    // Password visibility toggle methods remain the same
    private bool isShowPassword = false;
    private InputType PasswordInput => isShowPassword ? InputType.Text : InputType.Password;
    private string PasswordInputIcon => isShowPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    private void TogglePasswordVisibility()
    {
        isShowPassword = !isShowPassword;
    }
}