@page "/car-statistics"
@using FE_Admin.Data
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IJSRuntime js
@inject IDialogService DialogService

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255); /* Màu trắng với độ mờ 50% */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Đảm bảo overlay hiển thị trên các thành phần khác */
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudImage Src="/Image/404.jpg" Alt="NOT FOUND" Elevation="0" Fluid="true" />
        </MudItem>
    </div>
}

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <!-- GCD Statistics Card -->
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h6">Thống kê số lần được thuê theo tài xế</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (isLoadingGCD)
            {
                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
            }
            else
            {
                <MudTable Items="@gcdStatistics" Dense="true" Hover="true" Striped="true" Bordered="true"
                          Pagination="true" RowsPerPage="5" ServerData="@(new Func<TableState, Task<TableData<static_car>>>(ServerReloadGCD))"
                          @ref="gcdTable">
                    <HeaderContent>
                        <MudTh Style="text-align: center">Mã xe</MudTh>
                        <MudTh Style="text-align: center">Tên xe</MudTh>
                        <MudTh Style="text-align: center">Biển số xe</MudTh>
                        <MudTh Style="text-align: center">Chi tiết</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Mã xe" Style="text-align: center">@context.car_code</MudTd>
                        <MudTd DataLabel="Tên xe" Style="text-align: center">@context.car_name</MudTd>
                        <MudTd DataLabel="Biển số xe" Style="text-align: center">@context.car_number</MudTd>
                        <MudTd Style="text-align: center">
                            <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                           Color="Color.Primary"
                                           OnClick="@(() => ShowMonthlyGCDDetails(context.id, context.car_name, context.car_number))" />
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 5, 10, 20, 50 }" />
                    </PagerContent>
                </MudTable>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private bool isLoadingGCD = true;
    private List<static_car> gcdStatistics = new();
    private MudTable<static_car> gcdTable;
    private string userRole;
    private bool isInitialized = false;
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;

            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();

                    if (handler.CanReadToken(token))
                    {
                        var jwtToken = handler.ReadJwtToken(token);

                        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");

                        if (roleClaim != null)
                        {
                            userRole = roleClaim.Value;
                        }
                        else
                        {
                            Console.WriteLine("Role claim not found in the token.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi giải mã token: {ex.Message}");
                }
            }
            CheckRole();
            StateHasChanged();
        }
    }

    private void CheckRole()
    {
        if (userRole == "1")
        {
            Console.WriteLine("User is an Admin.");
        }
        else if (userRole == "2")
        {
            Console.WriteLine("User is a regular User.");
        }
        else if (userRole == "3")
        {
            Console.WriteLine("User is a regular Driver.");
        }
        else
        {
            isLoading = true;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadGCDStatistics();
    }

    private async Task<TableData<static_car>> ServerReloadGCD(TableState state)
    {
        await LoadGCDStatistics();

        // Apply pagination
        var totalItems = gcdStatistics.Count;
        var pagedData = gcdStatistics
            .Skip(state.Page * state.PageSize)
            .Take(state.PageSize)
            .ToList();

        return new TableData<static_car>
            {
                TotalItems = totalItems,
                Items = pagedData
            };
    }

    private async Task LoadGCDStatistics()
    {
        try
        {
            isLoadingGCD = true;
            var response = await Http.GetAsync("http://localhost:49922/api/StatisticsGuestCar/CarMonthly");
            if (response.IsSuccessStatusCode)
            {
                gcdStatistics = await response.Content.ReadFromJsonAsync<List<static_car>>() ?? new();
            }
            else
            {
                Snackbar.Add("Không thể tải dữ liệu thuê xe", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingGCD = false;
        }
    }

    private async Task ShowMonthlyGCDDetails(int carId, string carName, string carNumber)
    {
        var parameters = new DialogParameters
        {
            { "CarId", carId },
            { "CarName", carName },
            { "CarNumber", carNumber }
        };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true
            };

        var dialog = await DialogService.ShowAsync<DetailDialog>("Chi tiết theo tháng", parameters, options);
        await dialog.Result;
    }
}
