@page "/addemp"
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IJSRuntime js

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255); /* Màu trắng với độ mờ 50% */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Đảm bảo overlay hiển thị trên các thành phần khác */
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudImage Src="/Image/404.jpg" Alt="NOT FOUND" Elevation="0" Fluid="true" />
        </MudItem>
    </div>
}
else if (isLoadingProgress)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </MudItem>
    </div>
}
else
{
    <MudContainer MaxWidth="MaxWidth.False" Class="mt-14 pa-0">
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pa-3 mb-1" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                    <MudBreadcrumbs Class="pa-0" Items="_items"></MudBreadcrumbs>
                </MudPaper>
            </MudItem>

            <MudItem xs="12">
                <MudForm @ref="form">
                    <MudGrid>
                        <MudItem xs="12" md="8">
                            <MudPaper Class="equal-paper mud-elevation-12 p-4" Style="height:600px">
                                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">Thêm Nhân Viên</MudText>
                                <MudGrid>
                                    <!-- Personal Information -->
                                    <MudItem xs="12" sm="6">
                                        <MudTextField @bind-Value="newEmployee.fullname"
                                                      Label="Họ và tên"
                                                      Required="true"
                                                      RequiredError="Vui lòng nhập họ tên"
                                                      Variant="Variant.Outlined"
                                                      Validation="@(new Func<string, IEnumerable<string>>(EmployeeValidateFullName))"
                                                      Immediate="true"
                                                      Placeholder="Họ và tên" />
                                    </MudItem>

                                    <MudItem xs="12" sm="6">
                                        <MudTextField @bind-Value="newEmployee.email"
                                                      Label="Email"
                                                      Required="true"
                                                      RequiredError="Vui lòng nhập email"
                                                      Variant="Variant.Outlined"
                                                      Validation="@(new Func<string, Task<IEnumerable<string>>>(EmployeeValidateEmail))"
                                                      Immediate="true"
                                                      Placeholder="Email" />
                                    </MudItem>

                                    <MudItem xs="12" sm="6">
                                        <MudTextField @bind-Value="newEmployee.phone_number"
                                                      Label="Số điện thoại"
                                                      Required="true"
                                                      RequiredError="Vui lòng nhập số điện thoại"
                                                      Variant="Variant.Outlined"
                                                      Validation="@(new Func<string, Task<IEnumerable<string>>>(EmployeeValidatephone))"
                                                      Immediate="true"
                                                      Placeholder="Số điện thoại" />
                                    </MudItem>

                                    <MudItem xs="12" sm="6">
                                        <MudTextField @bind-Value="newEmployee.citizen_identity_number"
                                                      Label="Số CCCD"
                                                      Required="true"
                                                      RequiredError="Vui lòng nhập số CCCD"
                                                      Variant="Variant.Outlined"
                                                      Validation="@(new Func<string, Task<IEnumerable<string>>>(EmployeeValidateCCCD))"
                                                      Immediate="true"
                                                      Placeholder="Số CCCD" />
                                    </MudItem>

                                    <MudItem xs="12" sm="6">
                                        <MudDatePicker @bind-Date="birthdayDate"
                                                       Label="Ngày sinh"
                                                       Required="true"
                                                       RequiredError="Vui lòng chọn ngày sinh"
                                                       Variant="Variant.Outlined"
                                                       DateFormat="dd/MM/yyyy"
                                                       MaxDate="@DateTime.Now.AddYears(-18)"
                                                       MinDate="@DateTime.Now.AddYears(-65)"
                                                       Placeholder="Ngày Sinh" />
                                    </MudItem>

                                    <MudItem xs="12" sm="6">
                                        <MudTextField @bind-Value="newEmployee.password"
                                                      Label="Mật khẩu"
                                                      Required="true"
                                                      RequiredError="Vui lòng nhập mật khẩu"
                                                      Variant="Variant.Outlined"
                                                      InputType="@PasswordInput"
                                                      Adornment="Adornment.End"
                                                      AdornmentIcon="@PasswordInputIcon"
                                                      OnAdornmentClick="TogglePasswordVisibility"
                                                      Validation="@(new Func<string, IEnumerable<string>>(EmployeeValidatePassword))"
                                                      Immediate="true"
                                                      Placeholder="Mật khẩu" />
                                    </MudItem>

                                    <MudItem xs="12" sm="4">
                                        <MudSelect @bind-Value="newEmployee.status"
                                                   Label="Trạng thái"
                                                   Required="true"
                                                   RequiredError="Vui lòng chọn trạng thái"
                                                   Variant="Variant.Outlined"
                                                   Placeholder="Trạng thái">
                                            <MudSelectItem Value="true">
                                                <div class="d-flex align-center">
                                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Class="mr-2" />
                                                    Đang hoạt động
                                                </div>
                                            </MudSelectItem>
                                            <MudSelectItem Value="false">
                                                <div class="d-flex align-center">
                                                    <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" Class="mr-2" />
                                                    Ngưng hoạt động
                                                </div>
                                            </MudSelectItem>
                                        </MudSelect>
                                    </MudItem>

                                    <MudItem xs="12" sm="4">
                                        <MudSelect @bind-Value="newEmployee.gender"
                                                   Label="Giới tính"
                                                   Required="true"
                                                   RequiredError="Vui lòng chọn giới tính"
                                                   Variant="Variant.Outlined"
                                                   Placeholder="Giới tính">
                                            <MudSelectItem Value="true">Nam</MudSelectItem>
                                            <MudSelectItem Value="false">Nữ</MudSelectItem>
                                        </MudSelect>
                                    </MudItem>

                                    <MudItem xs="12" sm="4">
                                        <MudSelect @bind-Value="newEmployee.role_id"
                                                   Label="Vai trò"
                                                   Required="true"
                                                   RequiredError="Vui lòng chọn vai trò"
                                                   Variant="Variant.Outlined"
                                                   Placeholder="Vai trò">
                                            @if (roles != null)
                                            {
                                                @foreach (var role in roles)
                                                {
                                                    <MudSelectItem Value="@role.id">@role.name</MudSelectItem>
                                                }
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="4" sm="12">
                                        <MudPaper Elevation="0" Class="d-flex justify-space-between mt-4 float-end">
                                            <MudButton Variant="Variant.Filled"
                                                       StartIcon="@Icons.Material.Filled.Save"
                                                       Color="Color.Primary"
                                                       OnClick="AddEmp">
                                                <MudText>Lưu thông tin</MudText>
                                            </MudButton>
                                        </MudPaper>
                                    </MudItem>

                                </MudGrid>
                            </MudPaper>
                        </MudItem>

                        <!-- Image Upload Section -->
                        <MudItem xs="12" md="4">
                            <MudPaper Class="equal-paper mud-elevation-4 p-4">
                                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">Hình ảnh</MudText>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <InputFile id="empImageInput" OnChange="@LoadEmpImage" hidden accept=".jpg,.jpeg,.png" />
                                        <MudCard Elevation="0" Class="mb-4">
                                            @if (!string.IsNullOrEmpty(newEmployee.img_emp))
                                            {
                                                <MudCardMedia Image="@newEmployee.img_emp"
                                                              Height="200"
                                                              Class="rounded-lg" />
                                            }
                                            else
                                            {
                                                <MudCardMedia Class="d-flex justify-center align-center rounded-lg"
                                                              Style="height: 200px; background-color: #f5f5f5;">
                                                    <MudIcon Icon="@Icons.Material.Filled.PersonOutline"
                                                             Size="Size.Large"
                                                             Color="Color.Default" />
                                                </MudCardMedia>
                                            }
                                            <MudCardActions Class="pa-0 mt-2">
                                                <MudButton HtmlTag="label"
                                                           For="empImageInput"
                                                           Variant="Variant.Filled"
                                                           Color="Color.Primary"
                                                           StartIcon="@Icons.Material.Filled.CloudUpload"
                                                           FullWidth="true">
                                                    Tải lên ảnh đại diện
                                                </MudButton>
                                            </MudCardActions>
                                            @if (isLoadingIMG1)
                                            {
                                                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-5" />
                                            }
                                        </MudCard>
                                        <InputFile id="empIdentityImageInput" OnChange="@LoadEmpImage1" hidden accept=".jpg,.jpeg,.png" />
                                        <MudCard Elevation="0">
                                            @if (!string.IsNullOrEmpty(newEmployee.citizen_identity_img))
                                            {
                                                <MudCardMedia Image="@newEmployee.citizen_identity_img"
                                                              Height="200"
                                                              Class="rounded-lg" />
                                            }
                                            else
                                            {
                                                <MudCardMedia Class="d-flex justify-center align-center rounded-lg"
                                                              Style="height: 200px; background-color: #f5f5f5;">
                                                    <MudIcon Icon="@Icons.Material.Filled.Badge"
                                                             Size="Size.Large"
                                                             Color="Color.Default" />
                                                </MudCardMedia>
                                            }
                                            <MudCardActions Class="pa-0 mt-2">
                                                <MudButton HtmlTag="label"
                                                           For="empIdentityImageInput"
                                                           Variant="Variant.Filled"
                                                           Color="Color.Secondary"
                                                           StartIcon="@Icons.Material.Filled.CloudUpload"
                                                           FullWidth="true">
                                                    Tải lên ảnh CCCD
                                                </MudButton>
                                            </MudCardActions>
                                            @if (isLoadingIMG)
                                            {
                                                <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-5" />
                                            }
                                        </MudCard>
                                    </MudItem>
                                </MudGrid>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

<script>
    // Lấy token từ localStorage
    function getAuthToken() {
        return localStorage.getItem("authToken");
    }
</script>

@code {
    private IBrowserFile selectedFile;
    private employees_create newEmployee = new employees_create();
    private MudForm form;
    private DateTime? birthdayDate;
    private string url = "http://localhost:49922/api/Employees";
    private string roleUrl = "http://localhost:49922/api/Roles";
    private string imagePreviewUrl;
    private bool isFormValid;
    private bool showSuccess;
    private bool showError;
    // private bool isLoading;
    private string userRole;
    private bool isInitialized = false;
    private bool isLoading = false;
    private bool isLoadingProgress = true;
    private bool isLoadingIMG = false;
    private bool isLoadingIMG1 = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;

            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();

                    if (handler.CanReadToken(token))
                    {
                        var jwtToken = handler.ReadJwtToken(token);

                        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");

                        if (roleClaim != null)
                        {
                            userRole = roleClaim.Value;
                        }
                        else
                        {
                            Console.WriteLine("Role claim not found in the token.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi giải mã token: {ex.Message}");
                }
            }
            CheckRole();
            isLoadingProgress = false;
            StateHasChanged();
        }
    }

    private void CheckRole()
    {
        if (userRole == "1")
        {
            Console.WriteLine("User is an Admin.");
        }
        else if (userRole == "2")
        {
            Console.WriteLine("User is a regular User.");
        }
        else if (userRole == "3")
        {
            Console.WriteLine("User is a regular Driver.");
        }
        else
        {
            isLoading = true;
        }
    }

    private List<roles> roles = new List<roles>();

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Nhân viên", href: "/getemp", icon: @Icons.Material.Outlined.PersonOutline),
        new BreadcrumbItem("Danh sách nhân viên", href: "/getemp", icon: @Icons.Material.Outlined.List),
        new BreadcrumbItem("Thêm mới", href: "/addemp", icon: @Icons.Material.Filled.AddCircleOutline),
    };

    private bool isShowPassword = false;
    private InputType PasswordInput => isShowPassword ? InputType.Text : InputType.Password;
    private string PasswordInputIcon => isShowPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        isShowPassword = !isShowPassword;
    }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    imagePreviewUrl = $"data:image/{file.ContentType};base64,{base64Data}";
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi xử lý file: {ex.Message}", Severity.Error);
        }
    }

    protected override async void OnInitialized()
    {
        var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");
        await LoadRoles();
        newEmployee = new employees_create { };
        birthdayDate = DateTime.Now.AddYears(-18);
    }

    private async Task LoadRoles()
    {
        var response = await httpClient.GetFromJsonAsync<List<roles>>(roleUrl);
        if (response != null)
        {
            roles = response;
        }
    }

    private async Task<string> GetBase64Image(IBrowserFile file)
    {
        try
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            return Convert.ToBase64String(memoryStream.ToArray());
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi xử lý hình ảnh: {ex.Message}", Severity.Error);
            return null;
        }
    }
    private async Task<IEnumerable<string>> EmployeeValidateCCCD(string citizenIdentityNumber)
    {
        if (string.IsNullOrWhiteSpace(citizenIdentityNumber))
        {
            return new List<string> { "Vui lòng điền CCCD." };
        }
        if (citizenIdentityNumber.Length != 12)
        {
            return new List<string> { "Số CCCD phải có 12 ký tự." };
        }
        if (!citizenIdentityNumber.All(char.IsDigit))
        {
            return new List<string> { "Số CCCD phải chỉ chứa các chữ số." };
        }
        return Enumerable.Empty<string>();
    }

    private async Task<IEnumerable<string>> EmployeeValidatephone(string citizenIdentityNumber)
    {
        if (string.IsNullOrWhiteSpace(citizenIdentityNumber))
        {
            return new List<string> { "Vui lòng điền Số điện thoại." };
        }
        if (citizenIdentityNumber.Length != 10)
        {
            return new List<string> { "Số số điện thoại phải có 10 ký tự." };
        }
        return Enumerable.Empty<string>();
    }

    private IEnumerable<string> EmployeeValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
        {
            yield return "Vui lòng điền mật khẩu.";
        }
        else if (password.Length < 8 || password.Length > 15)
        {
            yield return "Mật khẩu không hợp lệ.";
        }
        else if (!password.Any(char.IsUpper) || !password.Any(char.IsLower) ||
                 !password.Any(char.IsDigit) || !password.Any(ch => "!@#$%^&*()_+[]{}|;':\",.<>?/`~".Contains(ch)))
        {
            yield return "Mật khẩu phải chứa ít nhất một chữ hoa, một chữ thường, một số và một ký tự đặc biệt.";
        }
    }

    private IEnumerable<string> EmployeeValidateFullName(string fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName))
        {
            yield return "Vui lòng điền họ và tên.";
        }
        else if (fullName.Length < 5 || fullName.Length > 150)
        {
            yield return "Họ và tên không hợp lệ.";
        }
        else if (fullName.Any(ch => !char.IsLetter(ch) && !char.IsWhiteSpace(ch)))
        {
            yield return "Họ và tên không được chứa ký tự đặc biệt.";
        }
    }


    private IEnumerable<string> EmployeeValidateRoleID(string roleId)
    {
        if (string.IsNullOrWhiteSpace(roleId))
        {
            yield return "Vui lòng điền ID vai trò.";
        }
        else if (!int.TryParse(roleId, out _))
        {
            yield return "ID vai trò không hợp lệ .";
        }
    }

    private IEnumerable<string> EmployeeValidateGender(string gender)
    {
        if (string.IsNullOrWhiteSpace(gender))
        {
            yield return "Vui lòng chọn giới tính.";
        }
    }
    private async Task LoadEmpImage(InputFileChangeEventArgs e)
    {
        try
        {
            isLoadingIMG1 = true;
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"emp_images_avt/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);
                    newEmployee.img_emp = imageUrl;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi tải lên hình ảnh: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingIMG1 = false;
        }
    }

    private async Task LoadEmpImage1(InputFileChangeEventArgs e)
    {
        try
        {
            isLoadingIMG = true;
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"emp_images_cccd/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);
                    newEmployee.citizen_identity_img = imageUrl;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi tải lên hình ảnh: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingIMG = false;
        }
    }

    private async Task AddEmp()
    {
        try
        {
            if (birthdayDate.HasValue)
            {
                newEmployee.birthday = birthdayDate.Value;
            }

            if (form.IsValid)
            {
                var response = await httpClient.PostAsJsonAsync(url, newEmployee);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Thêm nhân viên thành công", Severity.Success);
                    Navigation.NavigateTo("/getemp");
                }
                else
                {
                    Snackbar.Add("Có lỗi xảy ra khi thêm nhân viên", Severity.Error);
                    Console.WriteLine($"Error: {response.StatusCode}");
                }
            }
            else
            {
                Snackbar.Add("Form không hợp lệ. Vui lòng kiểm tra lại các trường.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi: {ex.Message}", Severity.Error);
            Console.WriteLine(ex.Message);
        }
        finally
        {
        }
    }


    private async Task<IEnumerable<string>> EmployeeValidateEmail(string email)
    {
        if (string.IsNullOrEmpty(email))
        {
            return new string[] { "Email không được để trống." };
        }
        // if (!new EmailAddressValidator().IsValid(email))
        // {
        //     return new string[] { "Email không hợp lệ." };
        // }
        return Array.Empty<string>();
    }
}
