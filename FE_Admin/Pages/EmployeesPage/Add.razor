@page "/addemp"
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IJSRuntime js

<MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
    <MudGrid Class="pa-0">
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-3" Items="_items"></MudBreadcrumbs>
            </MudPaper>
        </MudItem>

        <MudGrid xs="12">
               <MudItem xs="12" md="8">
            <MudPaper Class="mud-paper mud-elevation-4 p-8" Style="margin-right: 16px; padding: 30px">
                <MudText Typo="Typo.h6" Class="mb-5">Thêm Nhân Viên</MudText>

                <MudForm @ref="form">
                    <MudGrid Gutter="true">
                       
                        @*  <MudItem xs="6" Class="mb-4">
                        <InputFile id="licenseInput3" OnChange="HandleFileSelected" accept="image/*" style="display: none;" />
                        @if (!string.IsNullOrEmpty(imagePreviewUrl1))
                        {
                        <MudImage Fluid="false" Src="@imagePreviewUrl1" Class="rounded-lg mb-2 w-100 mx-auto d-block" Height="280" />
                        }
                        <MudButton HtmlTag="label" For="licenseInput3" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Secondary"
                        StartIcon="@Icons.Material.Outlined.CloudUpload"
                        FullWidth="true" Class="mud-button-small-text">
                        Căn cước công dân
                        </MudButton>
                        </MudItem> *@
                        <MudItem xs="4">
                            <MudTextField Label="Mã nhân viên" @bind-Value="newEmployee.emp_code" Placeholder="Mã Nhân Viên"
                                          Variant="Variant.Outlined" Required="true" ReadOnly="true"
                                          LabelStyle="font-weight: 600; color: #1976d2;" />
                        </MudItem>

                            <MudItem xs="4">
                                <MudTextField Label="Họ và tên" @bind-Value="newEmployee.fullname" Placeholder="Họ và tên"
                                              Variant="Variant.Outlined" Required="true"
                                              Validation="@(new Func<string, Task<IEnumerable<string>>>(EmployeeValidateFullName))"
                                              LabelStyle="font-weight: 600; color: #1976d2;" />
                            </MudItem>


                        <MudItem xs="4" Class="mb-4">
                            <MudTextField Label="Email" @bind-Value="newEmployee.email" Placeholder="Email"
                                          Variant="Variant.Outlined" Required="true"
                                          Validation="@(new Func<string, Task<IEnumerable<string>>>(EmployeeValidateEmail))"
                                          LabelStyle="font-weight: 600; color: #1976d2;" />
                        </MudItem>
                        <MudItem xs="4" Class="mb-4">
                            <MudTextField Label="Số điện thoại" @bind-Value="newEmployee.phone_number" Placeholder="Số điện thoại "
                                          Variant="Variant.Outlined" Required="true"
                                              Validation="@(new Func<string, Task<IEnumerable<string>>>(EmployeeValidatephone))"
                                          LabelStyle="font-weight: 600; color: #1976d2;" />
                        </MudItem>
                            <MudItem xs="4" Class="mb-4">
                                <MudTextField Label="Số CCCD" @bind-Value="newEmployee.citizen_identity_number"
                                              Placeholder="Số CCCD" Variant="Variant.Outlined" Required="true"
                                              Validation="@(new Func<string, Task<IEnumerable<string>>>(EmployeeValidateCCCD))"
                                              LabelStyle="font-weight: 600; color: #1976d2;" />
                            </MudItem>


                        <MudItem xs="4" Class="mb-4">
                            <MudDatePicker @bind-Date="birthdayDate" Label="Ngày sinh" Required="true"
                                           Placeholder="Ngày Sinh" Variant="Variant.Outlined"
                                           LabelStyle="font-weight: 600; color: #1976d2;" />
                        </MudItem>

                        <MudItem xs="3" Class="mb-4">
                            <MudTextField Label="Mật khẩu"
                                          @bind-Value="newEmployee.password"
                                          Placeholder="Mật Khẩu"
                                          Variant="Variant.Outlined"
                                          Required="true"
                                          InputType="@PasswordInput"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@PasswordInputIcon"
                                          OnAdornmentClick="TogglePasswordVisibility"
                                          AdornmentAriaLabel="Show Password"
                                          Validation="@(new Func<string, IEnumerable<string>>(EmployeeValidatePassword))"
                                          LabelStyle="font-weight: 600; color: #1976d2;" />
                        </MudItem>



                        <MudItem xs="3" Class="mb-4">
                            <MudSelect @bind-Value="newEmployee.status" Label="Trạng thái" Required="true"
                                       Placeholder="Trạng Thái" Variant="Variant.Outlined"
                                       LabelStyle="font-weight: 600; color: #1976d2;">
                                <MudSelectItem Value="true">Đang hoạt động</MudSelectItem>
                                <MudSelectItem Value="false">Ngưng hoạt động</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="3" Class="mb-4">
                            <MudSelect Label="Giới tính" @bind-Value="newEmployee.gender" Placeholder="Giới Tính"
                                       Variant="Variant.Outlined" Required="true"
                                       Validation="@(new Func<string, IEnumerable<string>>(EmployeeValidateGender))"
                                       LabelStyle="font-weight: 600; color: #1976d2;">
                                <MudSelectItem Value="true">Nam</MudSelectItem>
                                <MudSelectItem Value="false">Nữ</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="3">
                            <MudSelect @bind-Value="newEmployee.role_id" Label="Vai trò" Required="true" Variant="Variant.Outlined">
                                @if (roles != null)
                                {
                                    @foreach (var role in roles)
                                    {
                                        <MudSelectItem Value="role.id">@role.name</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudForm>

            </MudPaper>

            </MudItem>
            <MudItem xs="12" md="4">
                    <MudPaper Elevation="3" Class="pa-4">
                    <MudItem xs="12" Class="mb-4">
                        <InputFile id="licenseInput2" OnChange="HandleFileSelected" accept="image/*" style="display: none;" />
                        @if (!string.IsNullOrEmpty(imagePreviewUrl))
                        {
                            <MudImage Fluid="false" Src="@imagePreviewUrl" Class="rounded-lg mb-2 w-100 mx-auto d-block" Height="280" />
                        }
                        <MudButton HtmlTag="label" For="licenseInput2" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Secondary"
                                   StartIcon="@Icons.Material.Outlined.CloudUpload"
                                   FullWidth="true" Class="mud-button-small-text">
                            Ảnh đại diện
                        </MudButton>
                    </MudItem>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-end">
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save"
                           Color="Color.Primary" OnClick="AddEmployee" Class="mt-3">Lưu</MudButton>
            </MudItem>
        </MudGrid>
    </MudGrid>
</MudContainer>


<script>
    // Lấy token từ localStorage
    function getAuthToken() {
        return localStorage.getItem("authToken");
    }
</script>


@code {
    private IBrowserFile selectedFile;
    private IBrowserFile selectedFile1;
    private employees newEmployee = new employees();
    private MudForm form;
    private DateTime? birthdayDate;
    private string url = "http://localhost:49922/api/Employees";
    private string roleUrl = "http://localhost:49922/api/Roles";
    private string imagePreviewUrl;
    private string imagePreviewUrl1;
    private int empId;
    private List<roles> roles = new List<roles>();



    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Nhân viên", href: "/getemp", icon: @Icons.Material.Outlined.PersonOutline),
        new BreadcrumbItem("Danh sách nhân viên", href: "/getemp", icon: @Icons.Material.Outlined.List),
        new BreadcrumbItem("Thêm mới", href: "/addemp", icon: @Icons.Material.Filled.AddCircleOutline),
    };
    private bool isShowPassword = false;
    private InputType PasswordInput => isShowPassword ? InputType.Text : InputType.Password;
    private string PasswordInputIcon => isShowPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        isShowPassword = !isShowPassword;
    }

    protected override async void OnInitialized()
    {
        var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");
        await LoadRoles();
        newEmployee = new employees { };
        birthdayDate = DateTime.Now.AddYears(-18);
    }


    private async Task AddEmployee()
    {
        try
        {
            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                // Giải mã token
                var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                var jwtToken = handler.ReadJwtToken(token);

                var usernameClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "emp_id");

                if (usernameClaim != null)
                {
                    empId = int.Parse(usernameClaim.Value);
                }
            }

            // var citizenIdentityValidation = EmployeeValidateCitizenIdentity(newEmployee.citizen_identity_number, newEmployee.citizen_identity_img);
            // if (citizenIdentityValidation.Any())
            // {
            //     foreach (var error in citizenIdentityValidation)
            //     {
            //         Snackbar.Add(error, Severity.Warning);
            //     }
            //     return;
            // }

            if (birthdayDate.HasValue)
            {
                newEmployee.birthday = birthdayDate.Value;
            }
            else
            {
                Snackbar.Add("Vui lòng chọn ngày sinh", Severity.Warning);
                return;
            }
            if (selectedFile != null && selectedFile1 != null)
            {
                try
                {
                    var base64Data = await GetBase64Image(selectedFile);
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", selectedFile.Name, base64Data);
                    var imageUrl2 = await js.InvokeAsync<string>("uploadImage2", selectedFile1.Name, base64Data);
                    newEmployee.img_emp = imageUrl;
                    newEmployee.citizen_identity_img = imageUrl2;

                    var response = await httpClient.PostAsJsonAsync(url, newEmployee);
                    if (response.IsSuccessStatusCode)
                    {
                        Snackbar.Add("Thêm nhân viên thành công!", Severity.Success);
                        Navigation.NavigateTo("/getemp");
                    }
                    else
                    {
                        var errorMsg = await response.Content.ReadAsStringAsync();
                        Snackbar.Add($"Lỗi: {errorMsg}", Severity.Error);
                    }
                }
                catch (Exception ex)
                {
                    Snackbar.Add("Thêm thất bại: " + ex.Message, Severity.Error);
                }
            }
            else
            {
                try
                {
                    var response = await httpClient.PostAsJsonAsync(url, newEmployee);
                    if (response.IsSuccessStatusCode)
                    {
                        newEmployee = new employees();
                        imagePreviewUrl = null;
                        imagePreviewUrl1 = null;
                        Snackbar.Add("Thêm thành công!", Severity.Success);
                    }
                    else
                    {
                        Snackbar.Add("Lỗi khi thêm", Severity.Warning);
                    }
                }
                catch (Exception ex)
                {
                    Snackbar.Add("Thêm thất bại: " + ex.Message, Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        if (selectedFile != null)
        {
            var stream = selectedFile.OpenReadStream();
            var buffer = new byte[selectedFile.Size];
            await stream.ReadAsync(buffer, 0, buffer.Length);
            stream.Close();

            imagePreviewUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
        }
        else
        {
            Console.WriteLine("No file selected.");
        }
    }

    private async Task<string> GetBase64Image(IBrowserFile file)
    {
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        return Convert.ToBase64String(buffer);
    }


    private async Task<bool> IsEmailExists(string email)
    {
        var response = await httpClient.GetAsync($"{url}/exists?email={email}");
        return response.IsSuccessStatusCode && bool.Parse(await response.Content.ReadAsStringAsync());
    }

    private async Task<IEnumerable<string>> EmployeeValidateEmail(string email)
    {
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(email))
        {
            errors.Add("Vui lòng điền email.");
        }
        else if (email.Length < 20 || email.Length > 150)
        {
            errors.Add("Email không hợp lệ.");
        }
        else
        {
            if (await IsEmailExists(email))
            {
                errors.Add("Email đã tồn tại trong cơ sở dữ liệu.");
            }
        }

        return errors;
    }

    private IEnumerable<string> EmployeeValidateEmpCode(string empCode)
    {
        if (string.IsNullOrWhiteSpace(empCode))
        {
            yield return "Vui lòng điền mã nhân viên.";
        }
    }
    private async Task<IEnumerable<string>> EmployeeValidateCCCD(string citizenIdentityNumber)
    {
        if (string.IsNullOrWhiteSpace(citizenIdentityNumber))
        {
            return new List<string> { "Vui lòng điền CCCD." };
        }    
        if (citizenIdentityNumber.Length != 12)
        {
            return new List<string> { "Số CCCD phải có 12 ký tự." };
        }  
        if (!citizenIdentityNumber.All(char.IsDigit))
        {
            return new List<string> { "Số CCCD phải chỉ chứa các chữ số." };
        }
        return Enumerable.Empty<string>();
    }

    private async Task<IEnumerable<string>> EmployeeValidatephone(string citizenIdentityNumber)
    {
        if (string.IsNullOrWhiteSpace(citizenIdentityNumber))
        {
            return new List<string> { "Vui lòng điền Số điện thoại." };
        }
        if (citizenIdentityNumber.Length != 12)
        {
            return new List<string> { "Số số điện thoại phải có 10 ký tự." };
        }
        return Enumerable.Empty<string>();
    }

    private IEnumerable<string> EmployeeValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
        {
            yield return "Vui lòng điền mật khẩu.";
        }
        else if (password.Length < 8 || password.Length > 15)
        {
            yield return "Mật khẩu không hợp lệ.";
        }
        else if (!password.Any(char.IsUpper) || !password.Any(char.IsLower) ||
                 !password.Any(char.IsDigit) || !password.Any(ch => "!@#$%^&*()_+[]{}|;':\",.<>?/`~".Contains(ch)))
        {
            yield return "Mật khẩu phải chứa ít nhất một chữ hoa, một chữ thường, một số và một ký tự đặc biệt.";
        }
    }

    private async Task<IEnumerable<string>> EmployeeValidateFullName(string fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName))
        {
            return new List<string> { "Vui lòng điền họ và tên." };
        }
        else if (fullName.Length < 5 || fullName.Length > 150)
        {
            return new List<string> { "Họ và tên không hợp lệ." };
        }
        else if (fullName.Any(ch => !char.IsLetter(ch) && !char.IsWhiteSpace(ch)))
        {
            return new List<string> { "Họ và tên không được chứa ký tự đặc biệt." };
        }
        return Enumerable.Empty<string>();
    }


    private IEnumerable<string> EmployeeValidateRoleID(string roleId)
    {
        if (string.IsNullOrWhiteSpace(roleId))
        {
            yield return "Vui lòng điền ID vai trò.";
        }
        else if (!int.TryParse(roleId, out _))
        {
            yield return "ID vai trò không hợp lệ .";
        }
    }

    private IEnumerable<string> EmployeeValidateGender(string gender)
    {
        if (string.IsNullOrWhiteSpace(gender))
        {
            yield return "Vui lòng chọn giới tính.";
        }
    }

    private async Task LoadRoles()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<roles>>(roleUrl);
            if (response != null)
            {
                roles = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải danh sách vai trò: {ex.Message}", Severity.Error);
        }
    }

}
