@page "/addemp"
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IJSRuntime js

<MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
    <MudGrid Class="pa-0">
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-3" Items="_items"></MudBreadcrumbs>
            </MudPaper>
        </MudItem>

        <MudGrid xs="10" Class="mx-auto">
            <MudPaper Class="mud-paper mud-elevation-4 p-8" Style="margin-right: 16px; padding: 30px">
                <MudText Typo="Typo.h6" Class="mb-5">Thêm Nhân Viên</MudText>

                <MudForm @ref="form">
                    <MudGrid Gutter="true">
                        <MudItem xs="6" Class="mb-4">
                            <InputFile id="empImageInput" OnChange="@LoadEmpImage" hidden accept=".jpg,.jpeg,.png" />
                            <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload" for="empImageInput"
                                       FullWidth="true" Class="mb-3">
                                Chọn hình ảnh nhân viên
                            </MudButton>
                            @if (!string.IsNullOrEmpty(newEmployee.img_emp))
                            {
                                <MudImage Src="@newEmployee.img_emp" Alt="Hình ảnh nhân viên" Width="100"
                                          Height="100" ObjectFit="ObjectFit.Cover" Class="mb-3" />
                            }
                        </MudItem>

                        <MudItem xs="6" Class="mb-4">
                            <InputFile id="empIdentityImageInput" OnChange="@LoadEmpImage1" hidden accept=".jpg,.jpeg,.png" />
                            <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload" for="empIdentityImageInput"
                                       FullWidth="true" Class="mb-3">
                                Chọn hình ảnh CMND
                            </MudButton>
                            @if (!string.IsNullOrEmpty(newEmployee.citizen_identity_img))
                            {
                                <MudImage Src="@newEmployee.citizen_identity_img" Alt="Hình ảnh CMND" Width="100"
                                          Height="100" ObjectFit="ObjectFit.Cover" Class="mb-3" />
                            }
                        </MudItem>


                   

                        <MudItem xs="6" Class="mb-4">
                            <MudTextField Label="Họ và tên" @bind-Value="newEmployee.fullname" Placeholder="Họ Và Tên"
                                          Variant="Variant.Outlined" Required="true"
                                          Validation="@(new Func<string, IEnumerable<string>>(EmployeeValidateFullName))"
                                          LabelStyle="font-weight: 600; color: #1976d2;" />
                        </MudItem>

                        <MudItem xs="6" Class="mb-4">
                            <MudTextField Label="Email" @bind-Value="newEmployee.email" Placeholder="Email"
                                          Variant="Variant.Outlined" Required="true"
                                          Validation="@(new Func<string, Task<IEnumerable<string>>>(EmployeeValidateEmail))"
                                          LabelStyle="font-weight: 600; color: #1976d2;" />
                        </MudItem>
                        <MudItem xs="6" Class="mb-4">
                            <MudTextField Label="Số điện thoại" @bind-Value="newEmployee.phone_number" Placeholder="Số điện thoại"
                                          Variant="Variant.Outlined" Required="true"
                                          LabelStyle="font-weight: 600; color: #1976d2;" />
                        </MudItem>
                        <MudItem xs="6" Class="mb-4">
                            <MudTextField Label="Số CMND" @bind-Value="newEmployee.citizen_identity_number"
                                          Placeholder="Số CMND" Variant="Variant.Outlined"
                                          LabelStyle="font-weight: 600; color: #1976d2;" />
                        </MudItem>

                        <MudItem xs="6" Class="mb-4">
                            <MudDatePicker @bind-Date="birthdayDate" Label="Ngày sinh" For="@(() => newEmployee.birthday)" Required="true"
                                           Placeholder="Ngày Sinh" Variant="Variant.Outlined" DateFormat="dd/MM/yyyy"
                                           MaxDate="@DateTime.Now.AddYears(-18)"
                                           LabelStyle="font-weight: 600; color: #1976d2;" />
                        </MudItem>

                        <MudItem xs="6" Class="mb-4">
                            <MudTextField Label="Mật khẩu"
                                          @bind-Value="newEmployee.password"
                                          Placeholder="Mật Khẩu"
                                          Variant="Variant.Outlined"
                                          Required="true"
                                          InputType="@PasswordInput"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@PasswordInputIcon"
                                          OnAdornmentClick="TogglePasswordVisibility"
                                          AdornmentAriaLabel="Show Password"
                                          Validation="@(new Func<string, IEnumerable<string>>(EmployeeValidatePassword))"
                                          LabelStyle="font-weight: 600; color: #1976d2;" />
                        </MudItem>

                        <MudItem xs="4" Class="mb-4">
                            <MudSelect @bind-Value="newEmployee.status" Label="Trạng thái" Required="true"
                                       Placeholder="Trạng Thái" Variant="Variant.Outlined"
                                       LabelStyle="font-weight: 600; color: #1976d2;">
                                <MudSelectItem Value="true">Đang hoạt động</MudSelectItem>
                                <MudSelectItem Value="false">Ngưng hoạt động</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="4" Class="mb-4">
                            <MudSelect Label="Giới tính" @bind-Value="newEmployee.gender" Placeholder="Giới Tính"
                                       Variant="Variant.Outlined" Required="true"
                                       Validation="@(new Func<string, IEnumerable<string>>(EmployeeValidateGender))"
                                       LabelStyle="font-weight: 600; color: #1976d2;">
                                <MudSelectItem Value="true">Nam</MudSelectItem>
                                <MudSelectItem Value="false">Nữ</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="4">
                            <MudSelect @bind-Value="newEmployee.role_id" Label="Vai trò" Required="true" Variant="Variant.Outlined">
                                @if (roles != null)
                                {
                                    @foreach (var role in roles)
                                    {
                                        <MudSelectItem Value="role.id">@role.name</MudSelectItem>
                                    }
                                }
                            </MudSelect>
                        </MudItem>

                        <MudItem xs="12" Class="d-flex justify-end">
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save"
                                       Color="Color.Primary" OnClick="AddEmp" Class="mt-3">Lưu</MudButton>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudPaper>
        </MudGrid>
    </MudGrid>
</MudContainer>

<script>
    // Lấy token từ localStorage
    function getAuthToken() {
        return localStorage.getItem("authToken");
    }
</script>

@code {
    private IBrowserFile selectedFile;
    private employees_create newEmployee = new employees_create();
    private MudForm form;
    private DateTime? birthdayDate;
    private string url = "http://localhost:49922/api/Employees";
    private string roleUrl = "http://localhost:49922/api/Roles";
    private string imagePreviewUrl;
    private bool isFormValid;
    private bool showSuccess;
    private bool showError;
    private bool isLoading;
    private List<roles> roles = new List<roles>();

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Nhân viên", href: "/getemp", icon: @Icons.Material.Outlined.PersonOutline),
        new BreadcrumbItem("Danh sách nhân viên", href: "/getemp", icon: @Icons.Material.Outlined.List),
        new BreadcrumbItem("Thêm mới", href: "/addemp", icon: @Icons.Material.Filled.AddCircleOutline),
    };

    private bool isShowPassword = false;
    private InputType PasswordInput => isShowPassword ? InputType.Text : InputType.Password;
    private string PasswordInputIcon => isShowPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        isShowPassword = !isShowPassword;
    }

    protected override async void OnInitialized()
    {
        var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");
        await LoadRoles();
        newEmployee = new employees_create { };
        birthdayDate = DateTime.Now.AddYears(-18);
    }

    private async Task LoadRoles()
    {
        var response = await httpClient.GetFromJsonAsync<List<roles>>(roleUrl);
        if (response != null)
        {
            roles = response;
        }
    }

    private async Task<string> GetBase64Image(IBrowserFile file)
    {
        try
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            return Convert.ToBase64String(memoryStream.ToArray());
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi xử lý hình ảnh: {ex.Message}", Severity.Error);
            return null;
        }
    }

    private async Task LoadEmpImage(InputFileChangeEventArgs e)
    {
        try
        {
            isLoading = true;
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"emp_images_avt/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);
                    newEmployee.img_emp = imageUrl;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi tải lên hình ảnh: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadEmpImage1(InputFileChangeEventArgs e)
    {
        try
        {
            isLoading = true;
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"emp_images_cccd/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);
                    newEmployee.citizen_identity_img = imageUrl;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi tải lên hình ảnh: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task AddEmp()
    {
        try
        {
            if (birthdayDate.HasValue)
            {
                newEmployee.birthday = birthdayDate.Value;
            }

            if (form.IsValid)
            {
                isLoading = true;
                var response = await httpClient.PostAsJsonAsync(url, newEmployee);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Thêm nhân viên thành công", Severity.Success);
                    Navigation.NavigateTo("/getemp");
                }
                else
                {
                    Snackbar.Add("Có lỗi xảy ra khi thêm nhân viên", Severity.Error);
                    Console.WriteLine($"Error: {response.StatusCode}");
                }
            }
            else
            {
                Snackbar.Add("Form không hợp lệ. Vui lòng kiểm tra lại các trường.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi: {ex.Message}", Severity.Error);
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }


    private string[] EmployeeValidateFullName(string fullname)
    {
        if (string.IsNullOrEmpty(fullname))
        {
            return new string[] { "Họ tên không được để trống." };
        }
        return Array.Empty<string>();
    }

    private async Task<IEnumerable<string>> EmployeeValidateEmail(string email)
    {
        if (string.IsNullOrEmpty(email))
        {
            return new string[] { "Email không được để trống." };
        }
        // if (!new EmailAddressValidator().IsValid(email))
        // {
        //     return new string[] { "Email không hợp lệ." };
        // }
        return Array.Empty<string>();
    }

    private string[] EmployeeValidatePassword(string password)
    {
        if (string.IsNullOrEmpty(password))
        {
            return new string[] { "Mật khẩu không được để trống." };
        }
        if (password.Length < 6)
        {
            return new string[] { "Mật khẩu phải có ít nhất 6 ký tự." };
        }
        return Array.Empty<string>();
    }

    private string[] EmployeeValidateGender(string gender)
    {
        if (string.IsNullOrEmpty(gender))
        {
            return new string[] { "Giới tính không được để trống." };
        }
        return Array.Empty<string>();
    }
}
