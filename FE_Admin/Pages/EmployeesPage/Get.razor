@page "/getemp"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime js
@inject IDialogService DialogService
@inject ISnackbar Snackbar
<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255); /* Màu trắng với độ mờ 50% */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Đảm bảo overlay hiển thị trên các thành phần khác */
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudImage Src="/Image/404.jpg" Alt="NOT FOUND" Elevation="0" Fluid="true" />
        </MudItem>
    </div>
}
else if (isLoadingProgress)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </MudItem>
    </div>
}
else
{
    <MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
        <MudGrid Class="pa-0">
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                    <MudBreadcrumbs Class="pa-3" Items="_items"></MudBreadcrumbs>
                </MudPaper>
                <MudPaper Elevation="0">
                    <MudDataGrid Class="mx-auto pa-2" T="employees" Dense="true" Hover="true" Bordered="true" Striped="true" MultiSelection="true"
                                 Items="@Elements" SortMode="SortMode.Multiple" Filterable="false" QuickFilter="@_quickFilter"
                                 Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">

                        <ToolBarContent>
                            <MudItem xs="4" Elevation="0" Class="pb-3">
                                <MudTextField @bind-Value="_searchString" Placeholder="Tìm kiếm..." Adornment="Adornment.Start" Immediate="true"
                                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

                            </MudItem>
                            <MudItem xs="8" Elevation="0" Class="d-flex justify-end flex-grow-1 gap-4 pb-3">
                                <MudButton Href="/addemp" Variant="Variant.Outlined" StartIcon="fas fa-plus" Color="Color.Info" Size="Size.Small">
                                    Thêm mới
                                </MudButton>
                                <MudButton Href="/importemployees" Class="ml-2" Variant="Variant.Outlined" StartIcon="fas fa-upload" Color="Color.Tertiary" Size="Size.Small">
                                    Nhập file
                                </MudButton>
                                <MudButton Href="/exportemployees" Class="ml-2" Variant="Variant.Outlined" StartIcon="fas fa-download" Color="Color.Tertiary" Size="Size.Small">
                                    Xuất file
                                </MudButton>
                            </MudItem>
                        </ToolBarContent>

                        <!-- DataGrid Columns -->
                        <Columns>

                            <PropertyColumn T="employees" Class="fw-bold" TProperty="string" Property="x => x.emp_code" Title="Mã nhân viên"
                                            Style="width: 15%; white-space: nowrap;" />
                            <PropertyColumn T="employees" Class="fw-bold" TProperty="string" Property="x => x.fullname" Title="Họ và Tên"
                                            Style="width: 20%; white-space: nowrap;" />

                            <TemplateColumn T="employees" Class="fw-bold" Title="Giới tính" Style="white-space: nowrap;">
                                <CellTemplate Context="element">
                                    @(element.Item.gender ? "Nam" : "Nữ")
                                </CellTemplate>
                            </TemplateColumn>
                            <PropertyColumn T="employees" Class="fw-bold" TProperty="string" Property="x => x.citizen_identity_number" Title="Số CCCD"
                                            Style="width: 15%; white-space: nowrap;" />
                            <TemplateColumn T="employees" Style="width: 80%; white-space: nowrap;" Class="fw-bold" Title="Trạng Thái">
                                <CellTemplate Context="element">
                                    @if (element.Item.status)
                                    {
                                        <MudChip Color="Color.Success" Size="Size.Small" Variant="Variant.Text">Đang hoạt động</MudChip>
                                    }
                                    else
                                    {
                                        <MudChip Color="Color.Error" Size="Size.Small" Variant="Variant.Text">Ngưng hoạt động</MudChip>
                                    }
                                </CellTemplate>
                            </TemplateColumn>

                            <TemplateColumn T="employees" Class="fw-bold" Title="Chức năng" Style="white-space: nowrap;">
                                <CellTemplate Context="element">
                                    <MudTooltip Text="Chỉnh sửa">
                                        <MudIconButton Href="@($"/editemp/{element.Item.id}")" Icon="far fa-edit" Color="Color.Success" Size="Size.Small" />
                                    </MudTooltip>
                                    <MudTooltip Text="Xóa">
                                        <MudIconButton Icon="far fa-trash-alt" Color="Color.Error" Size="Size.Small" OnClick="@(async () => { await OpenDeleteDialog(element.Item); })" />
                                    </MudTooltip>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>

                        <!-- Pagination -->
                        <PagerContent>
                            <MudDataGridPager T="employees" />
                        </PagerContent>
                    </MudDataGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    private IEnumerable<employees> Elements = new List<employees>();
    private IEnumerable<role_task> role_task = new List<role_task>(); // List roles for matching role names
    private string _searchString;
    private string employeesUrl = "http://localhost:49922/api/Employees";
    private string rolesUrl = "http://localhost:49922/api/RoleTask";
    private string userRole;
    private bool isInitialized = false;
    private bool isLoading = false;
    private bool isLoadingProgress = true;



    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Nhân Viên", href: "/getemp", icon: @Icons.Material.Outlined.WorkOutline),
        new BreadcrumbItem("Danh sách nhân viên", href: "/getemp", icon: @Icons.Material.Outlined.List),
    };

    private Func<employees, bool> _quickFilter => x =>
     {
     if (string.IsNullOrWhiteSpace(_searchString))
         return true;

     return $"{x.email} {x.emp_code} {x.fullname} {x.citizen_identity_number}".Contains(_searchString, StringComparison.OrdinalIgnoreCase);
     };


    protected override async Task OnInitializedAsync()
    {
        await LoadRoles(); 
        await LoadEmployees();
        isLoadingProgress = false;
        StateHasChanged();
    }

    private async Task LoadEmployees()
    {
        try
        {
            Elements = await httpClient.GetFromJsonAsync<List<employees>>(employeesUrl);
            Console.WriteLine($"Loaded employees: {System.Text.Json.JsonSerializer.Serialize(Elements)}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task LoadRoles()
    {
        try
        {
            role_task = await httpClient.GetFromJsonAsync<List<role_task>>(rolesUrl);
            Console.WriteLine($"Loaded roles: {System.Text.Json.JsonSerializer.Serialize(role_task)}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;

            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();

                    if (handler.CanReadToken(token))
                    {
                        var jwtToken = handler.ReadJwtToken(token);

                        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");

                        if (roleClaim != null)
                        {
                            userRole = roleClaim.Value;
                        }
                        else
                        {
                            Console.WriteLine("Role claim not found in the token.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi giải mã token: {ex.Message}");
                }
            }
            CheckRole();
            StateHasChanged();
        }
        if (firstRender)
        {
            await LoadRoles();
            await LoadEmployees();
        }
    }
    private void CheckRole()
    {
        if (userRole == "1")
        {
            Console.WriteLine("User is an Admin.");
        }
        else if (userRole == "2")
        {
            Console.WriteLine("User is a regular User.");
        }
        else if (userRole == "3")
        {
            Console.WriteLine("User is a regular Driver.");
        }
        else
        {
            isLoading = true;
        }
    }

    void RowClicked(DataGridRowClickEventArgs<employees> args)
    {
        Console.WriteLine($"Row clicked: {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<employees> args)
    {
        Console.WriteLine($"Row right clicked: {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<employees> items)
    {
        Console.WriteLine($"Selected items changed: {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    private async Task OpenDeleteDialog(employees employee)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Bạn có chắc chắn muốn xóa nhân viên {employee.fullname}?" },
            { "ButtonText", "Xóa" },
            { "Color", Color.Error }
        };

        var dialog = DialogService.Show<Delete>("Xác nhận xóa", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DeleteEmployee(employee.id);
        }
    }

    private async Task DeleteEmployee(int id)
    {
        try
        {
        
            var response = await httpClient.GetFromJsonAsync<ApiResponse>($"http://localhost:49922/api/Validate/ValidateEmployees/{id}");

            if (response.Success)
            {
                // Nếu khách hàng có thể xóa được, tiếp tục xóa khách hàng
                var deleteResponse = await httpClient.DeleteAsync($"{employeesUrl}/{id}");
                if (deleteResponse.IsSuccessStatusCode)
                {
                    Snackbar.Add("Xóa nhân viên thành công!", Severity.Success);
                    await LoadEmployees();
                }
                else
                {
                    Snackbar.Add("Xóa nhân viên thành công!", Severity.Success);
                    await LoadEmployees();
                }
            }
            else
            {
                // Nếu không thể xóa (do khách hàng có hóa đơn), lấy thông báo từ API
                string errorMessage = response.Message ?? "Không thể xóa nhân viên này.";
                Snackbar.Add(errorMessage, Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi xảy ra: {ex.Message}", Severity.Error);
        }
    }
    public class ApiResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; }
    }
}
