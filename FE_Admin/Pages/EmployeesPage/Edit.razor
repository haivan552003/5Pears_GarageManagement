@page "/editemp/{Id:int}"
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager

<MudContainer MaxWidth="MaxWidth.False" Class="mt-14 pa-0">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="pa-3 mb-1" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-0" Items="_items"></MudBreadcrumbs>
            </MudPaper>
        </MudItem>

        <EditForm Model="@Employee" Class="pa-3" OnValidSubmit="EditEmployee">
            <MudGrid>
                <MudItem xs="12" md="8">
                    <DataAnnotationsValidator />
                    <MudPaper Elevation="3" Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-5">Chỉnh Sửa Nhân Viên</MudText>
                        <MudGrid>
                            <MudItem xs="4">
                                <MudTextField ShrinkLabel @bind-Value="Employee.fullname" Label="Họ và tên" Required="true" Variant="Variant.Outlined"
                                              Validation="@(new Func<string, Task<IEnumerable<string>>>(EmployeeValidateFullName))" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField ShrinkLabel @bind-Value="Employee.phone_number" Label="Số điện thoại" Required="true" Variant="Variant.Outlined"
                                              Validation="@(new Func<string, Task<IEnumerable<string>>>(EmployeeValidatephone))" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudDatePicker @bind-Date="birthdayDate" Label="Ngày sinh" Required="true" Variant="Variant.Outlined" DateFormat="dd/MM/yyyy" MaxDate="@DateTime.Now.AddYears(-18)" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect @bind-Value="Employee.gender" Label="Giới tính" Required="true" Variant="Variant.Outlined">
                                    <MudSelectItem Value="true">Nam</MudSelectItem>
                                    <MudSelectItem Value="false">Nữ</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField ShrinkLabel @bind-Value="Employee.citizen_identity_number" Label="Số CCCD" Variant="Variant.Outlined"
                                              Validation="@(new Func<string, Task<IEnumerable<string>>>(EmployeeValidateCCCD))" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField ShrinkLabel @bind-Value="Employee.email" Label="Email" Required="true" Variant="Variant.Outlined"
                                              Validation="@(new Func<string, Task<IEnumerable<string>>>(EmployeeValidateEmail))" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField ShrinkLabel @bind-Value="Employee.password" Label="Mật khẩu" Required="true" Variant="Variant.Outlined"
                                              InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                                              OnAdornmentClick="TogglePasswordVisibility"
                                              Validation="@(new Func<string, Task<IEnumerable<string>>>(EmployeeValidatePassword))" />
                            </MudItem>

                            <MudItem xs="4">
                                <MudSelect ShrinkLabel @bind-Value="Employee.status" Label="Trạng thái" Required="true" Variant="Variant.Outlined">
                                    <MudSelectItem Value="true">Đang hoạt động</MudSelectItem>
                                    <MudSelectItem Value="false">Ngưng hoạt động</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect ShrinkLabel @bind-Value="Employee.role_id" Label="Vai trò" Required="true" Variant="Variant.Outlined">
                                    @if (roles != null)
                                    {
                                        @foreach (var role in roles)
                                        {
                                            <MudSelectItem Value="role.id">@role.name</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>
                           
                        </MudGrid>
                    </MudPaper>
                   
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudPaper Elevation="3" Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-4">Hình ảnh</MudText>
                        <MudGrid>
                            <MudItem xs="12" md="12">
                                <InputFile id="licenseInput2" OnChange="HandleFileSelected" accept="image/*" style="display: none;" />
                                @if (!string.IsNullOrEmpty(Employee.img_emp))
                                {
                                    <MudImage Fluid="false" Src="@Employee.img_emp" Class="rounded-lg mb-2 w-100 mx-auto d-block" Height="260" />
                                }
                                <MudButton HtmlTag="label" For="licenseInput2" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Secondary"
                                           StartIcon="@Icons.Material.Outlined.CloudUpload"
                                           FullWidth="true" Class="mud-button-small-text">
                                    Ảnh đại diện
                                </MudButton>
                            </MudItem>

                        </MudGrid>
                    </MudPaper>
                    <MudItem xs="12" Class="d-flex justify-end">
                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary" OnClick="EditEmployee" Class="mt-3">Lưu</MudButton>
                    </MudItem>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudGrid>
</MudContainer>


@code {
    [Parameter] public int Id { get; set; }
    private IBrowserFile selectedFile;
    private IBrowserFile selectedFile1;
    private string imagePreviewUrl;
    private string imagePreviewUrl1;
    private string roleUrl = "http://localhost:49922/api/Roles";
    private List<roles> roles = new List<roles>();
    private employees Employee = new employees();
    private bool isFormValid = false;
    private DateTime? birthdayDate;
    private MudForm form;
    private string url = "http://localhost:49922/api/Employees";


    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Nhân viên", href: "/getemp", icon: @Icons.Material.Outlined.PeopleOutline),
        new BreadcrumbItem("Danh sách nhân viên", href: "/getemp", icon: @Icons.Material.Outlined.List),
        new BreadcrumbItem("Chỉnh sửa nhân viên", href: "", icon: @Icons.Material.Filled.Edit),
    };

    private bool isShowPassword = false;
    private InputType PasswordInput => isShowPassword ? InputType.Text : InputType.Password;
    private string PasswordInputIcon => isShowPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        isShowPassword = !isShowPassword; // Đảo giá trị hiển thị mật khẩu
    }

    protected override async Task OnInitializedAsync()
    {
        var response = await httpClient.GetFromJsonAsync<employees>(url + "/" + Id);
        Employee = response;
        await LoadDriver();
        await LoadRoles();
    }

    private async Task LoadDriver()
    {
        try
        {
            Employee = await httpClient.GetFromJsonAsync<employees>($"{url}/{Id}");
            if (Employee != null)
            {
                birthdayDate = Employee.birthday;
            }
            else
            {
                Snackbar.Add("Không tìm thấy thông tin tài xế", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải thông tin tài xế: {ex.Message}", Severity.Error);
        }
    }


    private async Task EditEmployee()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync(url + "/" + Id, Employee);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Chỉnh sửa nhân viên {Employee.fullname} thành công", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Chỉnh sửa {Employee.fullname} thất bại" + response, Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Có lỗi xảy ra: {ex.Message}", Severity.Error);
        }
    }


    private void Cancel()
    {
        navigationManager.NavigateTo("/getemp");
    }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        if (selectedFile != null)
        {
            var stream = selectedFile.OpenReadStream();
            var buffer = new byte[selectedFile.Size];
            await stream.ReadAsync(buffer, 0, buffer.Length);
            stream.Close();

            imagePreviewUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
        }
        else
        {
            Console.WriteLine("No file selected.");
        }
    }

    private async Task<string> GetBase64Image(IBrowserFile file)
    {
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        return Convert.ToBase64String(buffer);
    }


    private async Task<bool> IsEmailExists(string email)
    {
        var response = await httpClient.GetAsync($"{url}/exists?email={email}");
        return response.IsSuccessStatusCode && bool.Parse(await response.Content.ReadAsStringAsync());
    }

    private async Task<IEnumerable<string>> EmployeeValidateEmail(string email)
    {
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(email))
        {
            errors.Add("Vui lòng điền email.");
        }
        else if (email.Length < 20 || email.Length > 150)
        {
            errors.Add("Email không hợp lệ.");
        }
        else
        {
            if (await IsEmailExists(email))
            {
                errors.Add("Email đã tồn tại trong cơ sở dữ liệu.");
            }
        }

        return errors;
    }

    private IEnumerable<string> EmployeeValidateEmpCode(string empCode)
    {
        if (string.IsNullOrWhiteSpace(empCode))
        {
            yield return "Vui lòng điền mã nhân viên.";
        }
    }

    private async Task<IEnumerable<string>> EmployeeValidatePassword(string password)
    {
        var errorMessages = new List<string>();

        if (string.IsNullOrWhiteSpace(password))
        {
            errorMessages.Add("Vui lòng điền mật khẩu.");
        }
        else if (password.Length < 8 || password.Length > 15)
        {
            errorMessages.Add("Mật khẩu không hợp lệ.");
        }
        else if (!password.Any(char.IsUpper) || !password.Any(char.IsLower) ||
                 !password.Any(char.IsDigit) || !password.Any(ch => "!@#$%^&*()_+[]{}|;':\",.<>?/`~".Contains(ch)))
        {
            errorMessages.Add("Mật khẩu phải chứa ít nhất một chữ hoa, một chữ thường, một số và một ký tự đặc biệt.");
        }
        return errorMessages.Any() ? errorMessages : Enumerable.Empty<string>();
    }


    private async Task<IEnumerable<string>> EmployeeValidateFullName(string fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName))
        {
            return new List<string> { "Vui lòng điền họ và tên." };
        }
        else if (fullName.Length < 5 || fullName.Length > 150)
        {
            return new List<string> { "Họ và tên không hợp lệ." };
        }
        else if (fullName.Any(ch => !char.IsLetter(ch) && !char.IsWhiteSpace(ch)))
        {
            return new List<string> { "Họ và tên không được chứa ký tự đặc biệt." };
        }
        return Enumerable.Empty<string>();
    }

    private IEnumerable<string> EmployeeValidateRoleID(string roleId)
    {
        if (string.IsNullOrWhiteSpace(roleId))
        {
            yield return "Vui lòng điền ID vai trò.";
        }
        else if (!int.TryParse(roleId, out _))
        {
            yield return "ID vai trò không hợp lệ .";
        }
    }

    private IEnumerable<string> EmployeeValidateGender(string gender)
    {
        if (string.IsNullOrWhiteSpace(gender))
        {
            yield return "Vui lòng chọn giới tính.";
        }
    }

    private IEnumerable<string> EmployeeValidateCitizenIdentity(string citizenIdentityNumber, string citizenIdentityImg)
    {
        if (!string.IsNullOrWhiteSpace(citizenIdentityNumber) && string.IsNullOrWhiteSpace(citizenIdentityImg))
        {
            yield return "Nếu có số CMND thì hình ảnh CMND không được bỏ trống.";
        }
        else if (string.IsNullOrWhiteSpace(citizenIdentityNumber) && !string.IsNullOrWhiteSpace(citizenIdentityImg))
        {
            yield return "Nếu có hình ảnh CMND thì số CMND không được bỏ trống.";
        }
        else if (!string.IsNullOrWhiteSpace(citizenIdentityNumber) && citizenIdentityNumber.Length != 9 && citizenIdentityNumber.Length != 12)
        {
            yield return "Số CCCD không hợp lệ.";
        }
    }

    private async Task LoadRoles()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<roles>>(roleUrl);
            if (response != null)
            {
                roles = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải danh sách vai trò: {ex.Message}", Severity.Error);
        }
    }
    private async Task<IEnumerable<string>> EmployeeValidatephone(string citizenIdentityNumber)
    {
        if (string.IsNullOrWhiteSpace(citizenIdentityNumber))
        {
            return new List<string> { "Vui lòng điền Số điện thoại." };
        }
        if (citizenIdentityNumber.Length != 12)
        {
            return new List<string> { "Số số điện thoại phải có 10 ký tự." };
        }
        return Enumerable.Empty<string>();
    }
    private async Task<IEnumerable<string>> EmployeeValidateCCCD(string citizenIdentityNumber)
    {
        if (string.IsNullOrWhiteSpace(citizenIdentityNumber))
        {
            return new List<string> { "Vui lòng điền CCCD." };
        }
        if (citizenIdentityNumber.Length != 12)
        {
            return new List<string> { "Số CCCD phải có 12 ký tự." };
        }
        if (!citizenIdentityNumber.All(char.IsDigit))
        {
            return new List<string> { "Số CCCD phải chỉ chứa các chữ số." };
        }
        return Enumerable.Empty<string>();
    }
}
