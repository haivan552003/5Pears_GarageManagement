@inherits MudComponentBase
@inject IJSRuntime js
@inject IDialogService DialogService
@using System.Linq.Expressions
<MudDialog MaxWidth="MaxWidth.Large" FullWidth="true">
    <DialogContent>
        <div class="print-actions mb-4">
            <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="PrintSelected">In các mục đã chọn</MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="PrintAll">In tất cả</MudButton>
            <MudButton Color="Color.Default" Variant="Variant.Text" OnClick="CloseDialog" Class="ml-2">Đóng</MudButton>
        </div>
        <MudDataGrid T="object" Items="@Entries"
                     SelectMode="SelectMode.Multiple"
                     @bind-SelectedItems="@SelectedEntries">
            <Columns>
                @foreach (var field in EntryFields)
                {
                    <PropertyColumn T="object" TProperty="string" Property="@(x => field.Value(x))" Title="@field.Key" />
                }
            </Columns>
        </MudDataGrid>
    </DialogContent>
</MudDialog>
@code {
    [Parameter]
    public List<object> Entries { get; set; } = new List<object>();

    [Parameter]
    public string DocumentTitle { get; set; } = "CHI TIẾT";

    [Parameter]
    public Dictionary<string, Func<object, string>> EntryFields { get; set; } = new Dictionary<string, Func<object, string>>();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private HashSet<object> SelectedEntries = new HashSet<object>();

    protected override void OnInitialized()
    {
        Entries ??= new List<object>();
        EntryFields ??= new Dictionary<string, Func<object, string>>();
    }

    private async Task PrintSelected()
    {
        await PrintIndividualEntries(SelectedEntries.ToList());
    }

    private async Task PrintAll()
    {
        await PrintIndividualEntries(Entries);
    }

    private async Task PrintIndividualEntries(List<object> entriesToPrint)
    {
        if (entriesToPrint == null || !entriesToPrint.Any())
        {
            return;
        }

        var printDataList = entriesToPrint.Select(entry =>
            new
            {
                EntryData = EntryFields.ToDictionary(
                    field => field.Key,
                    field => field.Value(entry)
                )
            }
        ).ToList();

        var printOptions = new
        {
            entries = printDataList.Select(p => p.EntryData).ToList(),
            title = DocumentTitle,
            headers = EntryFields.Keys.ToList()
        };

        await js.InvokeVoidAsync("printMultipleEntries", printOptions);
    }

    private void CloseDialog()
    {
        MudDialog.Close();
    }
}
<style>
    @@media print {
        .print-actions { display: none !important; }
        body * { visibility: hidden; }
        #printable-container, #printable-container * { 
            visibility: visible !important; 
        }
        #printable-container {
            position: absolute;
            left: 0;
            top: 0;
            width: 10cm;
            margin: 0 auto;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            font-size: 9pt;
        }
        th, td {
            border: 1px solid black;
            padding: 2px;
            text-align: left;
        }
        th { background-color: #f2f2f2; }
        @@page {
            size: 10cm auto;
            margin: 5mm;
        }
    }
</style>