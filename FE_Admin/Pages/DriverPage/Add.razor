@page "/addDriver"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IWebHostEnvironment Environment
@inject IJSRuntime js
<MudContainer MaxWidth="MaxWidth.False" Class="mt-14 pa-0">
    <MudGrid>
        <MudItem xs="12" md="12">
            <MudPaper Elevation="0" Class="pa-3 mb-1" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-0" Items="_items"></MudBreadcrumbs>
            </MudPaper>
        </MudItem>
        <EditForm Model="@newDriver" Class="pa-3" OnValidSubmit="AddDriver">
            <MudGrid>
                <MudItem xs="12" md="8">
                    <DataAnnotationsValidator />
                    <MudPaper Elevation="3" Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-5">Thêm tài xế</MudText>
                        <MudGrid>                          
                            <MudItem xs="4">
                                <MudTextField ShrinkLabel @bind-Value="newDriver.fullname" For="@(() => newDriver.fullname)"
                                              Label="Họ và tên" Required="true" RequiredError="Vui lòng nhập họ và tên"
                                              Placeholder="Họ và tên"
                                              Validation="@(new Func<string, IEnumerable<string>>(ValidateFullName))"
                                              Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField ShrinkLabel @bind-Value="newDriver.phonenumber" For="@(() => newDriver.phonenumber)"
                                              Label="Số điện thoại" Required="true" RequiredError="Vui lòng nhập số điện thoại"
                                              Placeholder="Số điện thoại"
                                              Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudDatePicker @bind-Date="birthdayDate" For="@(() => newDriver.birthday)"
                                               Label="Ngày sinh" Required="true" RequiredError="Vui lòng chọn ngày sinh"
                                               Variant="Variant.Outlined" DateFormat="dd/MM/yyyy"
                                               Placeholder="Ngày sinh"
                                               MaxDate="@DateTime.Now.AddYears(-18)" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect @bind-Value="newDriver.gender" For="@(() => newDriver.gender)"
                                           Label="Giới tính" Required="true" RequiredError="Vui lòng chọn giới tính"
                                           Placeholder="Giới tính"
                                           Variant="Variant.Outlined">
                                    <MudSelectItem Value="@((byte)0)">Nam</MudSelectItem>
                                    <MudSelectItem Value="@((byte)1)">Nữ</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField ShrinkLabel @bind-Value="newDriver.citizen_identity_number" For="@(() => newDriver.citizen_identity_number)"
                                              Label="Số CCCD" Required="true" RequiredError="Vui lòng nhập số CCCD"
                                              Placeholder="Số CCCD"
                                              Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField ShrinkLabel @bind-Value="newDriver.driver_license_number" For="@(() => newDriver.driver_license_number)"
                                              Label="Số bằng lái" Required="true" RequiredError="Vui lòng nhập số bằng lái"
                                              Placeholder="Số GPLX"
                                              Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect @bind-Value="newDriver.class_driver_license" Label="Hạng bằng lái" Required="true"
                                           RequiredError="Vui lòng nhập hạng bằng lái xe" Variant="Variant.Outlined" Placeholder="Hạng bằng lái">
                                    <MudSelectItem Value="1">Bằng lái xe hạng B1</MudSelectItem>
                                    <MudSelectItem Value="2">Bằng lái xe hạng B2</MudSelectItem>
                                    <MudSelectItem Value="3">Bằng lái xe hạng C</MudSelectItem>
                                    <MudSelectItem Value="4">Bằng lái xe hạng D</MudSelectItem>
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="4">
                                <MudTextField @bind-Value="newDriver.email" For="@(() => newDriver.email)"
                                              Label="Email" Variant="Variant.Outlined" Placeholder="Email" RequiredError="Vui lòng nhập Email" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField ShrinkLabel @bind-Value="newDriver.password" Label="Mật khẩu" Required="true"
                                              Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End"
                                              Placeholder="Mật khẩu"
                                              AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />
                            </MudItem>

                            <MudItem xs="4">
                                <MudNumericField @bind-Value="newDriver.price" For="@(() => newDriver.price)"
                                                 Label="Giá" Required="true" RequiredError="Vui lòng nhập giá"
                                                 Placeholder="Giá"
                                                 Variant="Variant.Outlined" Min="0" Step="1000" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudNumericField @bind-Value="newDriver.voucher" For="@(() => newDriver.voucher)"
                                                 Label="Voucher" Variant="Variant.Outlined" Min="0" Step="1000"
                                                 Placeholder="Voucher"
                                                 Validation="@(new Func<float, string>(ValidateVoucher))" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudSelect @bind-Value="newDriver.status" For="@(() => newDriver.status)"
                                           Label="Trạng thái" Required="true" Variant="Variant.Outlined">
                                    <MudSelectItem Value="@((byte)0)">Hoạt động</MudSelectItem>
                                    <MudSelectItem Value="@((byte)1)">Không hoạt động</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField ShrinkLabel @bind-Value="newDriver.address" For="@(() => newDriver.address)"
                                              Label="Địa chỉ" Required="true" RequiredError="Vui lòng nhập địa chỉ"
                                              Placeholder="Địa chỉ"
                                              @ref="multilineReference" T="string" Lines="3" MaxLines="5"
                                              Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Api" OnAdornmentClick="@(() => multilineReference.SelectAsync())"
                                              Variant="Variant.Outlined" />
                            </MudItem>
                        </MudGrid>
                        
                    </MudPaper>
                    <MudItem xs="12" Class="d-flex justify-end mt-6">
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mr-2"
                                   OnClick="@(() => NavigationManager.NavigateTo("/getDriver"))">Hủy</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                                   StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary">Lưu</MudButton>
                    </MudItem>
                </MudItem>

                <MudItem xs="12" md="4">
                    <MudPaper Elevation="3" Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-4">Hình ảnh</MudText>
                        <MudGrid>
                            <MudItem xs="12">
                                <InputFile id="driverImageInput" OnChange="@LoadDriverImage" hidden accept=".jpg,.jpeg,.png" />
                                <MudButton HtmlTag="label" Variant="Variant.Outlined" Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload" for="driverImageInput"
                                           FullWidth="true" Class="mud-button-small-text">
                                    Ảnh tài xế
                                </MudButton>
                                <ValidationMessage For="@(() => newDriver.img_driver)" />
                                @if (!string.IsNullOrEmpty(newDriver.img_driver))
                                {
                                    <MudGrid Justify="Justify.Center" Class="mt-2">
                                        <MudItem>
                                            <MudImage Src="@newDriver.img_driver" Alt="Hình ảnh tài xế" Width="100"
                                                      Height="100" ObjectFit="ObjectFit.Cover" />
                                        </MudItem>
                                    </MudGrid>
                                }
                            </MudItem>

                            <MudItem xs="6">
                                <InputFile id="citizenIdInput1" OnChange="@((e) => LoadCitizenIdImage(e, 1))"
                                           hidden accept=".jpg,.jpeg,.png" />
                                <MudButton HtmlTag="label" Variant="Variant.Outlined" Color="Color.Secondary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload" for="citizenIdInput1"
                                           FullWidth="true" Class="mud-button-small-text">
                                    CCCD (Trước)
                                </MudButton>
                                <ValidationMessage For="@(() => newDriver.citizen_identity_img1)" />
                                @if (!string.IsNullOrEmpty(newDriver.citizen_identity_img1))
                                {
                                    <MudGrid Justify="Justify.Center" Class="mt-2">
                                        <MudItem>
                                            <MudImage Src="@newDriver.citizen_identity_img1" Alt="CCCD (Mặt trước)"
                                                      Width="100" Height="100" ObjectFit="ObjectFit.Cover" />
                                        </MudItem>
                                    </MudGrid>
                                }
                            </MudItem>

                            <MudItem xs="6">
                                <InputFile id="citizenIdInput2" OnChange="@((e) => LoadCitizenIdImage(e, 2))"
                                           hidden accept=".jpg,.jpeg,.png" />
                                <MudButton HtmlTag="label" Variant="Variant.Outlined" Color="Color.Secondary"
                                           Required="true" RequiredError="Vui lòng nhập địa chỉ"
                                           StartIcon="@Icons.Material.Filled.CloudUpload" for="citizenIdInput2"
                                           FullWidth="true" Class="mud-button-small-text">
                                    CCCD (Sau)
                                </MudButton>
                                <ValidationMessage For="@(() => newDriver.citizen_identity_img2)" />
                                @if (!string.IsNullOrEmpty(newDriver.citizen_identity_img2))
                                {
                                    <MudGrid Justify="Justify.Center" Class="mt-2">
                                        <MudItem>
                                            <MudImage Src="@newDriver.citizen_identity_img2" Alt="CCCD (Mặt sau)"
                                                      Width="100" Height="100" ObjectFit="ObjectFit.Cover" />
                                        </MudItem>
                                    </MudGrid>
                                }
                            </MudItem>

                            <MudItem xs="6">
                                <InputFile id="licenseInput1" OnChange="@((e) => LoadLicenseImage(e, 1))"
                                           hidden accept=".jpg,.jpeg,.png" />
                                <MudButton HtmlTag="label" Variant="Variant.Outlined" Color="Color.Secondary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload" for="licenseInput1"
                                           FullWidth="true" Class="mud-button-small-text">
                                    GPLX (Trước)
                                </MudButton>
                                <ValidationMessage For="@(() => newDriver.driver_license_img1)" />
                                @if (!string.IsNullOrEmpty(newDriver.driver_license_img1))
                                {
                                    <MudGrid Justify="Justify.Center" Class="mt-2">
                                        <MudItem>
                                            <MudImage Src="@newDriver.driver_license_img1" Alt="Bằng lái (Mặt trước)"
                                                      Width="100" Height="100" ObjectFit="ObjectFit.Cover" />
                                        </MudItem>
                                    </MudGrid>
                                }
                            </MudItem>

                            <MudItem xs="6">
                                <InputFile id="licenseInput2" OnChange="@((e) => LoadLicenseImage(e, 2))"
                                           hidden accept=".jpg,.jpeg,.png" />
                                <MudButton HtmlTag="label" Variant="Variant.Outlined" Color="Color.Secondary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload" for="licenseInput2"
                                           FullWidth="true" Class="mud-button-small-text">
                                    GPLX (Sau)
                                </MudButton>
                                <ValidationMessage For="@(() => newDriver.driver_license_img2)" />
                                @if (!string.IsNullOrEmpty(newDriver.driver_license_img2))
                                {
                                    <MudGrid Justify="Justify.Center" Class="mt-2">
                                        <MudItem>
                                            <MudImage Src="@newDriver.driver_license_img2" Alt="Bằng lái (Mặt sau)"
                                                      Width="100" Height="100" ObjectFit="ObjectFit.Cover" />
                                        </MudItem>
                                    </MudGrid>
                                }
                            </MudItem>
                            <MudItem xs="12" Class="d-flex justify-center mt-4">
                                @if (isLoading1)
                                {
                                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                                }
                            </MudItem>


                        </MudGrid>

                    </MudPaper>
                </MudItem>
              

                <MudItem xs="12" Class="d-flex justify-center mt-4">
                    @if (isLoading)
                    {
                        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
                    }
                </MudItem>
            </MudGrid>


        </EditForm>
    </MudGrid>
</MudContainer>

@code {
    private driver newDriver = new driver();
    private MudForm form;
    private DateTime? birthdayDate;
    private MudTextField<string> multilineReference;
    private bool isLoading = false;
    private bool isLoading1 = false;
    private bool isShowPassword = false;
    private InputType PasswordInput => isShowPassword ? InputType.Text : InputType.Password;
    private string PasswordInputIcon => isShowPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;

    private void TogglePasswordVisibility()
    {
        isShowPassword = !isShowPassword;
    }
    protected override void OnInitialized()
    {
        newDriver = new driver
            {
                status = 0,
                gender = 0,
            };
        birthdayDate = DateTime.Now.AddYears(-18);
    }
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
  {
      new BreadcrumbItem("Tài xế", href: null, icon: @Icons.Material.Outlined.SupervisedUserCircle),
      new BreadcrumbItem("Danh sách tài xế", href: "/getDriver", icon: @Icons.Material.Outlined.List),
      new BreadcrumbItem("Thêm mới", href: "/addDriver", icon: @Icons.Material.Outlined.AddCircleOutline),
  };
    private string ValidateVoucher(float voucher)
    {
        if (voucher > newDriver.price)
        {
            Snackbar.Add("Voucher không được lớn hơn giá", Severity.Warning);
        }
        return null;
    }
    private IEnumerable<string> ValidateFullName(string fullname)
    {
        if (string.IsNullOrWhiteSpace(fullname))
            yield return "Họ và tên không được để trống";
        else if (fullname.Length < 3)
            yield return "Họ và tên phải có ít nhất 3 ký tự";
        else if (fullname.Length > 100)
            yield return "Họ và tên không được vượt quá 100 ký tự";
    }
    private async Task<string> GetBase64Image(IBrowserFile file)
    {
        try
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            var bytes = memoryStream.ToArray();
            return Convert.ToBase64String(bytes);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error processing image: {ex.Message}", Severity.Error);
            return null;
        }
    }

    private async Task LoadDriverImage(InputFileChangeEventArgs e)
    {
        try
        {
            isLoading1 = true;
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"driver_images/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);
                    newDriver.img_driver = imageUrl;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error uploading driver image: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading1 = false;
        }
    }

    private async Task LoadCitizenIdImage(InputFileChangeEventArgs e, int side)
    {
        try
        {
            isLoading1 = true;
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"citizen_id_images/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);

                    if (side == 1)
                        newDriver.citizen_identity_img1 = imageUrl;
                    else
                        newDriver.citizen_identity_img2 = imageUrl;

                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error uploading citizen ID image: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading1 = false;
        }
    }
    private bool ValidateImages()
    {
        return !string.IsNullOrEmpty(newDriver.img_driver) &&
               !string.IsNullOrEmpty(newDriver.citizen_identity_img1) &&
               !string.IsNullOrEmpty(newDriver.citizen_identity_img2) &&
               !string.IsNullOrEmpty(newDriver.driver_license_img1) &&
               !string.IsNullOrEmpty(newDriver.driver_license_img2);
    }

    private async Task LoadLicenseImage(InputFileChangeEventArgs e, int side)
    {
        try
        {
            isLoading1 = true;
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"license_images/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);

                    if (side == 1)
                        newDriver.driver_license_img1 = imageUrl;
                    else
                        newDriver.driver_license_img2 = imageUrl;

                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error uploading license image: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading1 = false;
        }
    }

    private async Task AddDriver()
    {
        isLoading = true;
        try
        {
            await Task.Delay(2000);
            if (!ValidateImages())
            {
                Snackbar.Add("Vui lòng tải lên đầy đủ các ảnh yêu cầu", Severity.Warning);
                return;
            }

            if (birthdayDate.HasValue)
            {
                newDriver.birthday = birthdayDate.Value;
            }

            isLoading = true;
            var response = await httpClient.PostAsJsonAsync("http://localhost:49922/api/Driver", newDriver);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<driver>();
                if (result != null)
                {
                    Snackbar.Add("Thêm tài xế thành công", Severity.Success);
                    NavigationManager.NavigateTo("/getDriver");
                }
                else
                {
                    Snackbar.Add("Bạn chưa cung cấp đủ thông tin tài xế, vui lòng nhập lại", Severity.Warning);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Lỗi: {response.StatusCode} - {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Đã xảy ra lỗi: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
   
}


