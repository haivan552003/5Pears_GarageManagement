@page "/getDriver"
@inject HttpClient httpClient
@inject IJSRuntime js
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
    <MudGrid Class="pa-0">
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-3" Items="_items"></MudBreadcrumbs>
            </MudPaper>
            <MudPaper Elevation="0">
                <MudDataGrid Class="mx-auto pa-2" T="driver" Dense="true" Hover="true" Bordered="true" Striped="true" MultiSelection="true"
                             Items="Elements" SortMode="SortMode.Multiple" Filterable="false" QuickFilter="@_quickFilter"
                             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
                    <ToolBarContent>
                        <MudItem xs="4" Elevation="0" Class="pb-3">
                            <MudTextField @bind-Value="_searchString" Placeholder="Tìm kiếm..." Adornment="Adornment.Start" Immediate="true"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </MudItem>

                        <MudItem xs="8" Elevation="0" Class="d-flex justify-end flex-grow-1 gap-4 pb-3">
                            <MudButton Href="/addDriver" Variant="Variant.Outlined" StartIcon="fas fa-plus" Color="Color.Info" Size="Size.Small">
                                Thêm mới
                            </MudButton>
                            <MudButton Href="/driver-calendar" Variant="Variant.Outlined" StartIcon="fas fa-calendar" Color="Color.Secondary" Size="Size.Small">
                                Lịch tài xế
                            </MudButton>

                            <MudButton Href="/addproduct" Class="ml-2" Variant="Variant.Outlined" StartIcon="fas fa-upload" Color="Color.Tertiary" Size="Size.Small">
                                Nhập file
                            </MudButton>

                            <MudButton Href="/addproduct" Class="ml-2" Variant="Variant.Outlined" StartIcon="fas fa-download" Color="Color.Tertiary" Size="Size.Small">
                                Xuất file
                            </MudButton>
                        </MudItem>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn T="driver" Style="width: 80%;" TProperty="string" Property="x => x.driver_code" Class="fw-bold" Title="Mã tài xế" />
                        <PropertyColumn T="driver" Style="width: 80%;" TProperty="string" Property="x => x.fullname" Class="fw-bold" Title="Tên tài xế" />
                        <PropertyColumn T="driver" Style="width: 80%;" TProperty="string" Property="x => x.phonenumber" Class="fw-bold" Title="Số điện thoại" />
                        <PropertyColumn T="driver" Style="width: 80%;" TProperty="DateTime" Property="x => x.birthday" Class="fw-bold" Title="Ngày sinh">
                            <CellTemplate>
                                @context.Item.birthday.ToString("dd/MM/yyyy")
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn T="driver" Style="width: 80%;" TProperty="string" Title="Giới tính" Class="fw-bold">
                            <CellTemplate>
                                @(context.Item.gender == 0 ? "Nam" : "Nữ")
                            </CellTemplate>
                        </PropertyColumn>
                        <TemplateColumn T="driver" Style="width: 80%;" Class="fw-bold" TProperty="string" Title="Trạng Thái">
                            <CellTemplate Context="element">
                                @if (element.Item.status == 0)
                                {
                                    <MudChip Color="Color.Success" Size="Size.Small" Variant="Variant.Text">Đang hoạt động</MudChip>
                                }
                                else
                                {
                                    <MudChip Color="Color.Error" Size="Size.Small" Variant="Variant.Text">Ngưng hoạt động</MudChip>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn T="driver" Class="fw-bold" Title="Chức năng">
                            <CellTemplate Context="element">
                                <MudTooltip Text="Chỉnh sửa">
                                    <MudIconButton Href="@($"/editdriver/{element.Item.id}")" Icon="far fa-edit" Color="Color.Success" Size="Size.Small" />
                                </MudTooltip>
                                <MudTooltip Text="Xóa">
                                    <MudIconButton Icon="far fa-trash-alt" Color="Color.Error" Size="Size.Small"                    
                                                   OnClick="@(async () => { await OpenDeleteDialog(element.Item); })" />
                                </MudTooltip>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="driver" />
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private IEnumerable<driver> Elements = new List<driver>();
    private string _searchString;
    private List<string> _events = new();
    private string url = "http://localhost:49922/api/Driver";

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Tài xế", "/", icon: Icons.Material.Outlined.SupervisedUserCircle),
        new BreadcrumbItem("Danh sách tài xế", href: null, icon: Icons.Material.Outlined.List),
    };

    private Func<driver, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return $"{x.fullname} {x.id} {x.birthday.ToString("dd/MM/yyyy")} {(x.gender == 0 ? "Nam" : "Nữ")}".Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadDrivers();
    }

    private async Task LoadDrivers()
    {
        try
        {
            Elements = await httpClient.GetFromJsonAsync<List<driver>>(url);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải danh sách tài xế: {ex.Message}", Severity.Error);
        }
    }
    private async Task OpenDeleteDialog(driver driver)
    {

        var parameters = new DialogParameters
    {
        { "ContentText", $"Bạn có chắc chắn muốn xóa tài xế { driver.fullname}?" },
        { "ButtonText", "Xóa" },
        { "Color", Color.Error }
    };

        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<Delete>("Xác nhận xóa", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DeleteDriver(driver);
        }
    }
    private async Task DeleteDriver(driver driver)
    {
        try
        {
            // Gửi yêu cầu kiểm tra khách hàng có hóa đơn hay không
            var response = await httpClient.GetFromJsonAsync<ApiResponse>($"http://localhost:49922/api/Validate/ValidateDriver/{driver.id}");

            if (response.Success)
            {
                // Nếu khách hàng có thể xóa được, tiếp tục xóa khách hàng
                var deleteResponse = await httpClient.DeleteAsync($"{url}/{driver.id}");
                if (deleteResponse.IsSuccessStatusCode)
                {
                    Snackbar.Add("Xóa khách hàng thành công!", Severity.Success);
                    await LoadDrivers();
                }
                else
                {
                    Snackbar.Add("Xóa khách hàng thất bại!", Severity.Warning);
                }
            }
            else
            {
                // Nếu không thể xóa (do khách hàng có hóa đơn), lấy thông báo từ API
                string errorMessage = response.Message ?? "Không thể xóa khách hàng này.";
                Snackbar.Add(errorMessage, Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi xảy ra: {ex.Message}", Severity.Error);
        }
    }
    private string GenerateEditUrl(int id)
    {
        return $"/editdriver/{id}";
    }

    private void RowClicked(DataGridRowClickEventArgs<driver> args)
    {
        // Handle row click event if needed
    }

    private void RowRightClicked(DataGridRowClickEventArgs<driver> args)
    {
        // Handle row right-click event if needed
    }

    private void SelectedItemsChanged(HashSet<driver> items)
    {
        // Handle selected items changed event if needed
    }
    public class ApiResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; }
    }
}