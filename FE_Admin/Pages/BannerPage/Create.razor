@page "/addbanner"
@using FE_Admin.ModelCustom
@inject HttpClient httpClient
@inject IJSRuntime js
@inject ISnackbar Snackbar
@inject NavigationManager nv
<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255); /* Màu trắng với độ mờ 50% */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Đảm bảo overlay hiển thị trên các thành phần khác */
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudImage Src="/Image/404.jpg" Alt="NOT FOUND" Elevation="0" Fluid="true" />
        </MudItem>
    </div>
}
else if (isLoadingProgress)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </MudItem>
    </div>
}
else
{
    <MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">

        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pa-3 mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                    <MudBreadcrumbs Class="pa-0" Items="_items"></MudBreadcrumbs>
                </MudPaper>
            </MudItem>
            <MudItem xs="4" Class="mx-auto">
                <MudPaper Elevation="4" Class="pa-3">
                    <MudText Typo="Typo.h6" Class="mb-3">Thêm banner</MudText>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudPaper Elevation="0">
                                <MudForm @ref="form" @bind-IsValid="isFormValid" Style="height:auto" Class="mud-width-full">

                                    <InputFile id="licenseInput2" OnChange="HandleFileSelected" accept="image/*" style="display: none;" />
                                    @if (!string.IsNullOrEmpty(imagePreviewUrl))
                                    {
                                        <MudImage Fluid="false" Src="@imagePreviewUrl" Class="rounded-lg mb-2 w-100 mx-auto d-block" Height="280" />
                                    }
                                    <MudButton HtmlTag="label" For="licenseInput2" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary"
                                               StartIcon="@Icons.Material.Filled.CloudUpload"
                                               FullWidth="true" Class="mud-button-small-text">
                                        Hình ảnh
                                    </MudButton>
                                    @if (isLoadingIMG)
                                    {
                                        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                                    }
                                    <MudTextField ShrinkLabel @bind-Value="newBanner.title" Label="Tiêu đề"
                                                  Class="py-3"
                                                  Placeholder="Tên công việc" Variant="Variant.Outlined" Required="true" />
                                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary" OnClick="AddBanner" Class="mt-3 float-end">Lưu</MudButton>
                                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Cancel" Color="Color.Error" Class="mr-2 mt-3 float-end"
                                               OnClick="@Cancel">Hủy</MudButton>

                                </MudForm>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
}


<script>
    // Lấy token từ localStorage
    function getAuthToken() {
        return localStorage.getItem("authToken");
    }
</script>

@code {
    private IBrowserFile selectedFile;
    private string imagePreviewUrl;
    private banner newBanner = new banner();
    private IEnumerable<dropdown> dropdowns = new List<dropdown>();
    private bool isFormValid = false;
    private MudForm form;
    private string url = "http://localhost:49922/api/Banner";
    private string urlDropdown = "http://localhost:49922/api/dropdown/emp";
    private int empId;
    private string userRole;
    private bool isInitialized = false;
    private bool isLoading = false;
    private bool isLoadingIMG = false;
    private bool isLoadingProgress = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;

            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();

                    if (handler.CanReadToken(token))
                    {
                        var jwtToken = handler.ReadJwtToken(token);

                        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");

                        if (roleClaim != null)
                        {
                            userRole = roleClaim.Value;
                        }
                        else
                        {
                            Console.WriteLine("Role claim not found in the token.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi giải mã token: {ex.Message}");
                }
            }
            CheckRole();
            StateHasChanged();
        }
    }

    private void CheckRole()
    {
        if (userRole == "1")
        {
            Console.WriteLine("User is an Admin.");
        }
        else if (userRole == "2")
        {
            Console.WriteLine("User is a regular User.");
        }
        else if (userRole == "3")
        {
            Console.WriteLine("User is a regular Driver.");
        }
        else
        {
            isLoading = true;
        }
    }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Banner", href: null, icon: @Icons.Material.Outlined.Image),
        new BreadcrumbItem("Danh sách banner", href: "/getbanner", icon: @Icons.Material.Outlined.List),
        new BreadcrumbItem("Thêm mới", href: "/addbanner", icon: @Icons.Material.Filled.AddCircleOutline),
    };

    // private IEnumerable<string> BannerValidate(string title)
    // {
    //     if (string.IsNullOrWhiteSpace(title))
    //     {
    //         yield return "Vui lòng điền thông tin";
    //     }
    // }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        if (selectedFile != null)
        {
            var stream = selectedFile.OpenReadStream();
            var buffer = new byte[selectedFile.Size];
            await stream.ReadAsync(buffer, 0, buffer.Length);
            stream.Close();

            imagePreviewUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
        }
        else
        {
            Console.WriteLine("No file selected.");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            dropdowns = await httpClient.GetFromJsonAsync<List<dropdown>>(urlDropdown);
            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");
            isLoadingProgress = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            isLoadingProgress = false;
            StateHasChanged();
        }
    }

    private async Task AddBanner()
    {
        var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (!string.IsNullOrEmpty(token))
        {
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            var usernameClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "emp_id");

            if (usernameClaim != null)
            {
                empId = int.Parse(usernameClaim.Value);
            }
        }

        if (selectedFile != null)
        {
            try
            {
                isLoadingIMG = true;
                var base64Data = await GetBase64Image(selectedFile);
                var imageUrl = await js.InvokeAsync<string>("uploadImage", selectedFile.Name, base64Data);
                newBanner.img_banner = imageUrl;
                newBanner.emp_id = empId;
                if (string.IsNullOrEmpty(newBanner.title))
                {
                    newBanner.title = null; 
                }

                var response = await httpClient.PostAsJsonAsync(url, newBanner);
                if (response.IsSuccessStatusCode)
                {
                    newBanner = new banner();
                    imagePreviewUrl = null;
                    Snackbar.Add("Thêm thành công!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Lỗi khi thêm: " + response, Severity.Warning);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add("Thêm thất bại: " + ex.Message, Severity.Error);
            }
            finally
            {
                isLoadingIMG = false;
            }
        }
        else
        {
            try
            {
                newBanner.emp_id = empId;
                
                if (string.IsNullOrEmpty(newBanner.title))
                {
                    newBanner.title = null; 
                }

                var response = await httpClient.PostAsJsonAsync(url, newBanner);
                if (response.IsSuccessStatusCode)
                {
                    newBanner = new banner();
                    imagePreviewUrl = null;   
                    Snackbar.Add("Thêm thành công!", Severity.Success);
                    nv.NavigateTo("/getbanner");

                }
                else
                {
                    Snackbar.Add("Lỗi khi thêm", Severity.Warning);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add("Thêm thất bại: " + ex.Message, Severity.Error);
            }

        }
    }


    private async Task<string> GetBase64Image(IBrowserFile file)
    {
        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        var bytes = memoryStream.ToArray();
        return Convert.ToBase64String(bytes);
    }
    private async Task Cancel()
    {
        nv.NavigateTo("/getbanner");
    }

}
