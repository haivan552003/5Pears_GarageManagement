@page "/editbanner/{id:int}"
@inject HttpClient httpClient
@inject IJSRuntime js
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
<MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="pa-3 mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-0" Items="_items"></MudBreadcrumbs>
            </MudPaper>
        </MudItem>
        <MudItem xs="4" Class="mx-auto">
            <MudPaper Elevation="4" Class="pa-3">
                <MudText Typo="Typo.h6" Class="mb-5">Chỉnh sửa banner</MudText>
                <MudGrid>
                    <MudItem xs="12" Class="mx-auto">
                        <MudForm @ref="form" Style="height:auto" Class="mud-width-full">
                            @if (!string.IsNullOrEmpty(Banner.img_banner))
                            {
                                <MudImage Fluid="false" Src="@Banner.img_banner" Class="rounded-lg mb-2 w-100 mx-auto d-block" Height="260" />
                            }

                            <MudButton HtmlTag="label" For="newsImageInput" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Secondary"
                                       StartIcon="@Icons.Material.Outlined.CloudUpload"
                                       FullWidth="true" Class="mud-button-small-text">
                                Chọn hình ảnh mới
                            </MudButton>

                            <InputFile id="newsImageInput" OnChange="LoadNewsImage" accept="image/*" style="display: none;" />
                            <MudItem xs="12" Class="d-flex justify-center mt-4">
                                @if (isLoading1)
                                {
                                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
                                }
                            </MudItem>

                            <MudTextField ShrinkLabel @bind-Value="Banner.title" Label="Tiêu đề"
                                          Class="py-3"
                                          Validation="@(new Func<string, IEnumerable<string>>(BannerValidate))"
                                          Placeholder="Tên công việc" Variant="Variant.Outlined" Required="true" />

                            <MudTextField ShrinkLabel @bind-Value="Banner.fullname" Label="Người tạo"
                                          Class="py-3"
                                          Disabled="true"
                                          Placeholder="Người tạo" Variant="Variant.Outlined" Required="true" />
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary" OnClick="SubmitForm" Class="mt-3 float-end">Lưu</MudButton>

                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Cancel" Color="Color.Error" Class="mr-2 mt-3 float-end"
                                       OnClick="@Cancel">Hủy</MudButton>
                        </MudForm>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter] public int Id { get; set; }
    private IBrowserFile selectedFile;
    private string imagePreviewUrl;
    private banner Banner = new banner();
    private IEnumerable<dropdown> dropdowns = new List<dropdown>();
    private MudForm form;
    private bool isLoading1 = false;
    private string url = "http://localhost:49922/api/Banner";
    private string urlDropdown = "http://localhost:49922/api/dropdown/emp";

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Banner", href: null, icon: @Icons.Material.Outlined.Image),
        new BreadcrumbItem("Danh sách banner", href: "/getbanner", icon: @Icons.Material.Outlined.List),
        new BreadcrumbItem("Chỉnh sửa banner", href: null, icon: @Icons.Material.Filled.Edit),
    };

    private IEnumerable<string> BannerValidate(string title)
    {
        if (string.IsNullOrWhiteSpace(title))
        {
            yield return "Vui lòng điền thông tin";
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            var stream = selectedFile.OpenReadStream();
            var buffer = new byte[selectedFile.Size];
            await stream.ReadAsync(buffer, 0, buffer.Length);
            stream.Close();

            imagePreviewUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
        }
    }

    private async Task<string> GetBase64Image(IBrowserFile file)
    {
        try
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            return Convert.ToBase64String(memoryStream.ToArray());
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi xử lý hình ảnh: {ex.Message}", Severity.Error);
            return null;
        }
    }

    private async Task LoadNewsImage(InputFileChangeEventArgs e)
    {
        isLoading1 = true;
        try
        {
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"news_images/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);
                    Banner.img_banner = imageUrl;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi tải lên hình ảnh: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading1 = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            dropdowns = await httpClient.GetFromJsonAsync<List<dropdown>>(urlDropdown);
            var response = await httpClient.GetFromJsonAsync<banner>(url + "/" + Id);
            Banner = response;

            if (!string.IsNullOrEmpty(Banner.img_banner))
            {
                imagePreviewUrl = Banner.img_banner;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task EditBanner()
    {
        try
        {
            if (form.IsValid)
            {
                if (selectedFile != null)
                {
                    var base64Data = await GetBase64Image(selectedFile);
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", selectedFile.Name, base64Data);
                    Banner.img_banner = imageUrl;
                }

                var response = await httpClient.PutAsJsonAsync(url + "/" + Id, Banner);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add($"Chỉnh sửa thành công", Severity.Success);
                    navigationManager.NavigateTo("/getbanner");
                }
                else
                {
                    Snackbar.Add($"Chỉnh sửa thất bại", Severity.Warning);
                }
            }
            else
            {
                Snackbar.Add($"Chỉnh sửa thất bại", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Chỉnh sửa thất bại: {ex.Message}", Severity.Error, options =>
            {
                options.SnackbarVariant = Variant.Filled;
            });
        }
    }

    private async Task SubmitForm()
    {
        await form.Validate();
        if (form.IsValid)
        {
            await EditBanner();
        }
    }
    private async Task Cancel()
    {
        navigationManager.NavigateTo("/getbanner");
    }

}
