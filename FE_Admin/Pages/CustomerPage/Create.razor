@page "/addcustomer"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IWebHostEnvironment Environment
@inject IJSRuntime js
@using System.Text.RegularExpressions

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255); /* Màu trắng với độ mờ 50% */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Đảm bảo overlay hiển thị trên các thành phần khác */
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudImage Src="/Image/404.jpg" Alt="NOT FOUND" Elevation="0" Fluid="true" />
        </MudItem>
    </div>
}
else if (isLoadingProgress)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </MudItem>
    </div>
}
else
{
    <MudContainer MaxWidth="MaxWidth.False" Class="mt-14 pa-0">
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pa-3 mb-1" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                    <MudBreadcrumbs Class="pa-0" Items="_items"></MudBreadcrumbs>
                </MudPaper>
            </MudItem>
            <EditForm Model="@newDriver" Class="pa-3" OnValidSubmit="AddDriver">
                <MudGrid>
                    <MudItem xs="12" md="8">
                        <DataAnnotationsValidator />
                        <MudPaper Elevation="3" Class="pa-4" Style="height:584.94px;">
                            <MudText Typo="Typo.h6" Class="mb-5">Thêm khách hàng</MudText>
                            <MudGrid>
                                @*                             <MudItem xs="12" sm="6">
                            <MudTextField ShrinkLabel @bind-Value="newDriver.cus_code" For="@(() => newDriver.cus_code)" Label="Mã khách hàng" Variant="Variant.Filled" ReadOnly="true" />
                            </MudItem> *@
                                <MudItem xs="12" sm="6">
                                    <MudTextField ShrinkLabel @bind-Value="newDriver.fullname" Label="Họ và tên" Variant="Variant.Outlined" Required="true" Validation="@(new Func<string, IEnumerable<string>>(CustomerValidateFullName))" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudDatePicker @bind-Date="birthdayDate" Label="Ngày sinh" Required="true" Variant="Variant.Outlined" DateFormat="dd/MM/yyyy" MaxDate="@DateTime.Now.AddYears(-18)" Validation="@(new Func<string, IEnumerable<string>>(CustomerValidateBirthday))" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField ShrinkLabel @bind-Value="newDriver.email" Label="Email" Variant="Variant.Outlined" Required="true" Validation="@(new Func<string, Task<IEnumerable<string>>>(CustomerValidateEmail))" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField ShrinkLabel @bind-Value="newDriver.password" Label="Mật khẩu" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" Required="true" Validation="@(new Func<string, IEnumerable<string>>(CustomerValidatePassword))" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField ShrinkLabel @bind-Value="newDriver.phone_number" Label="Số điện thoại" Variant="Variant.Outlined" Validation="@(new Func<string, IEnumerable<string>>(CustomerValidatePhone))" />
                                </MudItem>

                                <MudItem xs="12" sm="6">
                                    <MudSelect @bind-Value="newDriver.gender" Label="Giới tính" Required="true" Variant="Variant.Outlined" Validation="@(new Func<string, IEnumerable<string>>(CustomerValidateGender))">
                                        <MudSelectItem Value="@((byte)0)">Nam</MudSelectItem>
                                        <MudSelectItem Value="@((byte)1)">Nữ</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField ShrinkLabel @bind-Value="newDriver.citizen_identity_number" Label="Số CCCD" Required="true" Variant="Variant.Outlined" Validation="@(new Func<string, IEnumerable<string>>(CustomerValidateCitizenIdentity))" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField ShrinkLabel @bind-Value="newDriver.driver_license_number" Label="Số bằng lái" Required="true" Variant="Variant.Outlined" Validation="@(new Func<string, IEnumerable<string>>(CustomerValidateDriverLicense))" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudSelect @bind-Value="newDriver.status" For="@(() => newDriver.status)" Label="Trạng thái" Required="true" Variant="Variant.Outlined">
                                        <MudSelectItem Value="true">Đang Hoạt động</MudSelectItem>
                                        <MudSelectItem Value="false">Ngưng hoạt động</MudSelectItem>
                                    </MudSelect>
                                </MudItem>

                            </MudGrid>
                            <MudItem xs="12" Class="d-flex justify-end mt-6">
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mr-2" OnClick="@(() => NavigationManager.NavigateTo("/getDriver"))">Hủy</MudButton>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary">Lưu</MudButton>
                            </MudItem>
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="12" md="4">
                        <MudPaper Elevation="3" Class="pa-4">
                            <MudText Typo="Typo.h6" Class="mb-4">Hình ảnh</MudText>
                            <MudGrid>
                                <MudItem xs="12">
                                    <!-- CCCD Image -->
                                    <InputFile id="citizenIdInput1" OnChange="@((e) => LoadCitizenIdImage(e, 1))" hidden accept=".jpg,.jpeg,.png" />
                                    <MudCard Elevation="0" Class="mb-4">
                                        @if (!string.IsNullOrEmpty(newDriver.citizen_identity_img1))
                                        {
                                            <MudCardMedia Image="@newDriver.citizen_identity_img1"
                                                          Height="200"
                                                          Class="rounded-lg" />
                                        }
                                        else
                                        {
                                            <MudCardMedia Class="d-flex justify-center align-center rounded-lg"
                                                          Style="height: 200px; background-color: #f5f5f5;">
                                                <MudIcon Icon="@Icons.Material.Filled.Badge"
                                                         Size="Size.Large"
                                                         Color="Color.Default" />
                                            </MudCardMedia>
                                        }
                                        <MudCardActions Class="pa-0 mt-2">
                                            <MudButton HtmlTag="label"
                                                       For="citizenIdInput1"
                                                       Variant="Variant.Filled"
                                                       Color="Color.Secondary"
                                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                                       FullWidth="true">
                                                CCCD (Trước)
                                            </MudButton>
                                        </MudCardActions>
                                        @if (isLoadingIMG)
                                        {
                                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-5" />
                                        }
                                    </MudCard>

                                    <!-- License Image -->
                                    <InputFile id="licenseInput1" OnChange="@((e) => LoadLicenseImage(e, 1))" hidden accept=".jpg,.jpeg,.png" />
                                    <MudCard Elevation="0">
                                        @if (!string.IsNullOrEmpty(newDriver.driver_license_img1))
                                        {
                                            <MudCardMedia Image="@newDriver.driver_license_img1"
                                                          Height="200"
                                                          Class="rounded-lg" />
                                        }
                                        else
                                        {
                                            <MudCardMedia Class="d-flex justify-center align-center rounded-lg"
                                                          Style="height: 200px; background-color: #f5f5f5;">
                                                <MudIcon Icon="@Icons.Material.Filled.DriveEta"
                                                         Size="Size.Large"
                                                         Color="Color.Default" />
                                            </MudCardMedia>
                                        }
                                        <MudCardActions Class="pa-0 mt-2">
                                            <MudButton HtmlTag="label"
                                                       For="licenseInput1"
                                                       Variant="Variant.Filled"
                                                       Color="Color.Secondary"
                                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                                       FullWidth="true">
                                                GPLX (Trước)
                                            </MudButton>
                                        </MudCardActions>
                                        @if (isLoadingIMG1)
                                        {
                                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-5" />
                                        }
                                    </MudCard>
                                    <!-- avt Image -->
                                    <InputFile id="avt1" OnChange="@((e) => LoadAVTImage(e, 1))" hidden accept=".jpg,.jpeg,.png" />
                                    <MudCard Elevation="0">
                                        @if (!string.IsNullOrEmpty(newDriver.img_cus))
                                        {
                                            <MudCardMedia Image="@newDriver.img_cus"
                                                          Height="200"
                                                          Class="rounded-lg" />
                                        }
                                        else
                                        {
                                            <MudCardMedia Class="d-flex justify-center align-center rounded-lg"
                                                          Style="height: 200px; background-color: #f5f5f5;">
                                                <MudIcon Icon="@Icons.Material.Filled.DriveEta"
                                                         Size="Size.Large"
                                                         Color="Color.Default" />
                                            </MudCardMedia>
                                        }
                                        <MudCardActions Class="pa-0 mt-2">
                                            <MudButton HtmlTag="label"
                                                       For="avt1"
                                                       Variant="Variant.Filled"
                                                       Color="Color.Secondary"
                                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                                       FullWidth="true">
                                                Ảnh đại diện
                                            </MudButton>
                                        </MudCardActions>
                                        @if (isLoadingIMG2)
                                        {
                                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-5" />
                                        }
                                    </MudCard>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudGrid>
    </MudContainer>
}

@code {
    private bool isUploadingCitizenImage = false;
    private bool isUploadingLicenseImage = false;
    private customers newDriver = new customers();
    private MudForm form;
    private DateTime? birthdayDate;
    private List<roles> roles = new List<roles>();
    private string roleUrl = "http://localhost:49922/api/Roles";
    private string url = "http://localhost:49922/api/Customer";
    private bool isShowPassword = false;
    private InputType PasswordInput => isShowPassword ? InputType.Text : InputType.Password;
    private string PasswordInputIcon => isShowPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    private string userRole;
    private bool isInitialized = false;
    private bool isLoading = false;
    private bool isLoadingIMG = false;
    private bool isLoadingIMG1 = false;
    private bool isLoadingIMG2 = false;
    private bool isLoadingProgress = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;

            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();

                    if (handler.CanReadToken(token))
                    {
                        var jwtToken = handler.ReadJwtToken(token);

                        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");

                        if (roleClaim != null)
                        {
                            userRole = roleClaim.Value;
                        }
                        else
                        {
                            Console.WriteLine("Role claim not found in the token.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi giải mã token: {ex.Message}");
                }
            }
            CheckRole();
            isLoadingProgress = false;
            StateHasChanged();
        }
    }

    private void CheckRole()
    {
        if (userRole == "1")
        {
            Console.WriteLine("User is an Admin.");
        }
        else if (userRole == "2")
        {
            Console.WriteLine("User is a regular User.");
        }
        else if (userRole == "3")
        {
            Console.WriteLine("User is a regular Driver.");
        }
        else
        {
            isLoading = true;
        }
    }

    private void TogglePasswordVisibility()
    {
        isShowPassword = !isShowPassword;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
        newDriver = new customers
            {
                status = true,
                gender = 0,
            };
        birthdayDate = DateTime.Now.AddYears(-18);
    }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Khách hàng", href: null, icon: @Icons.Material.Outlined.SupervisedUserCircle),
        new BreadcrumbItem("Danh sách khách hàng", href: "/getcustomer", icon: @Icons.Material.Outlined.List),
        new BreadcrumbItem("Thêm mới", href: "/addcustomer", icon: @Icons.Material.Outlined.AddCircleOutline),
    };

    private async Task LoadRoles()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<roles>>(roleUrl);
            if (response != null)
            {
                roles = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải danh sách vai trò: {ex.Message}", Severity.Error);
        }
    }

    private async Task<string> GetBase64Image(IBrowserFile file)
    {
        try
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            return Convert.ToBase64String(buffer);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi chuyển đổi hình ảnh: {ex.Message}", Severity.Error);
            return null;
        }
    }

    private async Task LoadCitizenIdImage(InputFileChangeEventArgs e, int index)
    {
        if (e.File != null)
        {
            isLoadingIMG = true;
            StateHasChanged();
            var base64Image = await GetBase64Image(e.File);
            if (!string.IsNullOrEmpty(base64Image))
            {
                if (index == 1)
                {
                    newDriver.citizen_identity_img1 = await UploadImageToFirebase($"citizen_id_front_{newDriver.cus_code}", base64Image);
                }
            }
            isLoadingIMG = false;
            StateHasChanged();
        }
    }

    private async Task LoadLicenseImage(InputFileChangeEventArgs e, int index)
    {
        if (e.File != null)
        {
            isLoadingIMG1 = true;
            StateHasChanged();
            var base64Image = await GetBase64Image(e.File);
            if (!string.IsNullOrEmpty(base64Image))
            {
                if (index == 1)
                {
                    newDriver.driver_license_img1 = await UploadImageToFirebase($"driver_license_front_{newDriver.cus_code}", base64Image);
                }
            }
            isLoadingIMG1 = false;
            StateHasChanged();
        }
    }

    private async Task LoadAVTImage(InputFileChangeEventArgs e, int index)
    {
        if (e.File != null)
        {
            isLoadingIMG2 = true;
            StateHasChanged();
            var base64Image = await GetBase64Image(e.File);
            if (!string.IsNullOrEmpty(base64Image))
            {
                if (index == 1)
                {
                    newDriver.img_cus = await UploadImageToFirebase($"avatar_{newDriver.cus_code}", base64Image);
                }
            }
            isLoadingIMG2 = false;
            StateHasChanged();
        }
    }


    private async Task<string> UploadImageToFirebase(string fileName, string base64String)
    {
        try
        {
            var response = await js.InvokeAsync<string>("uploadImage", fileName, base64String);
            return response;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải ảnh lên: {ex.Message}", Severity.Error);
            return null;
        }
    }

    private async Task AddDriver()
    {
        try
        {
            if (birthdayDate.HasValue)
            {
                newDriver.birthday = birthdayDate.Value;
            }
            var response = await httpClient.PostAsJsonAsync("http://localhost:49922/api/Customer", newDriver);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Thêm khách hàng thành công!", Severity.Success);
                NavigationManager.NavigateTo("/getcustomer");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Thêm khách hàng không thành công: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi thêm khách hàng: {ex.Message}", Severity.Error);
        }
    }
    // Validate
    private async Task<bool> IsEmailExists(string email)
    {
        var response = await httpClient.GetAsync($"{url}/exists?email={email}");
        return response.IsSuccessStatusCode && bool.Parse(await response.Content.ReadAsStringAsync());
    }
    private async Task<IEnumerable<string>> CustomerValidateEmail(string email)
    {
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(email))
        {
            errors.Add("Vui lòng điền email.");
        }
        else if (email.Length < 10 || email.Length > 150)
        {
            errors.Add("Email không hợp lệ.");
        }
        else if (!Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$", RegexOptions.IgnoreCase))
        {
            errors.Add("Email không đúng định dạng.");
        }
        else
        {
            if (await IsEmailExists(email))
            {
                errors.Add("Email đã tồn tại trong cơ sở dữ liệu.");
            }
        }

        return errors;
    }

    private IEnumerable<string> CustomerValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
        {
            yield return "Vui lòng điền mật khẩu.";
        }
        else if (password.Length < 8 || password.Length > 15)
        {
            yield return "Mật khẩu không hợp lệ.";
        }
        else if (!password.Any(char.IsUpper) || !password.Any(char.IsLower) ||
                 !password.Any(char.IsDigit) || !password.Any(ch => "!@#$%^&*()_+[]{}|;':\",.<>?/`~".Contains(ch)))
        {
            yield return "Mật khẩu phải chứa ít nhất một chữ hoa, một chữ thường, một số và một ký tự đặc biệt.";
        }
    }

    private IEnumerable<string> CustomerValidateFullName(string fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName))
        {
            yield return "Vui lòng điền họ và tên.";
        }
        else if (fullName.Length < 5 || fullName.Length > 150)
        {
            yield return "Họ và tên không hợp lệ.";
        }
        else if (fullName.Any(ch => !char.IsLetter(ch) && !char.IsWhiteSpace(ch)))
        {
            yield return "Họ và tên không được chứa ký tự đặc biệt.";
        }
    }

    private IEnumerable<string> CustomerValidatePhone(string phone)
    {
        if (string.IsNullOrWhiteSpace(phone))
        {
            yield return "Vui lòng điền số điện thoại.";
        }
        else if (phone.Length != 10 || !phone.All(char.IsDigit))
        {
            yield return "Số điện thoại không hợp lệ";
        }
    }

    private IEnumerable<string> CustomerValidateBirthday(string birthday)
    {
        if (string.IsNullOrWhiteSpace(birthday))
        {
            yield return "Vui lòng chọn ngày sinh.";
        }
    }

    private IEnumerable<string> CustomerValidateGender(string gender)
    {
        if (string.IsNullOrWhiteSpace(gender))
        {
            yield return "Vui lòng chọn giới tính.";
        }
    }

    private IEnumerable<string> CustomerValidateCitizenIdentity(string citizenIdentityNumber)
    {
        if (string.IsNullOrWhiteSpace(citizenIdentityNumber))
        {
            yield return "Số CCCD không được bỏ trống.";
        }
        else if (citizenIdentityNumber.Length != 12)
        {
            yield return "Số CCCD không hợp lệ.";
        }
    }

    private IEnumerable<string> CustomerValidateDriverLicense(string DriverLicenseNumber)
    {
        if (string.IsNullOrWhiteSpace(DriverLicenseNumber))
        {
            yield return "Số bằng lái không được bỏ trống.";
        }
        else if (DriverLicenseNumber.Length != 12)
        {
            yield return "Số bằng lái không hợp lệ.";
        }
    }

    private IEnumerable<string> CustomerValidateStatus(string status)
    {
        if (string.IsNullOrWhiteSpace(status))
        {
            yield return "Vui lòng chọn trạng thái.";
        }
    }

}
