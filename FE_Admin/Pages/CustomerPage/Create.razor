@page "/addcustomer"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IWebHostEnvironment Environment
@inject IJSRuntime js

<MudContainer MaxWidth="MaxWidth.False" Class="mt-14 pa-0">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="pa-3 mb-1" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-0" Items="_items"></MudBreadcrumbs>
            </MudPaper>
        </MudItem>
        <EditForm Model="@newDriver" Class="pa-3" OnValidSubmit="AddDriver">
            <MudGrid>
                <MudItem xs="12" md="12">
                    <DataAnnotationsValidator />
                    <MudPaper Elevation="3" Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-5">Thêm khách hàng</MudText>
                        <MudGrid>
                            <MudItem xs="12" sm="6">
                                <MudTextField ShrinkLabel @bind-Value="newDriver.cus_code" For="@(() => newDriver.cus_code)" Label="Mã khách hàng" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField ShrinkLabel @bind-Value="newDriver.email" For="@(() => newDriver.email)" Label="Email" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField ShrinkLabel @bind-Value="newDriver.password" For="@(() => newDriver.password)" Label="Mật khẩu" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField ShrinkLabel @bind-Value="newDriver.fullname" For="@(() => newDriver.fullname)" Label="Họ và tên" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField ShrinkLabel @bind-Value="newDriver.phone_number" For="@(() => newDriver.phone_number)" Label="Số điện thoại" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudDatePicker @bind-Date="birthdayDate" For="@(() => newDriver.birthday)" Label="Ngày sinh" Required="true" RequiredError="Vui lòng chọn ngày sinh" Variant="Variant.Outlined" DateFormat="dd/MM/yyyy" MaxDate="@DateTime.Now.AddYears(-18)" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudSelect @bind-Value="newDriver.gender" For="@(() => newDriver.gender)" Label="Giới tính" Required="true" RequiredError="Vui lòng chọn giới tính" Variant="Variant.Outlined">
                                    <MudSelectItem Value="@((byte)0)">Nam</MudSelectItem>
                                    <MudSelectItem Value="@((byte)1)">Nữ</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField ShrinkLabel @bind-Value="newDriver.citizen_identity_number" For="@(() => newDriver.citizen_identity_number)" Label="Số CCCD" Required="true" RequiredError="Vui lòng nhập số CCCD" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField ShrinkLabel @bind-Value="newDriver.driver_license_number" For="@(() => newDriver.driver_license_number)" Label="Số bằng lái" Required="true" RequiredError="Vui lòng nhập số bằng lái" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudSelect @bind-Value="newDriver.id_role" Label="Vai trò" Variant="Variant.Outlined" Required="true">
                                    @foreach (var roless in roles)
                                    {
                                        <MudSelectItem Value="@roless.id">@roless.name</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudSelect @bind-Value="newDriver.status" For="@(() => newDriver.status)" Label="Trạng thái" Required="true" Variant="Variant.Outlined">
                                    <MudSelectItem Value="true">Đang Hoạt động</MudSelectItem>
                                    <MudSelectItem Value="false">Ngưng hoạt động</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                           
                        </MudGrid>
                        <MudItem xs="12" Class="d-flex justify-end mt-6">
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mr-2" OnClick="@(() => NavigationManager.NavigateTo("/getDriver"))">Hủy</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary">Lưu</MudButton>
                        </MudItem>
                    </MudPaper>
                </MudItem>

                <MudItem xs="12" md="4">
                    <MudPaper Elevation="3" Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-4">Hình ảnh</MudText>
                        <MudGrid>
                            <MudItem xs="6">
                                <InputFile id="citizenIdInput1" OnChange="@((e) => LoadCitizenIdImage(e, 1))" hidden accept=".jpg,.jpeg,.png" />
                                <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.CloudUpload" for="citizenIdInput1" FullWidth="true" Class="mud-button-small-text">CCCD (Trước)</MudButton>
                                <ValidationMessage For="@(() => newDriver.citizen_identity_img1)" />
                                @if (!string.IsNullOrEmpty(newDriver.citizen_identity_img1))
                                {
                                    <MudImage Src="@newDriver.citizen_identity_img1" Alt="CCCD (Mặt trước)" Width="100" Height="100" ObjectFit="ObjectFit.Cover" Class="mt-2" />
                                }
                            </MudItem>
                            <MudItem xs="6">
                                <InputFile id="licenseInput1" OnChange="@((e) => LoadLicenseImage(e, 1))" hidden accept=".jpg,.jpeg,.png" />
                                <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.CloudUpload" for="licenseInput1" FullWidth="true" Class="mud-button-small-text">GPLX (Trước)</MudButton>
                                <ValidationMessage For="@(() => newDriver.driver_license_img1)" />
                                @if (!string.IsNullOrEmpty(newDriver.driver_license_img1))
                                {
                                    <MudImage Src="@newDriver.driver_license_img1" Alt="Bằng lái (Mặt trước)" Width="100" Height="100" ObjectFit="ObjectFit.Cover" Class="mt-2" />
                                }
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudGrid>
</MudContainer>

@code {
    private customers newDriver = new customers();
    private MudForm form;
    private DateTime? birthdayDate;
    private List<roles> roles = new List<roles>();
    private string roleUrl = "http://localhost:49922/api/Roles";

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
        newDriver = new customers
            {
                status = true,
                gender = 0,
            };
        birthdayDate = DateTime.Now.AddYears(-18);
    }

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Khách hàng", href: null, icon: @Icons.Material.Outlined.SupervisedUserCircle),
        new BreadcrumbItem("Danh sách khách hàng", href: "/getcustomer", icon: @Icons.Material.Outlined.List),
        new BreadcrumbItem("Thêm mới", href: "/addcustomer", icon: @Icons.Material.Outlined.AddCircleOutline),
    };

    private async Task LoadRoles()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<roles>>(roleUrl);
            if (response != null)
            {
                roles = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải danh sách vai trò: {ex.Message}", Severity.Error);
        }
    }

    private async Task<string> GetBase64Image(IBrowserFile file)
    {
        try
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);
            return Convert.ToBase64String(buffer);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi chuyển đổi hình ảnh: {ex.Message}", Severity.Error);
            return null;
        }
    }

    private async Task LoadCitizenIdImage(InputFileChangeEventArgs e, int index)
    {
        if (e.File != null)
        {
            var base64Image = await GetBase64Image(e.File);
            if (!string.IsNullOrEmpty(base64Image))
            {
                if (index == 1)
                {
                    newDriver.citizen_identity_img1 = await UploadImageToFirebase($"citizen_id_front_{newDriver.cus_code}", base64Image);
                }
            }
        }
    }

    private async Task LoadLicenseImage(InputFileChangeEventArgs e, int index)
    {
        if (e.File != null)
        {
            var base64Image = await GetBase64Image(e.File);
            if (!string.IsNullOrEmpty(base64Image))
            {
                if (index == 1)
                {
                    newDriver.driver_license_img1 = await UploadImageToFirebase($"driver_license_front_{newDriver.cus_code}", base64Image);
                }
            }
        }
    }

    private async Task<string> UploadImageToFirebase(string fileName, string base64String)
    {
        try
        {
            var response = await js.InvokeAsync<string>("uploadImage", fileName, base64String);
            return response; // Trả về URL tải xuống
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải ảnh lên: {ex.Message}", Severity.Error);
            return null;
        }
    }

    private async Task AddDriver()
    {
        try
        {
            if (birthdayDate.HasValue)
            {
                newDriver.birthday = birthdayDate.Value;
            }
            var response = await httpClient.PostAsJsonAsync("http://localhost:49922/api/Customer", newDriver);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Thêm khách hàng thành công!", Severity.Success);
                NavigationManager.NavigateTo("/getcustomer");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Thêm khách hàng không thành công: {errorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi thêm khách hàng: {ex.Message}", Severity.Error);
        }
    }
}
