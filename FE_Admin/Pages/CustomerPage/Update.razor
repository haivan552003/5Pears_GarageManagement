@page "/edit_customertask/{customerId:int}"
@inject HttpClient httpClient
@inject IJSRuntime js
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment


<MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
    @if (showSuccess)
    {
        <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Style="position:fixed; top:60px; right:20px; z-index:9999;">
            Cập nhật thành công
        </MudAlert>
    }
    else if (showError)
    {
        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Style="position:fixed; top:60px; right:20px; z-index:9999;">
            Cập nhật thất bại
        </MudAlert>
    }

    <!-- Form Cập nhật công việc -->
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="pa-3 mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-0" Items="_items"></MudBreadcrumbs>
            </MudPaper>
        </MudItem>
        <MudItem xs="8" Class="mx-auto">
            <MudPaper Elevation="0" Class="pa-3">
                <MudGrid>
                    <MudItem xs="7" md="8">
                        @*                     <DataAnnotationsValidator />
                        *@                    <MudPaper Elevation="3" Class="pa-4">
                            <MudText Typo="Typo.h6" Class="mb-5">Thêm tài xế</MudText>
                            <MudGrid>
                                <MudItem xs="12" sm="6">
                                    <MudTextField ShrinkLabel @bind-Value="newRoleTask.cus_code" For="@(() => newRoleTask.cus_code)"
                                                  Label="Mã khách hàng"
                                                  Variant="Variant.Outlined" />
                                </MudItem>

                                <MudItem xs="12" sm="6">
                                    <MudTextField ShrinkLabel @bind-Value="newRoleTask.email" For="@(() => newRoleTask.email)"
                                                  Label="Email"
                                                  Variant="Variant.Outlined" />
                                </MudItem>

                                <MudItem xs="12" sm="6">
                                    <MudTextField ShrinkLabel @bind-Value="newRoleTask.password" For="@(() => newRoleTask.password)"
                                                  Label="Mật khẩu"
                                                  Variant="Variant.Outlined" />
                                </MudItem>

                                <MudItem xs="12" sm="6">
                                    <MudTextField ShrinkLabel @bind-Value="newRoleTask.fullname" For="@(() => newRoleTask.fullname)"
                                                  Label="Họ và tên"
                                                  Variant="Variant.Outlined" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField ShrinkLabel @bind-Value="newRoleTask.phone_number" For="@(() => newRoleTask.phone_number)"
                                                  Label="Số điện thoại"
                                                  Variant="Variant.Outlined" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudDatePicker @bind-Date="birthdayDate" For="@(() => newRoleTask.birthday)"
                                                   Label="Ngày sinh" Required="true" RequiredError="Vui lòng chọn ngày sinh"
                                                   Variant="Variant.Outlined" DateFormat="dd/MM/yyyy"
                                                   MaxDate="@DateTime.Now.AddYears(-18)" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudSelect @bind-Value="newRoleTask.gender" For="@(() => newRoleTask.gender)"
                                               Label="Giới tính" Required="true" RequiredError="Vui lòng chọn giới tính"
                                               Variant="Variant.Outlined">
                                        <MudSelectItem Value="@((byte)0)">Nam</MudSelectItem>
                                        <MudSelectItem Value="@((byte)1)">Nữ</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField ShrinkLabel @bind-Value="newRoleTask.citizen_identity_number" For="@(() => newRoleTask.citizen_identity_number)"
                                                  Label="Số CCCD" Required="true" RequiredError="Vui lòng nhập số CCCD"
                                                  Variant="Variant.Outlined" />
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudTextField ShrinkLabel @bind-Value="newRoleTask.driver_license_number" For="@(() => newRoleTask.driver_license_number)"
                                                  Label="Số bằng lái" Required="true" RequiredError="Vui lòng nhập số bằng lái"
                                                  Variant="Variant.Outlined" />
                                </MudItem>


                                <MudItem xs="12" sm="6">
                                    <MudSelect @bind-Value="newRoleTask.status" For="@(() => newRoleTask.status)"
                                               Label="Trạng thái" Required="true" Variant="Variant.Outlined">
                                        <MudSelectItem Value="true">Hoạt động</MudSelectItem>
                                        <MudSelectItem Value="false">Không hoạt động</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudSelect @bind-Value="newRoleTask.id_role" Label="Vai trò" Required="true" Variant="Variant.Outlined">
                                        @if (roles != null)
                                        {
                                            @foreach (var role in roles)
                                            {
                                                <MudSelectItem Value="@role.id">@role.name</MudSelectItem>
                                            }
                                        }
                                    </MudSelect>


                                </MudItem>

                            </MudGrid>
@*                             <MudItem xs="12" Class="d-flex justify-end mt-6">
                                <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mr-2"
                                           OnClick="@(() => NavigationManager.NavigateTo("/getDriver"))">Hủy</MudButton>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                                           StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary">Lưu</MudButton>
                            </MudItem> *@
                        </MudPaper>
                    </MudItem>

                    <MudItem xs="5" md="4">
                        <MudPaper Elevation="3" Class="pa-4">
                            <MudText Typo="Typo.h6" Class="mb-4">Hình ảnh</MudText>
                            <MudGrid>
                                <MudItem xs="6">
                                    <InputFile id="citizenIdInput1" OnChange="@((e) => LoadCitizenIdImage(e, 1))"
                                               hidden accept=".jpg,.jpeg,.png" />
                                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Secondary"
                                               StartIcon="@Icons.Material.Filled.CloudUpload" for="citizenIdInput1"
                                               FullWidth="true" Class="mud-button-small-text">
                                        CCCD (Trước)
                                    </MudButton>
                                    @if (!string.IsNullOrEmpty(newRoleTask.citizen_identity_img1))
                                    {
                                        <MudImage Src="@newRoleTask.citizen_identity_img1" Alt="CCCD (Trước)" Width="100" Height="100"
                                                  ObjectFit="ObjectFit.Cover" Class="mt-2" />
                                    }
                                </MudItem>

                                <MudItem xs="6">
                                    <InputFile id="licenseInput1" OnChange="@((e) => LoadLicenseImage(e, 1))"
                                               hidden accept=".jpg,.jpeg,.png" />
                                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Secondary"
                                               StartIcon="@Icons.Material.Filled.CloudUpload" for="licenseInput1"
                                               FullWidth="true" Class="mud-button-small-text">
                                        GPLX (Trước)
                                    </MudButton>
                                    @if (!string.IsNullOrEmpty(newRoleTask.driver_license_img1))
                                    {
                                        <MudImage Src="@newRoleTask.driver_license_img1" Alt="GPLX (Trước)" Width="100" Height="100"
                                                  ObjectFit="ObjectFit.Cover" Class="mt-2" />
                                    }
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                </MudGrid>

            </MudPaper>
        </MudItem>

        <!-- Form Cập nhật địa chỉ khách hàng -->
        <MudItem xs="4" Class="mx-auto">
            <MudPaper Elevation="0" Class="pa-3">
                <MudItem xs="12">
                    <MudPaper Elevation="4" Class="p-4">
                        <MudText Typo="Typo.h6" Class="mb-5">Cập nhật địa chỉ khách hàng</MudText>

                        @foreach (var address in customerAddresses)
                        {
                            <MudForm @ref="formAddress" @bind-IsValid="isFormValid" Style="height:auto">
                                <MudTextField ShrinkLabel @bind-Value="address.address" Label="Địa chỉ" Placeholder="Địa chỉ" Variant="Variant.Outlined" Required="true" />
                                <MudTextField ShrinkLabel @bind-Value="address.id_cus" Label="ID Khách Hàng" Placeholder="ID Khách Hàng" Variant="Variant.Outlined" Disabled="true" />
                                <MudTextField ShrinkLabel @bind-Value="address.type" Label="Loại" Placeholder="Loại" Variant="Variant.Outlined" Required="true" />
                                <MudSelect @bind-Value="address.status" Label="Trạng thái" Required="true">
                                    <MudSelectItem Value="true">Đang hoạt động</MudSelectItem>
                                    <MudSelectItem Value="false">Ngưng hoạt động</MudSelectItem>
                                </MudSelect>
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary" OnClick="() => UpdateAddress(address)" Class="mt-3">Cập nhật</MudButton>
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="() => OpenDeleteDialog(address)" Class="mt-3">Xóa</MudButton>
                            </MudForm>
                        }
                    </MudPaper>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Add" Color="Color.Secondary" OnClick="OpenAddAddressDialog" Class="mt-3">Thêm</MudButton>

                </MudItem>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <!-- Nút Cập nhật cho cả hai form -->
    <MudItem xs="12" Class="mx-auto">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary" OnClick="UpdateData" Class="mt-3">Cập nhật</MudButton>
    </MudItem>
</MudContainer>
<MudDialog @bind-IsVisible="isDialogVisible" MaxWidth="MaxWidth.Medium">
    <DialogContent>
        <MudTextField ShrinkLabel @bind-Value="newAddress.address" Label="Địa chỉ" Placeholder="Địa chỉ" Variant="Variant.Outlined" Required="true" />
        <MudTextField ShrinkLabel @bind-Value="newAddress.type" Label="Loại" Placeholder="Loại" Variant="Variant.Outlined" Required="true" />
        <MudSelect @bind-Value="newAddress.status" Label="Trạng thái" Required="true">
            <MudSelectItem Value="true">Đang hoạt động</MudSelectItem>
            <MudSelectItem Value="false">Ngưng hoạt động</MudSelectItem>
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewAddress">Lưu</MudButton>
        <MudButton Variant="Variant.Text" OnClick="CloseDialog">Hủy</MudButton>
    </DialogActions>
</MudDialog>



@code {
    [Parameter] public int customerId { get; set; } // Lấy ID từ URL
    private bool isDialogVisible = false; // Hiển thị dialog
    private cus_address newAddress = new cus_address();
    private customers newRoleTask = new customers();
    private List<cus_address> customerAddresses = new List<cus_address>(); // List to hold multiple addresses
    private bool isFormValid = false;
    private bool showSuccess = false;
    private bool showError = false;
    private DateTime? birthdayDate;
    private MudForm form;
    private MudForm formAddress; // Form for customer address
    private string url = "http://localhost:49922/api/Customer";
    private string roleUrl = "http://localhost:49922/api/Roles";
    private string addressUrl = "http://localhost:49922/api/Cus_Address"; // API for addresses
    private List<roles> roles = new List<roles>(); // List of roles
    private string roleName;
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Khách hàng", href: "/getcustomer", icon: @Icons.Material.Outlined.WorkOutline),
        new BreadcrumbItem("Danh sách khách hàng", href: "/getcustomer", icon: @Icons.Material.Outlined.List),
        new BreadcrumbItem("Cập nhật", href: "/edit_customertask", icon: @Icons.Material.Filled.Edit),
    };

    private void OpenAddAddressDialog()
    {
        isDialogVisible = true;
    }

    private async Task LoadImage(InputFileChangeEventArgs e, string folder, Action<string> setUrl)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                // Convert file to base64
                var base64String = await ConvertFileToBase64(file);

                // Generate unique filename
                var fileExtension = Path.GetExtension(file.Name);
                var fileName = $"{folder}/{Guid.NewGuid()}{fileExtension}";

                // Call Firebase upload function through JS interop
                var downloadUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64String);

                if (!string.IsNullOrEmpty(downloadUrl))
                {
                    setUrl(downloadUrl);
                    StateHasChanged();
                    Snackbar.Add("Tải ảnh lên thành công!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Không thể tải ảnh lên.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải ảnh: {ex.Message}", Severity.Error);
        }
    }
    private async Task<string> ConvertFileToBase64(IBrowserFile file)
    {
        using var ms = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(ms);
        return Convert.ToBase64String(ms.ToArray());
    }

    private async Task LoadExistingImages()
    {
        try
        {
            if (!string.IsNullOrEmpty(newRoleTask.citizen_identity_img1))
            {
                var citizenUrl = await js.InvokeAsync<string>("getImageUrl", newRoleTask.citizen_identity_img1);
                newRoleTask.citizen_identity_img1 = citizenUrl;
            }

            if (!string.IsNullOrEmpty(newRoleTask.driver_license_img1))
            {
                var licenseUrl = await js.InvokeAsync<string>("getImageUrl", newRoleTask.driver_license_img1);
                newRoleTask.driver_license_img1 = licenseUrl;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải ảnh: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadCitizenIdImage(InputFileChangeEventArgs e, int imageNumber)
    {
        await LoadImage(e, "citizen_id_images", (url) =>
        {
            if (imageNumber == 1)
            {
                newRoleTask.citizen_identity_img1 = url;
            }
        });
    }

    private async Task LoadLicenseImage(InputFileChangeEventArgs e, int imageNumber)
    {
        await LoadImage(e, "license_images", (url) =>
        {
            if (imageNumber == 1)
            {
                newRoleTask.driver_license_img1 = url;
            }
        });
    }
    // Đóng dialog
    private void CloseDialog()
    {
        isDialogVisible = false;
    }

        // ... các biến khác
        private string selectedRoleName; // Biến để lưu tên vai trò đã chọn

        protected override async Task OnInitializedAsync()
        {
            // Tải thông tin khách hàng
            var response = await httpClient.GetFromJsonAsync<customers>($"{url}/{customerId}");
            if (response != null)
            {
                newRoleTask = response;
                birthdayDate = newRoleTask.birthday; // Gán ngày sinh
                await LoadExistingImages(); // Tải ảnh từ Firebase

            }

            // Tải danh sách vai trò
            roles = await httpClient.GetFromJsonAsync<List<roles>>(roleUrl);

            // Tìm vai trò theo id và gán tên
            var selectedRole = roles.FirstOrDefault(role => role.id == newRoleTask.id_role);
            if (selectedRole != null)
            {
                selectedRoleName = selectedRole.name; // Gán tên vai trò vào biến
                newRoleTask.id_role = selectedRole.id; // Gán id_role để hiển thị trên MudSelect
            }

            // Tải địa chỉ khách hàng
            await LoadCustomerAddress();
        }

        private void OnRoleChange(ChangeEventArgs e)
        {
            var selectedRoleId = Convert.ToInt32(e.Value);
            var selectedRole = roles.FirstOrDefault(role => role.id == selectedRoleId);
            selectedRoleName = selectedRole?.name ?? "Không tìm thấy vai trò"; // Gán tên vai trò đã chọn

            // Gán lại id_role
            newRoleTask.id_role = selectedRoleId;
        }


    private async Task LoadRoles()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<roles>>(roleUrl);
            if (response != null)
            {
                roles = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải danh sách vai trò: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadCustomerAddress()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<cus_address>>($"{addressUrl}/{customerId}");
            if (response != null)
            {
                customerAddresses = response; // Store multiple addresses
            }
        }
        catch (Exception ex)
        {
        }
    }

    private async Task UpdateData()
    {
        try
        {
            newRoleTask.birthday = birthdayDate.Value; // Set birthday before sending data
            var response = await httpClient.PutAsJsonAsync($"{url}/{newRoleTask.Id}", newRoleTask);
            if (response.IsSuccessStatusCode)
            {
                showSuccess = true;
            }
            else
            {
                showError = true;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi cập nhật thông tin: {ex.Message}", Severity.Error);
        }
    }

    private async Task UpdateAddress(cus_address address)
    {
        address.id_cus = customerId; // Ensure the id_cus is correctly assigned

        var response = await httpClient.PutAsJsonAsync($"{addressUrl}/{address.id}", address);
        if (response.IsSuccessStatusCode)
        {
            showSuccess = true;
        }
        else
        {
            showError = true;
        }
    }
    private async Task AddNewAddress()
    {
        newAddress.id_cus = customerId; // Gán ID khách hàng
        var response = await httpClient.PostAsJsonAsync($"{addressUrl}", newAddress);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Địa chỉ mới đã được thêm.", Severity.Success);
            // Điều hướng đến trang getcus_addresstask với tham số thông báo
            NavigationManager.NavigateTo("/getcus_addresstask");
        }
        else
        {
            Snackbar.Add("Lỗi khi thêm địa chỉ mới.", Severity.Error);
        }

        newAddress = new cus_address(); // Reset form
        CloseDialog(); // Đóng modal
    }

    private async Task OpenDeleteDialog(cus_address address)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Bạn có chắc chắn muốn xóa địa chỉ { address.address}?" },
            { "ButtonText", "Xóa" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<DeleteDialog>("Xác nhận xóa", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DeleteAddress(address.id);
        }
    }

    // Hàm thực hiện việc xóa địa chỉ
    private async Task DeleteAddress(int id)
    {
        var response = await httpClient.DeleteAsync($"{addressUrl}/{id}");
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Xóa địa chỉ thành công!", Severity.Success);
            customerAddresses.RemoveAll(x => x.id == id);
        }
        else
        {
            Snackbar.Add("Xóa địa chỉ thất bại!", Severity.Error);
        }
    }

}
