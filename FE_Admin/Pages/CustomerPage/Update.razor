@page "/edit_customertask/{customerId:int}"
@inject HttpClient httpClient
@inject IJSRuntime js
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255); /* Màu trắng với độ mờ 50% */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Đảm bảo overlay hiển thị trên các thành phần khác */
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudImage Src="/Image/404.jpg" Alt="NOT FOUND" Elevation="0" Fluid="true" />
        </MudItem>
    </div>
}
else if (isLoadingProgress)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </MudItem>
    </div>
}
else
{
    <MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">


        <!-- Form Cập nhật công việc -->
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pa-3 mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                    <MudBreadcrumbs Class="pa-0" Items="_items"></MudBreadcrumbs>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="12">
                <MudPaper Elevation="0" Class="pa-3">
                    <MudGrid>
                        <MudItem xs="12" md="12">
                            @*                     <DataAnnotationsValidator />
                        *@                    <MudPaper Elevation="3" Class="pa-4">
                                <MudText Typo="Typo.h6" Class="mb-5">Chỉnh sửa khách hàng</MudText>
                                <MudGrid>
                                    <MudItem xs="12" sm="6">
                                        <MudTextField ShrinkLabel @bind-Value="newRoleTask.cus_code" For="@(() => newRoleTask.cus_code)"
                                                      Label="Mã khách hàng"
                                                      Variant="Variant.Outlined"
                                                      ReadOnly="true" Disabled />
                                    </MudItem>

                                    <MudItem xs="12" sm="6">
                                        <MudTextField ShrinkLabel @bind-Value="newRoleTask.email" For="@(() => newRoleTask.email)"
                                                      Label="Email"
                                                      Variant="Variant.Outlined"
                                                      Validation="@(new Func<string, Task<IEnumerable<string>>>(CustomerValidateEmail))" />
                                    </MudItem>

                                    <MudItem xs="12" sm="6">
                                         <MudTextField @bind-Value="newRoleTask.password"
                                                  Label="Mật khẩu"
                                                  Required="true"
                                                  RequiredError="Vui lòng nhập mật khẩu"
                                                  Variant="Variant.Outlined"
                                                  InputType="@PasswordInput"
                                                  Adornment="Adornment.End"
                                                  AdornmentIcon="@PasswordInputIcon"
                                                  OnAdornmentClick="TogglePasswordVisibility"
                                                  Validation="@(new Func<string, IEnumerable<string>>(CustomerValidatePassword))"
                                                  Immediate="true"
                                                  Placeholder="Mật khẩu" />
                                    </MudItem>

                                    <MudItem xs="12" sm="6">
                                        <MudTextField ShrinkLabel @bind-Value="newRoleTask.fullname" For="@(() => newRoleTask.fullname)"
                                                      Label="Họ và tên"
                                                      Variant="Variant.Outlined"
                                                      Validation="@(new Func<string, IEnumerable<string>>(CustomerValidateFullName))" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudTextField ShrinkLabel @bind-Value="newRoleTask.phone_number" For="@(() => newRoleTask.phone_number)"
                                                      Label="Số điện thoại"
                                                      Variant="Variant.Outlined"
                                                      Validation="@(new Func<string, IEnumerable<string>>(CustomerValidatePhone))" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudDatePicker @bind-Date="birthdayDate" For="@(() => newRoleTask.birthday)"
                                                       Label="Ngày sinh" Required="true" RequiredError="Vui lòng chọn ngày sinh"
                                                       Variant="Variant.Outlined" DateFormat="dd/MM/yyyy"
                                                       MaxDate="@DateTime.Now"
                                                       Validation="@(new Func<string, IEnumerable<string>>(CustomerValidateBirthday))" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudSelect @bind-Value="newRoleTask.gender" For="@(() => newRoleTask.gender)"
                                                   Label="Giới tính" Required="true" RequiredError="Vui lòng chọn giới tính"
                                                   Variant="Variant.Outlined" Validation="@(new Func<string, IEnumerable<string>>(CustomerValidateGender))">
                                            <MudSelectItem Value="@((byte)0)">Nam</MudSelectItem>
                                            <MudSelectItem Value="@((byte)1)">Nữ</MudSelectItem>
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudTextField ShrinkLabel @bind-Value="newRoleTask.citizen_identity_number" For="@(() => newRoleTask.citizen_identity_number)"
                                                      Label="Số CCCD" Required="true" RequiredError="Vui lòng nhập số CCCD"
                                                      Variant="Variant.Outlined"
                                                      Validation="@(new Func<string, IEnumerable<string>>(CustomerValidateCitizenIdentity))" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6">
                                        <MudTextField ShrinkLabel @bind-Value="newRoleTask.driver_license_number" For="@(() => newRoleTask.driver_license_number)"
                                                      Label="Số bằng lái" Required="true" RequiredError="Vui lòng nhập số bằng lái"
                                                      Variant="Variant.Outlined"
                                                      Validation="@(new Func<string, IEnumerable<string>>(CustomerValidateDriverLicense))" />
                                    </MudItem>



                                    <MudItem xs="12" sm="6">
                                        <MudSelect @bind-Value="newRoleTask.status" For="@(() => newRoleTask.status)"
                                                   Label="Trạng thái" Required="true" Variant="Variant.Outlined" Validation="@(new Func<string, IEnumerable<string>>(CustomerValidateStatus))">
                                            <MudSelectItem Value="true">Hoạt động</MudSelectItem>
                                            <MudSelectItem Value="false">Không hoạt động</MudSelectItem>
                                        </MudSelect>
                                    </MudItem>


                                </MudGrid>
                                @*                             <MudItem xs="12" Class="d-flex justify-end mt-6">
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mr-2"
                            OnClick="@(() => NavigationManager.NavigateTo("/getDriver"))">Hủy</MudButton>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                            StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary">Lưu</MudButton>
                            </MudItem> *@
                            </MudPaper>
                        </MudItem>

                        <MudItem xs="12" md="12">
                            <MudPaper Elevation="3" Class="pa-4">
                                <MudText Typo="Typo.h6" Class="mb-4">Hình ảnh</MudText>
                                <MudGrid>
                                    <MudItem xs="4">
                                        <InputFile id="citizenIdInput1" OnChange="@((e) => LoadCitizenIdImage(e, 1))"
                                                   hidden accept=".jpg,.jpeg,.png" />
                                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Secondary"
                                                   StartIcon="@Icons.Material.Filled.CloudUpload" for="citizenIdInput1"
                                                   FullWidth="true" Class="mud-button-small-text">
                                            Ảnh đại diện
                                        </MudButton>
                                        @if (!string.IsNullOrEmpty(newRoleTask.img_cus))
                                        {
                                            <MudImage Src="@newRoleTask.img_cus" Alt="CCCD (Trước)" Width="100" Height="100"
                                                      ObjectFit="ObjectFit.Cover" Class="mt-2" />
                                        }
                                        @if (isLoadingIMG)
                                        {
                                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-5" />
                                        }
                                    </MudItem>

                                    <MudItem xs="4">
                                        <InputFile id="licenseInput1" OnChange="@((e) => LoadLicenseImage(e, 1))"
                                                   hidden accept=".jpg,.jpeg,.png" />
                                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Secondary"
                                                   StartIcon="@Icons.Material.Filled.CloudUpload" for="licenseInput1"
                                                   FullWidth="true" Class="mud-button-small-text">
                                            CCCD (Trước)
                                        </MudButton>

                                        @if (!string.IsNullOrEmpty(newRoleTask.citizen_identity_img1))
                                        {
                                            <MudImage Src="@newRoleTask.citizen_identity_img1" Alt="CCCD (Trước)" Width="100" Height="100"
                                                      ObjectFit="ObjectFit.Cover" Class="mt-2" />
                                        }
                                        @if (isLoadingIMG1)
                                        {
                                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-5" />
                                        }
                                    </MudItem>
                                    <MudItem xs="4">
                                        <InputFile id="avt1" OnChange="@((e) => LoadLicenseImageavt(e, 1))"
                                                   hidden accept=".jpg,.jpeg,.png" />
                                        <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Secondary"
                                                   StartIcon="@Icons.Material.Filled.CloudUpload" for="avt1"
                                                   FullWidth="true" Class="mud-button-small-text">
                                            GPLX(Trước)
                                        </MudButton>
                                        @if (!string.IsNullOrEmpty(newRoleTask.driver_license_img1))
                                        {
                                            <MudImage Src="@newRoleTask.driver_license_img1" Alt="GPLX" Width="100" Height="100"
                                                      ObjectFit="ObjectFit.Cover" Class="mt-2" />
                                        }
                                        @if (isLoadingIMG2)
                                        {
                                            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-5" />
                                        }
                                    </MudItem>
                                </MudGrid>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>

                </MudPaper>
            </MudItem>
        </MudGrid>

        <!-- Nút Cập nhật cho cả hai form -->
        <MudItem xs="12" Class="mx-auto">
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary" OnClick="UpdateData" Class="mt-3">Cập nhật</MudButton>
        </MudItem>
    </MudContainer>
}
<MudDialog @bind-IsVisible="isDialogVisible" MaxWidth="MaxWidth.Medium">
    <DialogContent>
        <MudTextField ShrinkLabel @bind-Value="newAddress.address" Label="Địa chỉ" Placeholder="Địa chỉ" Variant="Variant.Outlined" Required="true" />
        <MudTextField ShrinkLabel @bind-Value="newAddress.type" Label="Loại" Placeholder="Loại" Variant="Variant.Outlined" Required="true" />
        <MudSelect @bind-Value="newAddress.status" Label="Trạng thái" Required="true">
            <MudSelectItem Value="true">Đang hoạt động</MudSelectItem>
            <MudSelectItem Value="false">Ngưng hoạt động</MudSelectItem>
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewAddress">Lưu</MudButton>
        <MudButton Variant="Variant.Text" OnClick="CloseDialog">Hủy</MudButton>
    </DialogActions>
</MudDialog>



@code {
    private bool isCitizenImageLoading = false;
    private bool isLicenseImageLoading = false;
    [Parameter] public int customerId { get; set; } 
    private bool isDialogVisible = false; 
    private cus_address newAddress = new cus_address();
    private customers newRoleTask = new customers();
    private List<cus_address> customerAddresses = new List<cus_address>(); 
    private bool isFormValid = false;
    private DateTime? birthdayDate;
    private MudForm form;
    private MudForm formAddress; // Form for customer address
    private string url = "http://localhost:49922/api/Customer";
    private string roleUrl = "http://localhost:49922/api/Roles";
    private string addressUrl = "http://localhost:49922/api/Cus_Address";
    private List<roles> roles = new List<roles>(); // List of roles
    private string roleName;
    private string userRole;
    private bool isInitialized = false;
    private bool isLoading = false;
    private bool isLoadingIMG = false;
    private bool isLoadingIMG1 = false;
    private bool isLoadingIMG2 = false;
    private bool isLoadingProgress = true;
    private InputType PasswordInput => isShowPassword ? InputType.Text : InputType.Password;
    private string PasswordInputIcon => isShowPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    private bool isShowPassword = false;


    private void TogglePasswordVisibility()
    {
        isShowPassword = !isShowPassword;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;

            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();

                    if (handler.CanReadToken(token))
                    {
                        var jwtToken = handler.ReadJwtToken(token);

                        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");

                        if (roleClaim != null)
                        {
                            userRole = roleClaim.Value;
                        }
                        else
                        {
                            Console.WriteLine("Role claim not found in the token.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi giải mã token: {ex.Message}");
                }
            }
            CheckRole();
            isLoadingProgress = false;
            StateHasChanged();
        }
    }

    private void CheckRole()
    {
        if (userRole == "1")
        {
            Console.WriteLine("User is an Admin.");
        }
        else if (userRole == "2")
        {
            Console.WriteLine("User is a regular User.");
        }
        else if (userRole == "3")
        {
            Console.WriteLine("User is a regular Driver.");
        }
        else
        {
            isLoading = true;
        }
    }
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Khách hàng", href: "/getcustomer", icon: @Icons.Material.Outlined.WorkOutline),
        new BreadcrumbItem("Danh sách khách hàng", href: "/getcustomer", icon: @Icons.Material.Outlined.List),
        new BreadcrumbItem("Cập nhật", href: "/edit_customertask", icon: @Icons.Material.Filled.Edit),
    };

    private void OpenAddAddressDialog()
    {
        isDialogVisible = true;
    }

    private async Task LoadImage(InputFileChangeEventArgs e, string folder, Action<string> setUrl)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                var base64String = await ConvertFileToBase64(file);

                var fileExtension = Path.GetExtension(file.Name);
                var fileName = $"{folder}/{Guid.NewGuid()}{fileExtension}";

                var downloadUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64String);

                if (!string.IsNullOrEmpty(downloadUrl))
                {
                    setUrl(downloadUrl);
                    StateHasChanged();
                    Snackbar.Add("Tải ảnh lên thành công!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Không thể tải ảnh lên.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải ảnh: {ex.Message}", Severity.Error);
        }
    }
    private async Task<string> ConvertFileToBase64(IBrowserFile file)
    {
        using var ms = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(ms);
        return Convert.ToBase64String(ms.ToArray());
    }

    private async Task LoadExistingImages()
    {
        try
        {
            if (!string.IsNullOrEmpty(newRoleTask.img_cus))
            {
                var citizenUrl = await js.InvokeAsync<string>("getImageUrl", newRoleTask.img_cus);
                newRoleTask.img_cus = citizenUrl;
            }

            if (!string.IsNullOrEmpty(newRoleTask.citizen_identity_img1))
            {
                var licenseUrl = await js.InvokeAsync<string>("getImageUrl", newRoleTask.citizen_identity_img1);
                newRoleTask.citizen_identity_img1 = licenseUrl;
            }if (!string.IsNullOrEmpty(newRoleTask.driver_license_img1))
            {
                var licenseUrl = await js.InvokeAsync<string>("getImageUrl", newRoleTask.driver_license_img1);
                newRoleTask.driver_license_img1 = licenseUrl;
            }
        }
        catch (Exception ex)
        {
            // Snackbar.Add($"Lỗi khi tải ảnh: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadCitizenIdImage(InputFileChangeEventArgs e, int imageNumber)
    {
        isLoadingIMG = true;
        StateHasChanged();

        await LoadImage(e, "citizen_id_images", (url) =>
        {
            if (imageNumber == 1)
            {
                newRoleTask.img_cus = url;
            }
        });

        isLoadingIMG = false;
        StateHasChanged();
    }

    private async Task LoadLicenseImage(InputFileChangeEventArgs e, int imageNumber)
    {
        isLoadingIMG1 = true;
        StateHasChanged();

        await LoadImage(e, "license_images", (url) =>
        {
            if (imageNumber == 1)
            {
                newRoleTask.citizen_identity_img1 = url;
            }
        });

        isLoadingIMG1 = false;
        StateHasChanged();
    } 
    private async Task LoadLicenseImageavt(InputFileChangeEventArgs e, int imageNumber)
    {
        isLoadingIMG2 = true;
        StateHasChanged();

        await LoadImage(e, "avt", (url) =>
        {
            if (imageNumber == 1)
            {
                newRoleTask.driver_license_img1 = url;
            }
        });

        isLoadingIMG2 = false;
        StateHasChanged();
    }
    // Đóng dialog
    private void CloseDialog()
    {
        isDialogVisible = false;
    }

    // ... các biến khác
    private string selectedRoleName;

    protected override async Task OnInitializedAsync()
    {
        // Tải thông tin khách hàng
        var response = await httpClient.GetFromJsonAsync<customers>($"{url}/{customerId}");
        if (response != null)
        {
            newRoleTask = response;
            birthdayDate = newRoleTask.birthday;
            await LoadExistingImages(); 

        }

        // Tải danh sách vai trò
        roles = await httpClient.GetFromJsonAsync<List<roles>>(roleUrl);

        // Tìm vai trò theo id và gán tên
        var selectedRole = roles.FirstOrDefault(role => role.id == newRoleTask.id_role);
        if (selectedRole != null)
        {
            selectedRoleName = selectedRole.name;
            newRoleTask.id_role = selectedRole.id; 
        }

        // Tải địa chỉ khách hàng
        await LoadCustomerAddress();
    }

    private void OnRoleChange(ChangeEventArgs e)
    {
        var selectedRoleId = Convert.ToInt32(e.Value);
        var selectedRole = roles.FirstOrDefault(role => role.id == selectedRoleId);
        selectedRoleName = selectedRole?.name ?? "Không tìm thấy vai trò";

        newRoleTask.id_role = selectedRoleId;
    }


    private async Task LoadRoles()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<roles>>(roleUrl);
            if (response != null)
            {
                roles = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải danh sách vai trò: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadCustomerAddress()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<cus_address>>($"{addressUrl}/{customerId}");
            if (response != null)
            {
                customerAddresses = response;
            }
        }
        catch (Exception ex)
        {
        }
    }

    private async Task UpdateData()
    {
        try
        {
            newRoleTask.birthday = birthdayDate.Value;
            var response = await httpClient.PutAsJsonAsync($"{url}/{newRoleTask.Id}", newRoleTask);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Sửa thành công", Severity.Success);
                NavigationManager.NavigateTo("/getcustomer");
            }
            else
            {
                Snackbar.Add($"Lỗi khi cập nhật thông tin: ", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi cập nhật thông tin: {ex.Message}", Severity.Error);
        }
    }

    private async Task UpdateAddress(cus_address address)
    {
        address.id_cus = customerId; 

        var response = await httpClient.PutAsJsonAsync($"{addressUrl}/{address.id}", address);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add($"cập nhật thông tin thành công", Severity.Success);

        }
        else
        {
            Snackbar.Add($"Lỗi khi cập nhật thông tin:", Severity.Error);

        }
    }
    private async Task AddNewAddress()
    {
        newAddress.id_cus = customerId; 
        var response = await httpClient.PostAsJsonAsync($"{addressUrl}", newAddress);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Địa chỉ mới đã được thêm.", Severity.Success);
            NavigationManager.NavigateTo("/getcus_addresstask");
        }
        else
        {
            Snackbar.Add("Lỗi khi thêm địa chỉ mới.", Severity.Error);
        }

        newAddress = new cus_address(); 
        CloseDialog();
    }

    private async Task OpenDeleteDialog(cus_address address)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Bạn có chắc chắn muốn xóa địa chỉ { address.address}?" },
            { "ButtonText", "Xóa" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<DeleteDialog>("Xác nhận xóa", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DeleteAddress(address.id);
        }
    }

    private async Task DeleteAddress(int id)
    {
        var response = await httpClient.DeleteAsync($"{addressUrl}/{id}");
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Xóa địa chỉ thành công!", Severity.Success);
            customerAddresses.RemoveAll(x => x.id == id);
        }
        else
        {
            Snackbar.Add("Xóa địa chỉ thất bại!", Severity.Error);
        }
    }

    private async Task<bool> IsEmailExists(string email)
    {
        var response = await httpClient.GetAsync($"{url}/exists?email={email}");
        return response.IsSuccessStatusCode && bool.Parse(await response.Content.ReadAsStringAsync());
    }
    private async Task<IEnumerable<string>> CustomerValidateEmail(string email)
    {
        var errors = new List<string>();

        if (string.IsNullOrWhiteSpace(email))
        {
            errors.Add("Vui lòng điền email.");
        }
        else if (email.Length < 20 || email.Length > 150)
        {
            errors.Add("Email không hợp lệ.");
        }
        else
        {
            if (await IsEmailExists(email))
            {
                errors.Add("Email đã tồn tại trong cơ sở dữ liệu.");
            }
        }

        return errors;
    }

    private IEnumerable<string> CustomerValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
        {
            yield return "Vui lòng điền mật khẩu.";
        }
        else if (password.Length < 8 || password.Length > 15)
        {
            yield return "Mật khẩu không hợp lệ.";
        }
        else if (!password.Any(char.IsUpper) || !password.Any(char.IsLower) ||
                 !password.Any(char.IsDigit) || !password.Any(ch => "!@#$%^&*()_+[]{}|;':\",.<>?/`~".Contains(ch)))
        {
            yield return "Mật khẩu phải chứa ít nhất một chữ hoa, một chữ thường, một số và một ký tự đặc biệt.";
        }
    }

    private IEnumerable<string> CustomerValidateFullName(string fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName))
        {
            yield return "Vui lòng điền họ và tên.";
        }
        else if (fullName.Length < 5 || fullName.Length > 150)
        {
            yield return "Họ và tên không hợp lệ.";
        }
        else if (fullName.Any(ch => !char.IsLetter(ch) && !char.IsWhiteSpace(ch)))
        {
            yield return "Họ và tên không được chứa ký tự đặc biệt.";
        }
    }

    private IEnumerable<string> CustomerValidatePhone(string phone)
    {
        if (string.IsNullOrWhiteSpace(phone))
        {
            yield return "Vui lòng điền số điện thoại.";
        }
        else if (phone.Length != 10 || !phone.All(char.IsDigit))
        {
            yield return "Số điện thoại không hợp lệ. Vui lòng nhập đủ 10 số.";
        }
    }

    private IEnumerable<string> CustomerValidateBirthday(string birthday)
    {
        if (string.IsNullOrWhiteSpace(birthday))
        {
            yield return "Vui lòng chọn ngày sinh.";
        }
    }


    private IEnumerable<string> CustomerValidateGender(string gender)
    {
        if (string.IsNullOrWhiteSpace(gender))
        {
            yield return "Vui lòng chọn giới tính.";
        }
    }

    private IEnumerable<string> CustomerValidateCitizenIdentity(string citizenIdentityNumber)
    {
        if (string.IsNullOrWhiteSpace(citizenIdentityNumber))
        {
            yield return "Số CCCD không được bỏ trống.";
        }
        else if (citizenIdentityNumber.Length != 12)
        {
            yield return "Số CCCD không hợp lệ.";
        }
    }

    private IEnumerable<string> CustomerValidateDriverLicense(string DriverLicenseNumber)
    {
        if (string.IsNullOrWhiteSpace(DriverLicenseNumber))
        {
            yield return "Số bằng lái không được bỏ trống.";
        }
        else if (DriverLicenseNumber.Length != 12)
        {
            yield return "Số bằng lái không hợp lệ.";
        }
    }

    private IEnumerable<string> CustomerValidateStatus(string status)
    {
        if (string.IsNullOrWhiteSpace(status))
        {
            yield return "Vui lòng chọn trạng thái.";
        }
    }
}
