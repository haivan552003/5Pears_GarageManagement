@page "/getcustomer"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime js
@inject IDialogService DialogService
@inject ISnackbar Snackbar
<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255); /* Màu trắng với độ mờ 50% */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Đảm bảo overlay hiển thị trên các thành phần khác */
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudImage Src="/Image/404.jpg" Alt="NOT FOUND" Elevation="0" Fluid="true" />
        </MudItem>
    </div>
}

<MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
    <MudGrid Class="pa-0">
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-3" Items="_items"></MudBreadcrumbs>
            </MudPaper>

            <MudPaper Elevation="0">
                @if (isLoading)
                {
                    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
                }
                else
                {
                    <MudDataGrid Class="mx-auto pa-2" T="customers" Dense="true" Hover="true" Bordered="true" Striped="true" MultiSelection="true"
                                 Items="@Elements" SortMode="SortMode.Multiple" Filterable="false" QuickFilter="@_quickFilter"
                                 Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">

                        <ToolBarContent>
                            <MudItem xs="4" Elevation="0" Class="pb-3">
                                <MudTextField @bind-Value="_searchString" Placeholder="Tìm kiếm..." Adornment="Adornment.Start" Immediate="true"
                                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            </MudItem>
                            <MudItem xs="8" Elevation="0" Class="d-flex justify-end flex-grow-1 gap-4 pb-3">
                                <MudButton Href="/addcustomer" Variant="Variant.Outlined" StartIcon="fas fa-plus" Color="Color.Info" Size="Size.Small">
                                    Thêm mới
                                </MudButton>
                            </MudItem>
                        </ToolBarContent>

                        <Columns>
                            <PropertyColumn T="customers" Class="fw-bold" TProperty="string" Property="x => x.cus_code" Title="Mã khách hàng" Style="width: 15%; white-space: nowrap;" />
                            <PropertyColumn T="customers" Class="fw-bold" TProperty="string" Property="x => x.fullname" Title="Họ và Tên" Style="width: 20%; white-space: nowrap;" />
                            <PropertyColumn T="customers" Class="fw-bold" TProperty="string" Property="x => x.phone_number" Title="Số điện thoại" Style="width: 15%; white-space: nowrap;" />
                            <PropertyColumn T="customers" Class="fw-bold" TProperty="string" Property="x => x.email" Title="Email" Style="width: 20%; white-space: nowrap;" />
                            <TemplateColumn T="customers" Style="width: 80%; white-space: nowrap;" Class="fw-bold" Title="Trạng Thái">
                                <CellTemplate Context="element">
                                    @if (element.Item.status)
                                    {
                                        <MudChip Color="Color.Success" Size="Size.Small" Variant="Variant.Text">Đang hoạt động</MudChip>
                                    }
                                    else
                                    {
                                        <MudChip Color="Color.Error" Size="Size.Small" Variant="Variant.Text">Ngưng hoạt động</MudChip>
                                    }
                                </CellTemplate>
                            </TemplateColumn>
                            <TemplateColumn T="customers" Class="fw-bold" Title="Chức năng" Style="white-space: nowrap;">
                                <CellTemplate Context="element">
                                    <MudTooltip Text="Chỉnh sửa">
                                        <MudIconButton Href="@($"/edit_customertask/{element.Item.Id}")" Icon="far fa-edit" Color="Color.Success" Size="Size.Small" />
                                    </MudTooltip>
                                    <MudTooltip Text="Xóa">
                                        <MudIconButton Icon="far fa-trash-alt" Color="Color.Error" Size="Size.Small" OnClick="@(async () => { await OpenDeleteDialog(element.Item); })" />
                                    </MudTooltip>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>

                        <PagerContent>
                            <MudDataGridPager T="customers" />
                        </PagerContent>
                    </MudDataGrid>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private IEnumerable<customers> Elements = new List<customers>();
    private string _searchString;
    // private bool isLoading = true;
    private string customersUrl = "http://localhost:49922/api/Customer";
    private string userRole;
    private bool isInitialized = false;
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;

            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();

                    if (handler.CanReadToken(token))
                    {
                        var jwtToken = handler.ReadJwtToken(token);

                        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");

                        if (roleClaim != null)
                        {
                            userRole = roleClaim.Value;
                        }
                        else
                        {
                            Console.WriteLine("Role claim not found in the token.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi giải mã token: {ex.Message}");
                }
            }
            CheckRole();
            StateHasChanged();
        }
    }

    private void CheckRole()
    {
        if (userRole == "1")
        {
            Console.WriteLine("User is an Admin.");
        }
        else if (userRole == "2")
        {
            Console.WriteLine("User is a regular User.");
        }
        else if (userRole == "3")
        {
            Console.WriteLine("User is a regular Driver.");
        }
        else
        {
            isLoading = true;
        }
    }


    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Khách Hàng", href: "/getcustomer", icon: @Icons.Material.Outlined.PersonOutline),
        new BreadcrumbItem("Danh sách khách hàng", href: "/getcustomer", icon: @Icons.Material.Outlined.List),
    };

    private Func<customers, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return $"{x.email} {x.cus_code} {x.fullname} {x.phone_number}".Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        try
        {
            isLoading = true;
            Elements = await httpClient.GetFromJsonAsync<List<customers>>(customersUrl);
            Console.WriteLine($"Loaded customers: {System.Text.Json.JsonSerializer.Serialize(Elements)}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    void RowClicked(DataGridRowClickEventArgs<customers> args)
    {
        Console.WriteLine($"Row clicked: {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<customers> args)
    {
        Console.WriteLine($"Row right clicked: {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<customers> items)
    {
        Console.WriteLine($"Selected items changed: {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    private async Task OpenDeleteDialog(customers customer)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Bạn có chắc chắn muốn xóa khách hàng {customer.fullname}?" },
            { "ButtonText", "Xóa" },
            { "Color", Color.Error }
        };

        var dialog = DialogService.Show<DeleteDialog>("Xác nhận xóa", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DeleteCustomer(customer.Id);
        }
    }

    private async Task DeleteCustomer(int id)
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<ApiResponse>($"http://localhost:49922/api/Validate/ValidateCustomer/{id}");

            if (response.Success)
            {
                var deleteResponse = await httpClient.DeleteAsync($"{customersUrl}/{id}");
                if (deleteResponse.IsSuccessStatusCode)
                {
                    Snackbar.Add("Xóa khách hàng thành công!", Severity.Success);
                    await LoadCustomers();
                }
                else
                {
                    Snackbar.Add("Xóa khách hàng thất bại!", Severity.Warning);
                }
            }
            else
            {
                string errorMessage = response.Message ?? "Không thể xóa khách hàng này.";
                Snackbar.Add(errorMessage, Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi xảy ra: {ex.Message}", Severity.Error);
        }
    }

    public class ApiResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; }
    }
}
