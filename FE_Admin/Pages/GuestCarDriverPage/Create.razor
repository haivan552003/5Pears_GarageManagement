@page "/addbill"
@inject HttpClient httpClient
@inject IJSRuntime js
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="pa-3 mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-0" Items="_items"></MudBreadcrumbs>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" Class="mx-auto">
            <MudPaper Elevation="0" Class="pa-3">
                <MudItem xs="12">
                    <MudPaper Elevation="4" Class="p-4">
                        <MudText Typo="Typo.h6" Class="mb-5">Thêm hóa đơn thuê xe và tài xế</MudText>
                        <MudForm @ref="form" Style="height:auto">
                            <MudGrid>
                                <MudItem xs="3" Class="mb-4">
                                    <MudTextField ShrinkLabel Label="Mã hóa đơn" T="string" Variant="Variant.Outlined" ReadOnly="true" />
                                </MudItem>
                                <MudItem xs="3" Class="mb-4">
                                    <MudSelect Variant="Variant.Outlined" T="int" Label="Khách hàng" @bind-Value="bill.cus_id">
                                        @foreach (var item in customer)
                                        {
                                            <MudSelectItem Value="item.id">@item.name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="3" Class="mb-4">
                                    <MudSelect Variant="Variant.Outlined" T="int" Label="Xe" ValueChanged="OnCarChanged">
                                        @foreach (var item in car)
                                        {
                                            <MudSelectItem Value="item.id">@item.name</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="3" Class="mb-4">
                                    <MudTextField ShrinkLabel
                                                  Label="Giá vé"
                                                  @bind-Value="bill.price"
                                                  Variant="Variant.Outlined"
                                                  Required="true"
                                                  ReadOnly="true" />
                                </MudItem>
                                @*    <MudItem xs="3" Class="mb-4">
                                <MudTextField ShrinkLabel
                                Label="Tiền cọc"
                                @bind-Value="bill.deposit"
                                Variant="Variant.Outlined"
                                Required="true"
                                ReadOnly="true" />
                                </MudItem> *@

                               

                                <MudItem xs="3" Class="mb-4">
                                    <MudDatePicker Label="Ngày bắt đầu"
                                                   Date="bill.date_start"
                                                   DateChanged="@(date => OnDateChanged(date, true))"
                                                   Variant="Variant.Outlined"
                                                   Required="true" />
                                </MudItem>

                                <MudItem xs="3" Class="mb-4">
                                    <MudDatePicker Label="Ngày kết thúc"
                                                   Date="bill.date_end"
                                                   DateChanged="@(date => OnDateChanged(date, false))"
                                                   Variant="Variant.Outlined"
                                                   Required="true" />
                                </MudItem>

                            </MudGrid>

                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary" OnClick="AddBill" Class="mt-3">Lưu</MudButton>
                        </MudForm>
                    </MudPaper>
                </MudItem>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
<script>
    // Lấy token từ localStorage
    function getAuthToken() {
        return localStorage.getItem("authToken");
    }
</script>

@code {
    private guest_car_create bill = new guest_car_create();
    private IEnumerable<guest_car> topGuestTrip = new List<guest_car>();
    private List<dropdown> customer = new List<dropdown>();
    private List<dropdown> car = new List<dropdown>();
    private car carID = new car();
    public int selectCarID = 0;
    private MudForm form;

    private string url = "http://localhost:49922/api/GuestCars";
    private string urlTopGuestCar = "http://localhost:49922/api/GuestCars/GetTop";
    private string urlCustomer = "http://localhost:49922/api/Dropdown/customer";
    private string urlCar = "http://localhost:49922/api/Dropdown/car";
    private string urlCarID = "http://localhost:49922/api/Cars/";

    private int empId;

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Đặt vé", href: "/index", icon: @Icons.Material.Outlined.Payments),
        new BreadcrumbItem("Danh sách hóa đơn", href: "/index", icon: @Icons.Material.Outlined.List),
        new BreadcrumbItem("Thêm mới", href: "/addbill", icon: @Icons.Material.Filled.AddCircleOutline),
    };

    protected override async Task OnInitializedAsync()
    {
        var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");
        await LoadCustomer();
        await LoadCar();
    }

    private async Task LoadCustomer()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<dropdown>>($"{urlCustomer}");
            if (response != null)
            {
                customer = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Lỗi khi tải danh sách khách hàng", Severity.Error);
        }
    }

    private async Task LoadCar()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<dropdown>>($"{urlCar}");
            if (response != null)
            {
                car = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Lỗi khi tải danh sách xe", Severity.Error);
        }
    }

    private async Task OnCarChanged(int id)
    {
        selectCarID = id;
        if (selectCarID != 0)
        {
            await LoadCarlID(id);
        }
        else
        {
            Snackbar.Add("Vui lòng chọn xe", Severity.Warning);
        }
    }

    private async Task LoadCarlID(int car_id)
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<car>($"{urlCarID}{car_id}");
            if (response != null)
            {
                carID = response;
                bill.car_id = carID.id;
                bill.price = carID.price;
                bill.deposit = carID.price / 2;

                UpdatePriceBasedOnDays();
            }
            else
            {
                Snackbar.Add("Không tìm thấy thông tin xe", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải giá xe: {ex.Message}", Severity.Error);
        }
    }

    private void OnDateChanged(DateTime? date, bool isStartDate)
    {
        if (isStartDate)
        {
            bill.date_start = date;
        }
        else
        {
            bill.date_end = date;
        }

        UpdatePriceBasedOnDays();
    }

    private void UpdatePriceBasedOnDays()
    {
        if (bill.date_start != null && bill.date_end != null)
        {
            var totalDays = (bill.date_end - bill.date_start)?.Days ?? 0;

            if (totalDays > 0)
            {
                if (carID != null)
                {
                    bill.price = carID.price * totalDays;
                }
            }
            else
            {
                bill.price = carID?.price ?? 0;
                Snackbar.Add("Ngày kết thúc phải lớn hơn ngày bắt đầu", Severity.Warning);
            }
        }
    }


    private async Task AddBill()
    {
        try
        {
            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                // Giải mã token
                var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                var jwtToken = handler.ReadJwtToken(token);

                var usernameClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "emp_id");

                if (usernameClaim != null)
                {
                    empId = int.Parse(usernameClaim.Value);
                }
            }

            await form.Validate();
            if (form.IsValid)
            {
                bill.emp_id = empId;
                var response = await httpClient.PostAsJsonAsync(url, bill);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Thêm thành công", Severity.Success);

                    var responseTop = await httpClient.GetAsync(urlTopGuestCar);
                    var jsonResponse = await responseTop.Content.ReadAsStringAsync();
                    var guestTrips = JsonSerializer.Deserialize<List<guest_car>>(jsonResponse);
                    var guestTripId = guestTrips.First().id;
                    Navigation.NavigateTo($"/edit_bill/{guestTripId}");
                }
                else
                {
                    Snackbar.Add("Thêm thất bại", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi: {ex.Message}", Severity.Error);
        }
    }
}
