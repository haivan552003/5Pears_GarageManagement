@page "/editnews/{id:int}"
@inject HttpClient httpClient
@inject IJSRuntime js
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar
<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255); /* Màu trắng với độ mờ 50% */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Đảm bảo overlay hiển thị trên các thành phần khác */
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudImage Src="/Image/404.jpg" Alt="NOT FOUND" Elevation="0" Fluid="true" />
        </MudItem>
    </div>
}
else if (isLoadingProgress)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </MudItem>
    </div>
}
else
{
    <MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pa-3 mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                    <MudBreadcrumbs Class="pa-0" Items="_items"></MudBreadcrumbs>
                </MudPaper>
            </MudItem>
            <MudItem xs="4" Class="mx-auto">
                <MudPaper Elevation="4" Class="pa-3">
                    <MudText Typo="Typo.h6" Class="mb-5">Chỉnh sửa thông tin công việc</MudText>
                    <MudGrid>
                        <MudItem xs="12" Class="mx-auto">
                            <MudForm @ref="form" Style="height:auto" Class="mud-width-full">


                                <MudTextField ShrinkLabel @bind-Value="News.title" Label="Tiêu đề"
                                              Class="py-3"
                                              Validation="@(new Func<string, IEnumerable<string>>(NewsValidate))"
                                              Placeholder="Tiêu đề công việc" Variant="Variant.Outlined" Required="true" />

                                <MudTextField ShrinkLabel @bind-Value="News.id_emp" Label="Người tạo"
                                              Class="py-3"
                                              Disabled="true"
                                              Placeholder="Người tạo" Variant="Variant.Outlined" Required="true" />

                                <CKeditor Id="newsContent" @bind-Value="News.content" />

                                <MudSelect @bind-Value="News.status" Label="Trạng thái" Variant="Variant.Outlined" Class="py-3" Required="true">
                                    <MudSelectItem Value="@true">Đang hoạt động</MudSelectItem>
                                    <MudSelectItem Value="@false">Ngưng hoạt động</MudSelectItem>
                                </MudSelect>
                                @if (!string.IsNullOrEmpty(News.news_img))
                                {
                                    <MudImage Fluid="false" Src="@News.news_img" Class="rounded-lg mb-2 w-100 mx-auto d-block" Height="260" />
                                }
                                <MudButton HtmlTag="label" For="newsImageInput" Size="Size.Small" Variant="Variant.Outlined" Color="Color.Secondary"
                                           StartIcon="@Icons.Material.Outlined.CloudUpload"
                                           FullWidth="true" Class="mud-button-small-text">
                                    Chọn hình ảnh mới
                                </MudButton>
                                @if (isLoadingIMG)
                                {
                                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-5" />
                                }

                                <InputFile id="newsImageInput" OnChange="LoadNewsImage" accept="image/*" style="display: none;" />

                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary"
                                           OnClick="SubmitForm" Class="mt-3">
                                    Lưu
                                </MudButton>
                                <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.ArrowBack"
                                           OnClick="Cancel" Class="mt-3 ml-3">
                                    Trở về
                                </MudButton>
                            </MudForm>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    [Parameter] public int Id { get; set; }
    private news News = new news();
    private bool isFormValid;
    private MudForm form;
    private readonly string url = "http://localhost:49922/api/News";
    private bool isLoading= false;
    private bool isLoadingIMG = false;
    private bool isLoadingProgress = true;
    private string userRole;
    private bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;

            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();

                    if (handler.CanReadToken(token))
                    {
                        var jwtToken = handler.ReadJwtToken(token);

                        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");

                        if (roleClaim != null)
                        {
                            userRole = roleClaim.Value;
                        }
                        else
                        {
                            Console.WriteLine("Role claim not found in the token.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi giải mã token: {ex.Message}");
                }
            }
            CheckRole();
            StateHasChanged();
        }
    }

    private void CheckRole()
    {
        if (userRole == "1")
        {
            Console.WriteLine("User is an Admin.");
        }
        else if (userRole == "2")
        {
            Console.WriteLine("User is a regular User.");
        }
        else if (userRole == "3")
        {
            Console.WriteLine("User is a regular Driver.");
        }
        else
        {
            isLoading = true;
        }
    }

    private readonly List<BreadcrumbItem> _items = new()
    {
        new BreadcrumbItem("bài viết", href: "/getnews", icon: Icons.Material.Outlined.WorkOutline),
        new BreadcrumbItem("Danh sách bài viết", href: "/getnews", icon: Icons.Material.Outlined.List),
        new BreadcrumbItem("Chỉnh sửa bài viết", href: "", icon: Icons.Material.Filled.Edit),
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            News = await httpClient.GetFromJsonAsync<news>($"{url}/{Id}");
            isLoadingProgress = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải dữ liệu: {ex.Message}", Severity.Error);
            navigationManager.NavigateTo("/getnews");
            isLoadingProgress = false;
            StateHasChanged();
        }
    }

    private IEnumerable<string> NewsValidate(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            yield return " Tên tiêu đề không được để trống";
        else if (name.Length < 5)
            yield return "Tên tiêu đề phải có ít nhất 5 ký tự";
    }

    private async Task<string> GetBase64Image(IBrowserFile file)
    {
        try
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            return Convert.ToBase64String(memoryStream.ToArray());
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi xử lý hình ảnh: {ex.Message}", Severity.Error);
            return null;
        }
    }

    private async Task LoadNewsImage(InputFileChangeEventArgs e)
    {
        try
        {
            isLoadingIMG = true;
            StateHasChanged();
            await Task.Delay(2000);
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"news_images/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);
                    News.news_img = imageUrl;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi tải lên hình ảnh: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingIMG = false;
            StateHasChanged();
        }
    }

    private async Task EditNews()
    {
        try
        {
            await Task.Delay(2000);
            var response = await httpClient.PutAsJsonAsync($"{url}/{Id}", News);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Chỉnh sửa tin tức ID {Id} thành công", Severity.Success);
                navigationManager.NavigateTo("/getnews");
            }
            else
            {
                Snackbar.Add($"Chỉnh sửa tin tức ID {Id} thất bại: {response.ReasonPhrase}", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi chỉnh sửa tin tức: {ex.Message}", Severity.Error);
        }
        finally
        {
        }
    }

    private async Task SubmitForm()
    {
        await form.Validate();
        if (form.IsValid)
        {
            await EditNews();
        }
    }

    private void Cancel()
    {
        navigationManager.NavigateTo("/getnews");
    }
}