@page "/addnews"
@inject HttpClient httpClient
@inject IJSRuntime js
@inject ISnackbar Snackbar
<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255); /* Màu trắng với độ mờ 50% */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Đảm bảo overlay hiển thị trên các thành phần khác */
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudImage Src="/Image/404.jpg" Alt="NOT FOUND" Elevation="0" Fluid="true" />
        </MudItem>
    </div>
}
else if (isLoadingProgress)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </MudItem>
    </div>
}
else
{
    <MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
        @if (showSuccess)
        {
            <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Style="position:fixed; top:60px; right:20px; z-index:9999;">
                Thêm thành công
            </MudAlert>
        }
        else if (showError)
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Style="position:fixed; top:60px; right:20px; z-index:9999;">
                Thêm thất bại
            </MudAlert>
        }

        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="0" Class="pa-3 mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                    <MudBreadcrumbs Class="pa-0" Items="_items"></MudBreadcrumbs>
                </MudPaper>
            </MudItem>
            <MudItem xs="6" Class="mx-auto">
                <MudPaper Elevation="0" Class="pa-3">
                    <MudItem xs="12">
                        <MudPaper Elevation="4" Class="p-4">
                            <MudText Typo="Typo.h6" Class="mb-5">Thêm tin tức</MudText>
                            <MudForm @ref="form" @bind-IsValid="@isFormValid" Style="height:auto">
                                <MudTextField @bind-Value="News.title" Class="py-3" Label="Tiêu Đề"
                                              Validation="@(new Func<string, IEnumerable<string>>(NewsValidate))"
                                              Placeholder="Tiêu Đề" Variant="Variant.Outlined" Required="true" />

                                <CKeditor Id="newsContent" @bind-Value="News.content" />

                                <MudTextField @bind-Value="News.id_emp" Class="py-3" Label="Người Tạo"
                                              Validation="@(new Func<string, IEnumerable<string>>(NguoiiTaoValidate))"
                                              Placeholder="Tên công việc" Variant="Variant.Outlined" Required="true" />

                                <MudSelect @bind-Value="News.status" Label="Trạng Thái " Class="py-3" Variant="Variant.Outlined" Required="true">
                                    <MudSelectItem Value="@true">Đang hoạt động</MudSelectItem>
                                    <MudSelectItem Value="@false">Ngưng hoạt động</MudSelectItem>
                                </MudSelect>
                                <InputFile id="newsImageInput" OnChange="@LoadNewsImage" hidden accept=".jpg,.jpeg,.png" />
                                <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload" for="newsImageInput"
                                           FullWidth="true" Class="mb-3">
                                    Chọn hình ảnh
                                </MudButton>

                                @if (!string.IsNullOrEmpty(News.news_img))
                                {
                                    <MudImage Src="@News.news_img" Alt="Hình ảnh mới" Width="150" Height="150"
                                              ObjectFit="ObjectFit.Cover" Class="mb-3 mx-auto d-block" />
                                }
                                @if (isLoadingIMG)
                                {
                                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-5" />
                                }

                                <MudGrid>
                                    <MudItem xs="12" Class="d-flex justify-end">
                                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save"
                                                   Color="Color.Primary" OnClick="AddNews" Class="mt-3">
                                            Lưu
                                        </MudButton>
                                    </MudItem>
                                </MudGrid>

                            </MudForm>
                        </MudPaper>
                    </MudItem>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    private news News = new news();
    private bool isFormValid;
    private bool showSuccess;
    private bool showError;
    private MudForm form;
    private readonly string url = "http://localhost:49922/api/News";
    // private bool isLoading;
    private string userRole;
    private bool isInitialized = false;
    private bool isLoading = false;
    private bool isLoadingIMG = false;
    private bool isLoadingProgress = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;

            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();

                    if (handler.CanReadToken(token))
                    {
                        var jwtToken = handler.ReadJwtToken(token);

                        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");

                        if (roleClaim != null)
                        {
                            userRole = roleClaim.Value;
                        }
                        else
                        {
                            Console.WriteLine("Role claim not found in the token.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi giải mã token: {ex.Message}");
                }
            }
            CheckRole();
            isLoadingProgress = false;
            StateHasChanged();
        }
    }

    private void CheckRole()
    {
        if (userRole == "1")
        {
            Console.WriteLine("User is an Admin.");
        }
        else if (userRole == "2")
        {
            Console.WriteLine("User is a regular User.");
        }
        else if (userRole == "3")
        {
            Console.WriteLine("User is a regular Driver.");
        }
        else
        {
            isLoading = true;
        }
    }

    private readonly List<BreadcrumbItem> _items = new()
    {
        new BreadcrumbItem("bài viết", href: "/getnews", icon: Icons.Material.Outlined.WorkOutline),
        new BreadcrumbItem("Danh sách bài viết", href: "/getnews", icon: Icons.Material.Outlined.List),
        new BreadcrumbItem("Thêm mới", href: "/addnews", icon: Icons.Material.Filled.AddCircleOutline),
    };

    private IEnumerable<string> NewsValidate(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            yield return " Tên tiêu đề không được để trống";
        else if (name.Length < 2)
            yield return "Tên loại phải có ít nhất 2 ký tự";
    }
    private IEnumerable<string> NguoiiTaoValidate(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            if (string.IsNullOrWhiteSpace(name))
                yield return " Người Tạo đề không được để trống";
        }
    }

    private async Task<string> GetBase64Image(IBrowserFile file)
    {
        try
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            return Convert.ToBase64String(memoryStream.ToArray());
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi xử lý hình ảnh: {ex.Message}", Severity.Error);
            return null;
        }
    }

    private async Task LoadNewsImage(InputFileChangeEventArgs e)
    {
        try
        {
            isLoadingIMG = true;
            StateHasChanged();
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"news_images/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);
                    News.news_img = imageUrl;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi tải lên hình ảnh: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoadingIMG = false;
            StateHasChanged();
        }
    }

    private async Task AddNews()
    {
        if (!isFormValid) return;

        try
        {
            var response = await httpClient.PostAsJsonAsync(url, News);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Thêm thành công", Severity.Success);
                News = new news(); // Reset the form
                showSuccess = true;
                showError = false;
            }
            else
            {
                Snackbar.Add("Thêm thất bại", Severity.Warning);
                showSuccess = false;
                showError = true;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Đã xảy ra lỗi: {ex.Message}", Severity.Error);
            showSuccess = false;
            showError = true;
        }
        finally
        {
        }
    }
}