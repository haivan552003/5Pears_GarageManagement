@page "/gettrip"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime js
@inject IDialogService DialogService
@inject ISnackbar Snackbar
<MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
    <MudGrid Class="pa-0">
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-3" Items="_items"></MudBreadcrumbs>
            </MudPaper>
            <MudPaper Elevation="0">
                <MudDataGrid Class="mx-auto pa-2" T="trip" Dense="true" Hover="true" Bordered="true" Striped="true" MultiSelection="true"
                             Items="@Elements" SortMode="SortMode.Multiple" Filterable="false" QuickFilter="@_quickFilter"
                             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">

                    <ToolBarContent>
                        <MudItem xs="4">
                            <MudTextField @bind-Value="_searchString" Placeholder="Tìm kiếm..."
                                          Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                                          Immediate="true" IconSize="Size.Medium" Class="mt-0" />
                        </MudItem>
                        <MudItem xs="8" Elevation="0" Class="d-flex justify-end flex-grow-1 gap-4 pb-3">
                            <MudButton Href="/addtrip" Variant="Variant.Outlined" StartIcon="fas fa-plus" Color="Color.Info" Size="Size.Small">
                                Thêm mới
                            </MudButton>

                            <MudButton Href="/addproduct" Class="ml-2" Variant="Variant.Outlined" StartIcon="fas fa-upload" Color="Color.Tertiary" Size="Size.Small">
                                Nhập file
                            </MudButton>

                            <MudButton Href="/addproduct" Class="ml-2" Variant="Variant.Outlined" StartIcon="fas fa-download" Color="Color.Tertiary" Size="Size.Small">
                                Xuất file
                            </MudButton>
                        </MudItem>
                    </ToolBarContent>

                    <Columns>
                        <SelectColumn T="trip" />
                        <PropertyColumn T="trip" Class="fw-bold" TProperty="string" Property="x => x.trip_code" Title="Mã chuyến đi"
                                        Style="width: 15%;" />
                        <PropertyColumn T="trip" Class="fw-bold" TProperty="string" Property="x => x.from" Title="Điểm khởi hành"
                                        Style="width: 15%;" />
                        <PropertyColumn T="trip" Class="fw-bold"  TProperty="string" Property="x => x.to" Title="Điểm đến"
                                        Style="width: 15%;" />
                        <TemplateColumn T="trip" Title="Trạng thái" Style="white-space: nowrap;">
                            <CellTemplate Context="element">
                                @if (element.Item.status)
                                {
                                    <MudChip Color="Color.Success" Size="Size.Small" Variant="Variant.Text">Đang hoạt động</MudChip>
                                }
                                else
                                {
                                    <MudChip Color="Color.Error" Size="Size.Small" Variant="Variant.Text">Ngưng hoạt động</MudChip>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn T="trip" Title="Chức năng" Style="white-space: nowrap;">
                            <CellTemplate Context="element">
                                <MudTooltip Text="Chỉnh sửa">
                                    <MudIconButton Href="@($"/edittrip/{element.Item.id}")" Icon="far fa-edit" Color="Color.Success" Size="Size.Small" />
                                </MudTooltip>
                                <MudTooltip Text="Xóa">
                                    <MudIconButton Icon="far fa-trash-alt" Color="Color.Error" Size="Size.Small"
                                                   OnClick="@(async () => await OpenDeleteDialog(element.Item))" />
                                </MudTooltip>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="trip" />
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>


@code {
    private IEnumerable<trip> Elements = new List<trip>();
    private string _searchString;
    private string tripsUrl = "http://localhost:49922/api/Trips/trip";

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Chuyến đi", href: "/gettrips", icon: @Icons.Material.Outlined.Map),
        new BreadcrumbItem("Danh sách chuyến đi", href: "/gettrips", icon: @Icons.Material.Outlined.List),
    };

    private Func<trip, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return $"{x.trip_code} {x.from} {x.to}".Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadTrips();
    }

    private async Task LoadTrips()
    {
        try
        {
            Elements = await httpClient.GetFromJsonAsync<List<trip>>(tripsUrl);
            Console.WriteLine($"Loaded trips: {System.Text.Json.JsonSerializer.Serialize(Elements)}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task OpenDeleteDialog(trip selectedTrip)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Bạn có chắc chắn muốn xóa chuyến đi {selectedTrip.trip_code}?" },
            { "ButtonText", "Xóa" },
            { "Color", Color.Error }
        };

        var dialog = DialogService.Show<Delete>("Xác nhận xóa", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DeleteTrip(selectedTrip.id);
        }
    }

    private async Task DeleteTrip(int id)
    {
        var response = await httpClient.DeleteAsync($"{tripsUrl}/{id}");
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add($"Xóa chuyến đi thành công", Severity.Success);
            await LoadTrips();
        }
        else
        {
            Snackbar.Add("Xóa chuyến đi thất bại", Severity.Error);
        }
    }

    void RowClicked(DataGridRowClickEventArgs<trip> args)
    {
        Console.WriteLine($"Row clicked: {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<trip> args)
    {
        Console.WriteLine($"Row right clicked: {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<trip> items)
    {
        Console.WriteLine($"Selected items changed: {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}
