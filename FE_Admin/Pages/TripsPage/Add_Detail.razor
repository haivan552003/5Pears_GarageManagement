@inject MudBlazor.ISnackbar Snackbar
@inject HttpClient httpClient
@inject NavigationManager Navigation


<MudDialog MaxWidth="MaxWidth.Medium">
    <DialogContent>
        <MudPaper Elevation="0">
            <MudText Typo="Typo.h6" Class="mb-5">@ContentText</MudText>
            <MudForm @ref="form">
                <MudGrid Gutter="true">
                    <MudItem xs="6" Class="mb-4">
                        <MudDatePicker Label="Ngày bắt đầu" @bind-Date="SelectedTrip.DateStart" Variant="Variant.Outlined" MinDate="@DateTime.Today" />
                        <MudTimePicker Label="Giờ bắt đầu" @bind-Time="SelectedTrip.TimeStart" Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="6" Class="mb-4">
                        <MudDatePicker Label="Ngày kết thúc" @bind-Date="SelectedTrip.DateEnd"  Variant="Variant.Outlined"  MinDate="@(SelectedTrip.DateStart ?? DateTime.Today)" />
                        <MudTimePicker Label="Giờ kết thúc" @bind-Time="SelectedTrip.TimeEnd" Variant="Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="6" Class="mb-4">
                        <MudNumericField T="float" Label="Khoảng cách" @bind-Value="SelectedTrip.distance"
                                         Placeholder="Nhập khoảng cách" Variant="Variant.Outlined" Required="true" />
                    </MudItem>
                    <MudItem xs="6" Class="mb-4">
                        <MudTextField T="float" Label="Giá" @bind-Value="SelectedTrip.price"
                                      Placeholder="Nhập giá" Variant="Variant.Outlined" Required="true" />
                    </MudItem>
                    <MudItem xs="6" Class="mb-4">
                        <MudSelect @bind-Value="SelectedTrip.driver_id" Label="Mã Tài Xế" Variant="Variant.Outlined" Required="true">
                            @foreach (var driver in drivers)
                            {
                                <MudSelectItem Value="@driver.id">@driver.name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6" Class="mb-4">
                        <MudSelect @bind-Value="SelectedTrip.location_from_id" Label="Điểm đến" Variant="Variant.Outlined" Required="true">
                            @foreach (var location in locationsfrom)
                            {
                                <MudSelectItem Value="@location.id">@location.name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6" Class="mb-4">
                        <MudSelect @bind-Value="SelectedTrip.car_id" Label="Xe" Variant="Variant.Outlined" Required="true">
                            @foreach (var car in cars)
                            {
                                <MudSelectItem Value="@car.id">@car.name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6" Class="mb-4">
                        <MudSelect @bind-Value="SelectedTrip.location_to_id" Label="Điểm khởi hành" Variant="Variant.Outlined" Required="true">
                            @foreach (var locations in locationsto)
                            {
                                <MudSelectItem Value="@locations.id">@locations.name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6" Class="mb-4">
                        <MudSelect Variant="Variant.Outlined" @bind-Value="SelectedTrip.status" Label="Trạng thái" Required="true" RequiredError="Trạng thái là bắt buộc">
                            <MudSelectItem Value="true">Đang hoạt động</MudSelectItem>
                            <MudSelectItem Value="false">Ngưng hoạt động</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="6" Class="mb-4">
                        <MudTextField Label="Voucher" @bind-Value="SelectedTrip.voucher"
                                      Placeholder="Mã voucher" Variant="Variant.Outlined" Required="true" />
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Secondary">Hủy</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">Lưu</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string ContentText { get; set; }
    [Parameter]
    public trip_detail_create SelectedTrip { get; set; } = new trip_detail_create();

    private MudForm form;


    private List<dropdown> drivers = new List<dropdown>();
    private List<dropdown> locationsfrom = new List<dropdown>(); // điểm đến
    private List<dropdown> cars = new List<dropdown>(); // Danh sách xe
    private List<dropdown> locationsto = new List<dropdown>(); // điểm khởi hành

    private string LastSegment;

    protected override async Task OnInitializedAsync()
    {
        drivers = await httpClient.GetFromJsonAsync<List<dropdown>>("http://localhost:49922/api/Dropdown/driver");

        locationsfrom = await httpClient.GetFromJsonAsync<List<dropdown>>("http://localhost:49922/api/Dropdown/location");

        cars = await httpClient.GetFromJsonAsync<List<dropdown>>("http://localhost:49922/api/Dropdown/car");

        locationsto = await httpClient.GetFromJsonAsync<List<dropdown>>("http://localhost:49922/api/Dropdown/location");
    }

    private string GetLastSegment(string url)
    {
        var segments = url.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);
        return segments.Length > 0 ? segments.Last() : string.Empty;
    }


    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            var uri = Navigation.Uri;
            LastSegment = GetLastSegment(uri);
            SelectedTrip.trip_id = int.Parse(LastSegment);

            if (SelectedTrip.DateStart.HasValue && SelectedTrip.TimeStart.HasValue)
            {
                SelectedTrip.time_start = SelectedTrip.DateStart.Value.Date + SelectedTrip.TimeStart.Value;
            }
            if (SelectedTrip.DateEnd.HasValue && SelectedTrip.TimeEnd.HasValue)
            {
                SelectedTrip.time_end = SelectedTrip.DateEnd.Value.Date + SelectedTrip.TimeEnd.Value;
            }

            if (await ValidateSchedule())
            {
                try
                {
                    var response = await httpClient.PostAsJsonAsync("http://localhost:49922/api/Trips/tripdetail", SelectedTrip);
                    if (response.IsSuccessStatusCode)
                    {
                        Snackbar.Add("Thêm chi tiết chuyến đi thành công!", Severity.Success);
                        MudDialog.Close(DialogResult.Ok(SelectedTrip));
                        StateHasChanged();
                    }
                    else
                    {
                        Snackbar.Add($"Lỗi: {response.ReasonPhrase}", Severity.Error);
                    }
                }
                catch (Exception ex)
                {
                    Snackbar.Add($"Đã xảy ra lỗi: {ex.Message}", Severity.Error);
                }
            }

        }
    }


    void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }

    private async Task<bool> ValidateSchedule()
    {
        // Kiểm tra lịch tài
        var driverResponse = await httpClient.GetFromJsonAsync<ApiResponse>($"http://localhost:49922/api/Validate/ValidateCheckScheduleDriver?id={SelectedTrip.driver_id}&date_start={SelectedTrip.time_start}");

        if (driverResponse.Success)
        {
            // Snackbar.Add("Lịch xe hợp lệ!", Severity.Success);
            return true; 
        }
        else
        {
            string errorMessage = driverResponse.Message ?? "Không thể kiểm tra lịch xe này.";
            Snackbar.Add(errorMessage, Severity.Warning);
            return false; 
        }

        // Kiểm tra lịch xe
        var carResponse = await httpClient.GetFromJsonAsync<ApiResponse>($"http://localhost:49922/api/Validate/ValidateCheckScheduleCar?id={SelectedTrip.car_id}&date_start={SelectedTrip.time_start}");

        if (carResponse.Success)
        {
            // Snackbar.Add("Lịch xe hợp lệ!", Severity.Success);
            return true;
        }
        else
        {
            string errorMessage = carResponse.Message ?? "Không thể kiểm tra lịch xe này.";
            Snackbar.Add(errorMessage, Severity.Warning);
            return false;
        }
    }


    public class ApiResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; }
    }
}
