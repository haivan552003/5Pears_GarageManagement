@page "/edittrip/{Id:int}"
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IJSRuntime js
<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255); /* Màu trắng với độ mờ 50% */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Đảm bảo overlay hiển thị trên các thành phần khác */
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudImage Src="/Image/404.jpg" Alt="NOT FOUND" Elevation="0" Fluid="true" />
        </MudItem>
    </div>
}


<MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-3" Items="_items"></MudBreadcrumbs>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" Class="mx-auto">
            <MudPaper Elevation="0" Class="pa-3">
                <MudItem xs="12" md="12">
                    <MudPaper Elevation="4" Class="p-4">
                        <MudText Typo="Typo.h6" Class="mb-5">Cập nhật thông tin chuyến đi</MudText>
                        <MudForm @ref="form" Style="height:auto">
                            <MudGrid>
                                <MudItem xs="3">
                                    <MudTextField ShrinkLabel @bind-Value="tripInfo.from" Label="Điểm khởi hành" Variant="Variant.Outlined" Required="true" />

                                </MudItem>
                                <MudItem xs="3">
                                    <MudTextField ShrinkLabel @bind-Value="tripInfo.to" Label="Điểm đến" Variant="Variant.Outlined" Required="true" />
                                </MudItem>
                                <MudItem xs="3">
                                    <MudSelect @bind-Value="tripInfo.status" Label="Trạng thái" Variant="Variant.Outlined" Required="true">
                                        <MudSelectItem Value="true">Đang hoạt động</MudSelectItem>
                                        <MudSelectItem Value="false">Ngưng hoạt động</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="3" Class="mb-4">
                                    <MudSelect @bind-Value="tripInfo.is_return" Label="Trở về" Variant="Variant.Outlined" Disabled="true">
                                        <MudSelectItem Value="true">Khứ hồi</MudSelectItem>
                                        <MudSelectItem Value="false">Một chiều</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                            </MudGrid>

                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary" OnClick="UpdateTrip" Class="mt-3">Cập nhật</MudButton>
                        </MudForm>
                    </MudPaper>
                </MudItem>
            </MudPaper>
        </MudItem>
    </MudGrid>

    <MudGrid Class="pa-0">
        <MudItem xs="12">
            <MudPaper Elevation="4" Class="p-4">
                <MudText Typo="Typo.h6" Class="mb-5">Chi tiết chuyến đi</MudText>
                <MudDataGrid Class="mx-auto pa-2" T="trip_detail" Dense="true" Hover="true" Bordered="true" Striped="true"
                             MultiSelection="true" Items="@tripDetails" SortMode="SortMode.Multiple" Filterable="false" QuickFilter="@_quickFilter"
                             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
                    <ToolBarContent>
                        <MudItem xs="4" Elevation="0" Class="pb-3">
                            <MudTextField @bind-Value="_searchString" Placeholder="Tìm kiếm..." Adornment="Adornment.Start" Immediate="true"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </MudItem>

                        <MudItem xs="8" Elevation="0" Class="d-flex justify-end flex-grow-1 gap-4 pb-3">
                            <MudButton OnClick="@(async () => await OpenDetailCreateDialog(null))" Variant="Variant.Outlined" StartIcon="fas fa-plus" Color="Color.Info" Size="Size.Small">
                                Thêm mới
                            </MudButton> 
                            <MudButton OnClick="@(async () => await OpenGenDialog(null))" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.AutoFixHigh" Color="Color.Warning" Size="Size.Small">
                                Gen chuyến
                            </MudButton>
                        </MudItem>
                    </ToolBarContent>
                    <Columns>
                        <PropertyColumn T="trip_detail" TProperty="string" Property="x => x.trip_detail_code" Class="fw-bold" Title="Mã CT Chuyến" Width="150px" />
                        <PropertyColumn T="trip_detail" TProperty="string" Property="x => x.location_from" Class="fw-bold" Title="Điểm Đi" Width="150px" />
                        <PropertyColumn T="trip_detail" TProperty="string" Property="x => x.location_to" Class="fw-bold" Title="Điểm Đến" Width="200px" />
                        <PropertyColumn T="trip_detail" TProperty="DateTime" Property="x => x.time_start" Class="fw-bold" Title="Bắt Đầu" Width="150px" />
                        <PropertyColumn T="trip_detail" TProperty="DateTime" Property="x => x.time_end" Class="fw-bold" Title="Kết Thúc" Width="150px" />
                        <TemplateColumn T="trip_detail" Class="fw-bold" Title="Trạng Thái" Width="150px">
                            <CellTemplate Context="element">
                                @if (element.Item.status)
                                {
                                    <MudChip Color="Color.Success" Size="Size.Small" Variant="Variant.Text">Đang hoạt động</MudChip>
                                }
                                else
                                {
                                    <MudChip Color="Color.Error" Size="Size.Small" Variant="Variant.Text">Ngưng hoạt động</MudChip>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                        <TemplateColumn T="trip_detail" Class="fw-bold" Title="Chức năng" Width="150px">
                            <CellTemplate Context="element">
                                <MudTooltip Text="Đặt vé">
                                    <MudIconButton Href="@($"/rentail_guest_trip/{element.Item.id}")" Icon="@Icons.Material.Outlined.AddCircle" Color="Color.Secondary" Size="Size.Small" />
                                </MudTooltip>
                                <MudTooltip Text="Chỉnh sửa">
                                    <MudIconButton OnClick="@(async () => await OpenDetailUpdateDialog(element.Item))" Icon="far fa-edit" Color="Color.Success" Size="Size.Small" />
                                </MudTooltip>
                                <MudTooltip Text="Xóa">
                                    <MudIconButton Icon="far fa-trash-alt" Color="Color.Error" Size="Size.Small"
                                                   OnClick="@(async () => { await OpenDeleteDialog(element.Item); })" />
                                </MudTooltip>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="trip_detail" />
                    </PagerContent>
                </MudDataGrid>

            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

<script>
    window.triggerSelectClick = () => {
    const selectElements = document.querySelectorAll('.mud-select');

    selectElements.forEach(select => {
    select.click();
    });
    };
</script>
@code {
    [Parameter] public int Id { get; set; }

    private trip tripInfo = new trip();
    private List<trip_detail> tripDetails = new List<trip_detail>();
    private trip_detail_create newTripDetail = new trip_detail_create();
    private trip_detail_update updateTripDetail = new trip_detail_update();
    private MudForm form;
    private string url = "http://localhost:49922/api/Trips/trip";
    private string tripdetailUrl = "http://localhost:49922/api/Trips/tripdetail";
    private string _searchString;
    private string LastSegment;
    private string userRole;
    private bool isInitialized = false;
    private bool isLoading = false;


    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Tuyến xe", href: null, icon: @Icons.Material.Outlined.LocationOn),
        new BreadcrumbItem("Danh sách tuyến xe", href: "/gettrip", icon: @Icons.Material.Outlined.List),
        new BreadcrumbItem("Cập nhật", href: null, icon: @Icons.Material.Filled.Edit),
    };
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;

            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();

                    if (handler.CanReadToken(token))
                    {
                        var jwtToken = handler.ReadJwtToken(token);

                        var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role");

                        if (roleClaim != null)
                        {
                            userRole = roleClaim.Value;
                        }
                        else
                        {
                            Console.WriteLine("Role claim not found in the token.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi giải mã token: {ex.Message}");
                }
            }
            CheckRole();
            StateHasChanged();
        }
    }
    private void CheckRole()
    {
        if (userRole == "1")
        {
            Console.WriteLine("User is an Admin.");
        }
        else if (userRole == "2")
        {
            Console.WriteLine("User is a regular User.");
        }
        else if (userRole == "3")
        {
            Console.WriteLine("User is a regular Driver.");
        }
        else
        {
            isLoading = true;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<trip>($"{url}/{Id}");
            tripInfo = response;
            tripDetails = response.TripDetails.ToList();
            var uri = Navigation.Uri;
            LastSegment = GetLastSegment(uri);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải chuyến đi: {ex.Message}", Severity.Error);
        }

    }


    private string GetLastSegment(string url)
    {
        var segments = url.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);
        return segments.Length > 0 ? segments.Last() : string.Empty;
    }


    private async Task UpdateTrip()
    {
        try
        {
            if (form.IsValid)
            {

                var response = await httpClient.PutAsJsonAsync($"{url}/{Id}", tripInfo);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add($"Cập nhật chuyến đi thành công", Severity.Success);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Cập nhật thất bại: {response}", Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Cập nhật thất bại: {ex.Message}", Severity.Warning);
        }
    }

    private Func<trip_detail, bool> _quickFilter => x =>
       {
           if (string.IsNullOrWhiteSpace(_searchString))
               return true;

           return $"{x.trip_detail_code} {x.car_code} {x.car_name} {x.car_number} {x.fullname} {x.fullname} {x.location_from} {x.location_to} {x.time_start} {x.time_end}".Contains(_searchString, StringComparison.OrdinalIgnoreCase);
       };

    private async Task OpenDetailCreateDialog(trip_detail_create selectedTrip = null)
    {
        var parameters = new DialogParameters
        {
            { "SelectedTrip", selectedTrip ?? new trip_detail_create()}
        };

        var dialog = DialogService.Show<Add_Detail>("Thêm chuyến xe", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled && result.Data is trip_detail_create newTripDetail)
        {
            this.newTripDetail = newTripDetail;
            // await AddTripDetail();
        }
    }

    private async Task OpenGenDialog(trip_detail_create selectedTrip = null)
    {
        var parameters = new DialogParameters
        {
            { "SelectedTrip", selectedTrip ?? new trip_detail_create()}
        };

        var dialog = DialogService.Show<Add_Gen>("Gen chuyến xe", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled && result.Data is trip_detail_create newTripDetail)
        {
            this.newTripDetail = newTripDetail;
        }
    }
    private async Task OpenDetailUpdateDialog(trip_detail selectedTrip = null)
    {
        var parameters = new DialogParameters
        {
            { "SelectedTrip", selectedTrip ?? new trip_detail()}
        };

        var dialog = DialogService.Show<Update_Detail>("Chi tiết chuyến xe", parameters);
        var result = await dialog.Result;

        if (result.Data is trip_detail_update newTripDetail)
        {
            this.updateTripDetail = newTripDetail;
            await UpdateTripDetail();
        }

    }

    private async Task AddTripDetail()
    {
        try
        {
            newTripDetail.trip_id = int.Parse(LastSegment);
            var response = await httpClient.PostAsJsonAsync(tripdetailUrl, newTripDetail);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Thêm thành công", Severity.Success);
                await OnInitializedAsync();
            }
            else
            {
                Snackbar.Add($"Thêm thất bại", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi: {ex.Message}", Severity.Error);
        }
    }

    private async Task UpdateTripDetail()
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"{tripdetailUrl}/{updateTripDetail.id}", updateTripDetail);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Cập nhật chi tiết chuyến đi thành công", Severity.Success);
                await OnInitializedAsync();
            }
            else
            {
                Snackbar.Add($"Cập nhật thất bại: {response}", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Cập nhật thất bại: {ex.Message}", Severity.Warning);
        }
    }


    private async Task DeleteTrip(int id)
    {
        var response = await httpClient.DeleteAsync($"{tripdetailUrl}/{id}");
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add($"Xóa chuyến đi thành công", Severity.Success);
            await OnInitializedAsync();
        }
        else
        {
            Snackbar.Add("Xóa chuyến đi thất bại", Severity.Error);
        }
    }

    private async Task OpenDeleteDialog(trip_detail trip_detail)
    {
        var parameters = new DialogParameters
    {
        { "ContentText", $"Bạn có chắc chắn muốn xóa chi tiết chuyến đi {trip_detail.id}?" },
        { "ButtonText", "Xóa" },
        { "Color", Color.Error }
    };

        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<Delete_Detail>("Xác nhận xóa", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DeleteTripDetail(trip_detail);
        }
    }

    private async Task DeleteTripDetail(trip_detail trip_detail)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"{tripdetailUrl}/{trip_detail.id}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Đã xóa chi tiết chuyến đi {trip_detail.id} thành công", Severity.Success);
                await OnInitializedAsync();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Lỗi khi xóa tài xế: {response.ReasonPhrase}. Chi tiết: {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi xóa tài xế: {ex.Message}", Severity.Error);
        }
    }

    void RowClicked(DataGridRowClickEventArgs<trip_detail> args)
    {
        Console.WriteLine($"Row clicked: {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<trip_detail> args)
    {
        Console.WriteLine($"Row right clicked: {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<trip_detail> items)
    {
        Console.WriteLine($"Selected items changed: {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    private async Task GenTripdetail()
    {

    }
}
