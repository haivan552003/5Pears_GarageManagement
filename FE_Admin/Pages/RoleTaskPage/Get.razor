@page "/getroletask"
@inject HttpClient httpClient
@inject IJSRuntime js

<MudDataGrid T="role_task" MultiSelection="true" Items="@Elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Products</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="role_task" />
        <PropertyColumn T="role_task" TProperty="int" Property="x => x.id_role_task" />
        <PropertyColumn T="role_task" TProperty="string" Property="x => x.name" SortBy="@_sortBy" />
        <TemplateColumn T="role_task" Title="Actions">
            <CellTemplate Context="element">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/addproduct" Class="me-2">Thêm</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Info" Href="@($"/updateproducts/{element.Item.id_role_task}")" Class="me-2">Sửa</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" Href="@($"/deleteproduct/{element.Item.id_role_task}")">Xóa</MudButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="role_task" />
    </PagerContent>
</MudDataGrid>

@code {
    [Parameter] public int Id { get; set; }
    private IEnumerable<role_task> Elements = new List<role_task>();
    private Dictionary<int, string> CategoryDict = new Dictionary<int, string>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    private string url = "http://localhost:49922/api/RoleTask";

    private Func<role_task, object> _sortBy => x =>
    {
    if (_sortNameByLength)
        return x.name.Length;
    else
        return x.name;
    };

    private string GenerateEditUrl(int id)
    {
        return $"/updateproducts/{id}";
    }

    private string GenerateDeleteUrl(int id)
    {
        return $"/deleteproduct/{id}";
    }

    private string GetRoleTaskName(int cateId)
    {
        return CategoryDict.TryGetValue(cateId, out var name) ? name : "Unknown";
    }

    private Func<role_task, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if ($"{x.name} {x.id_role_task} {GetRoleTaskName(x.id_role_task)}".Contains(_searchString))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Elements = await httpClient.GetFromJsonAsync<List<role_task>>(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    void RowClicked(DataGridRowClickEventArgs<role_task> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<role_task> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<role_task> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}
