@page "/getroles"
@inject HttpClient httpClient
@inject IJSRuntime js
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
    <MudGrid Class="pa-0">
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-3" Items="_items"></MudBreadcrumbs>
            </MudPaper>
            <MudPaper Elevation="0">
                <MudDataGrid Class="mx-auto pa-2" T="roles" Dense="true" Hover="true" Bordered="true" Striped="true" MultiSelection="true" Items="@Elements"
                             SortMode="SortMode.Multiple" Filterable="false" QuickFilter="@_quickFilter"
                             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
                    <ToolBarContent>
                        <MudItem xs="4" Elevation="0" Class="pb-3">
                            <MudTextField @bind-Value="_searchString" Placeholder="Tìm kiếm..." Adornment="Adornment.Start" Immediate="true"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </MudItem>

                        <MudItem xs="8" Elevation="0" Class="d-flex justify-end flex-grow-1 gap-4 pb-3">
                            <MudButton Href="/addroles" Variant="Variant.Outlined" StartIcon="fas fa-plus" Color="Color.Info" Size="Size.Small">
                                Thêm mới
                            </MudButton>

                            <MudButton Href="/addproduct" Class="ml-2" Variant="Variant.Outlined" StartIcon="fas fa-upload" Color="Color.Tertiary" Size="Size.Small">
                                Nhập file
                            </MudButton>

                            <MudButton Href="/addproduct" Class="ml-2" Variant="Variant.Outlined" StartIcon="fas fa-download" Color="Color.Tertiary" Size="Size.Small">
                                Xuất file
                            </MudButton>
                        </MudItem>
                    </ToolBarContent>
                    <Columns>
                        <SelectColumn T="roles" />
                        <PropertyColumn T="roles" Style="width: 80%;" TProperty="string" Property="x => x.name" SortBy="@_sortBy" Class="fw-bold" Title="Name" />
                        <TemplateColumn T="roles" Class="fw-bold" Title="Chức năng">
                            <CellTemplate Context="element">
                                <MudTooltip Text="Chỉnh sửa">
                                    <MudIconButton Href="@($"/editroles/{element.Item.id}")" Icon="far fa-edit" Color="Color.Success" Size="Size.Small" />
                                </MudTooltip>
                                <MudTooltip Text="Xóa">
                                    <MudIconButton Icon="far fa-trash-alt" Color="Color.Error" Size="Size.Small" OnClick="@(() => OpenDeleteDialog(element.Item))" />
                                </MudTooltip>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="roles" />
                    </PagerContent>
                </MudDataGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    [Parameter] public int Id { get; set; }
    private IEnumerable<roles> Elements = new List<roles>();
    private Dictionary<int, string> CategoryDict = new Dictionary<int, string>();
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();
    private string url = "http://localhost:49922/api/Roles";

    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Công việc", href: "/getroles", icon: @Icons.Material.Outlined.WorkOutline),
        new BreadcrumbItem("Danh sách công việc", href: "/getroles", icon: @Icons.Material.Outlined.List),
    };

    private Func<roles, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.name.Length;
        else
            return x.name;
    };

    private Func<roles, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return x.name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
               x.id.ToString().Contains(_searchString);
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Elements = await httpClient.GetFromJsonAsync<List<roles>>(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    void RowClicked(DataGridRowClickEventArgs<roles> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<roles> args)
    {
        _events.Insert(0, $"Event = RowRightClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void SelectedItemsChanged(HashSet<roles> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    private async Task OpenDeleteDialog(roles role)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Bạn có chắc chắn muốn xóa công việc { role.name}?" },
            { "ButtonText", "Xóa" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<Delete>("Xác nhận xóa", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DeleteRole(role);
        }
    }

    private async Task DeleteRole(roles role)
    {
        try
        {
            var response = await httpClient.DeleteAsync($"{url}/{role.id}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Đã xóa công việc {role.name} thành công", Severity.Success);
                await LoadRoles();  // Tải lại danh sách sau khi xóa
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Lỗi khi xóa công việc: {response.ReasonPhrase}. Chi tiết: {errorContent}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi xóa công việc: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadRoles()
    {
        Elements = await httpClient.GetFromJsonAsync<List<roles>>(url);
    }
}
