@page "/addcus_addresstask"
@inject HttpClient httpClient
@inject IJSRuntime js
@inject ISnackbar Snackbar

<MudContainer Class="mt-14 pa-0" MaxWidth="MaxWidth.False">
    @if (showSuccess)
    {
        <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Style="position:fixed; top:60px; right:20px; z-index:9999;">
            Thêm thành công
        </MudAlert>
    }
    else if (showError)
    {
        <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Style="position:fixed; top:60px; right:20px; z-index:9999;">
            Thêm thất bại
        </MudAlert>
    }

    <MudGrid>
        <MudItem xs="12">
            <MudPaper Elevation="0" Class="pa-3 mb-3" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Grey.Lighten4};")">
                <MudBreadcrumbs Class="pa-0" Items="_items"></MudBreadcrumbs>
            </MudPaper>
        </MudItem>
        <MudItem xs="6" Class="mx-auto">
            <MudPaper Elevation="0" Class="pa-3">
                <MudItem xs="12">
                    <MudPaper Elevation="4" Class="p-4">
                        <MudText Typo="Typo.h6" Class="mb-5">Thêm địa chỉ khách hàng</MudText>
                        <MudForm @ref="form" @bind-IsValid="isFormValid" Style="height:auto">
                            <MudTextField ShrinkLabel @bind-Value="newCustomer.address" Label="Địa chỉ"
                                          Validation="@(new Func<string, IEnumerable<string>>(AddressValidate))"
                                          Placeholder="Địa chỉ" Variant="Variant.Outlined" Required="true" />

                            <MudSelect @bind-Value="newCustomer.id_cus" Label="Vai trò" Required="true" Variant="Variant.Outlined">
                                @if (cus != null)
                                {
                                    @foreach (var role in cus)
                                    {
                                        <MudSelectItem Value="role.Id">@role.fullname</MudSelectItem>
                                    }
                                }
                            </MudSelect>

                            <MudTextField ShrinkLabel @bind-Value="newCustomer.type" Label="Loại"
                                          Validation="@(new Func<string, IEnumerable<string>>(AddressValidate))"
                                          Placeholder="Loại" Variant="Variant.Outlined" Required="true" />

                            <MudSelect @bind-Value="newCustomer.status" Label="Status" Required="true" Variant="Variant.Outlined">
                                <MudSelectItem Value="true">Đang hoạt động </MudSelectItem>
                                <MudSelectItem Value="false">Ngưng hoạt động</MudSelectItem>
                            </MudSelect>

                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.Save" Color="Color.Primary" OnClick="AddCustomer" Class="mt-3">Lưu</MudButton>
                        </MudForm>
                    </MudPaper>
                </MudItem>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private cus_address newCustomer = new cus_address();
    private bool isFormValid = false;
    private bool showSuccess = false;
    private bool showError = false;
    private MudForm form;
    private string url = "http://localhost:49922/api/Cus_Address";
    private string cusUrl = "http://localhost:49922/api/Customer";
    private List<customers> cus = new List<customers>(); 


    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Khách hàng", href: "/getcustomer", icon: @Icons.Material.Outlined.People),
        new BreadcrumbItem("Danh sách khách hàng", href: "/getcustomer", icon: @Icons.Material.Outlined.List),
        new BreadcrumbItem("Thêm mới", href: "/addcustomertask", icon: @Icons.Material.Filled.AddCircleOutline),
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadCus();
    }

    private async Task LoadCus()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<customers>>(cusUrl);
            if (response != null)
            {
                cus = response;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi tải danh sách vai trò: {ex.Message}", Severity.Error);
        }
    }
    private IEnumerable<string> AddressValidate(string field)
    {
        if (string.IsNullOrWhiteSpace(field))
        {
            yield return "Vui lòng điền thông tin";
        }
    }

    private async Task AddCustomer()
    {
        try
        {
            if (form.IsValid)
            {
                var response = await httpClient.PostAsJsonAsync(url, newCustomer);
                if (response.IsSuccessStatusCode)
                {
                    newCustomer = new cus_address(); // Reset lại đối tượng newCustomer

                    Snackbar.Add($"Thêm thành công", Severity.Success);
                    showSuccess = true;
                }
                else
                {
                    Snackbar.Add($"Thêm thất bại", Severity.Warning);
                    showError = true;
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Thêm thất bại: {ex.Message}", Severity.Warning);
        }
    }
}
