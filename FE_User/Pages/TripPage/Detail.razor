@page "/getTrip/{id:int}"
@page "/getTrip/{tripIdTo:int}/{tripIdReturn:int?}"
@using MudBlazor
@using System.Text.Json
@using System.Collections.Concurrent
@using System.Text.RegularExpressions
@inject HttpClient httpClient
@inject IJSRuntime js
@inject NavigationManager Navigation
@implements IAsyncDisposable

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255); /* Màu trắng với độ mờ 50% */
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999; /* Đảm bảo overlay hiển thị trên các thành phần khác */
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <MudItem xs="12" Class="text-center">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
        </MudItem>
    </div>
}
@if (id > 0 && id != null)
{
    <MudContainer Class="pt-5">
        <MudGrid>
            <MudItem xs="7">
                <MudPaper Class="p-4" Elevation="1">
                    <MudGrid>
                        <MudItem xs="12" Class="mx-auto">
                            <MudText Typo="Typo.h6" Color="Color.Primary">CHỌN GHẾ</MudText>
                        </MudItem>
                        @{
                            int seatCount = car_seat.Count();
                        }
                        @if (seatCount == 17)
                        {
                            <MudItem xs="10">
                                <div class="bus-seat-layout">
                                    @foreach (var item in car_seat)
                                    {
                                        var isDisabled = item.status == "Đã đặt" || takenSeats.Contains(item.id.ToString()) || item.name.ToLower() == "tài xế";
                                        <button class="btn btn-outline-primary @((isDisabled ? "disabled" : "")) @(selectedSeats.Contains(item.id) ? "btn-outline-success" : "")"
                                                style="grid-row: @item.row; grid-column: @item.col;"
                                                disabled="@isDisabled"
                                                @onclick="() => OnSeatSelected(item.id, item.name)">
                                            @item.name
                                        </button>
                                    }
                                </div>
                            </MudItem>
                        }
                        else if (seatCount == 30)
                        {
                            <MudItem xs="10">
                                <div class="bus-seat-layout29">
                                    @foreach (var item in car_seat)
                                    {
                                        var isDisabled = item.status == "Đã đặt" || takenSeats.Contains(item.id.ToString()) || item.name.ToLower() == "tài xế";
                                        <button class="btn btn-outline-primary @((isDisabled ? "disabled" : "")) @(selectedSeats.Contains(item.id) ? "btn-outline-success" : "")"
                                                style="grid-row: @item.row; grid-column: @item.col;"
                                                disabled="@isDisabled"
                                                @onclick="() => OnSeatSelected(item.id, item.name)">
                                            @item.name
                                        </button>
                                    }
                                </div>
                            </MudItem>
                        }
                        else if (seatCount == 45)
                        {
                            <MudItem xs="10">
                                <div class="bus-seat-layout44">
                                    @foreach (var item in car_seat.Where(seat => int.Parse(seat.id.ToString()) % 2 != 0))
                                    {
                                        var isDisabled = item.status == "Đã đặt" || takenSeats.Contains(item.id.ToString()) || item.name.ToLower() == "tài xế";
                                        <button class="btn btn-outline-primary @((isDisabled ? "disabled" : "")) @(selectedSeats.Contains(item.id) ? "btn-outline-success" : "")"
                                                style="grid-row: @item.row; grid-column: @item.col;"
                                                disabled="@isDisabled"
                                                @onclick="() => OnSeatSelected(item.id, item.name)">
                                            @item.name
                                        </button>
                                    }
                                </div>

                            </MudItem>
                            <MudItem xs="10">
                                <div class="bus-seat-layout44">
                                    @foreach (var item in car_seat.Where(seat => int.Parse(seat.id.ToString()) % 2 == 0))
                                    {
                                        var isDisabled = item.status == "Đã đặt" || takenSeats.Contains(item.id.ToString()) || item.name.ToLower() == "tài xế";
                                        <button class="btn btn-outline-primary @((isDisabled ? "disabled" : "")) @(selectedSeats.Contains(item.id) ? "btn-outline-success" : "")"
                                                style="grid-row: @item.row; grid-column: @item.col;"
                                                disabled="@isDisabled"
                                                @onclick="() => OnSeatSelected(item.id, item.name)">
                                            @item.name
                                        </button>
                                    }
                                </div>
                            </MudItem>

                        }
                        else
                        {
                            <MudText>Số ghế không hợp lệ: @seatCount</MudText>
                        }


                    </MudGrid>
                </MudPaper>
                <MudPaper Class="p-4 mt-4" Elevation="1">
                    <MudText Align="Align.Left" Typo="Typo.h6" Color="Color.Primary">ĐIỀU KHOẢN LƯU Ý</MudText>
                    <MudText Align="Align.Justify" Typo="Typo.subtitle1">
                        Quý khách vui lòng có mặt tại bến xuất phát của xe trước ít nhất 30 phút giờ xe khởi hành, mang theo thông báo
                        đã thanh toán vé thành công có chứa mã vé được gửi từ hệ thống BOXCARS.
                    </MudText>
                </MudPaper>
            </MudItem>

            <MudItem xs="5">
                <MudPaper Class="p-4" Elevation="1">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Color="Color.Primary">THÔNG TIN VÉ</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Tuyến Xe</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@TRIPDETAILS.from - @TRIPDETAILS.to</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Chuyến Xe</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@TRIPDETAILS.location_from - @TRIPDETAILS.location_to</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Khởi hành</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@TRIPDETAILS.time_start</MudText>
                        </MudItem>

                        <MudItem xs="4">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Số Lượng Ghế</MudText>
                        </MudItem>
                        <MudItem xs="8">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@selectedSeats.Count</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Tên ghế</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1"> @string.Join(", ", selectedSeatNames)</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Giá vé</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@TRIPDETAILS.price_voucher.ToString("#,##0") VNĐ</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Tổng Tiền</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Color="Color.Secondary" Class="fw-bold" Typo="Typo.subtitle1">@TRIPDETAILS.sale.ToString("#,##0") VNĐ</MudText>
                        </MudItem>
                        @if (cus_id != 0)
                        {
                            <MudItem xs="12">
                                <MudButton Variant="Variant.Filled" Class="w-100" Color="Color.Primary" Size="Size.Medium" OnClick="@OnCheckout">Thanh Toán</MudButton>
                            </MudItem>
                            @if (errorMessageCheckCus != null)
                            {
                                <MudItem xs="12">
                                    <MudText Color="Color.Error" Class="mt-2 text-center">
                                        @errorMessageCheckCus
                                    </MudText>
                                </MudItem>
                            }
                        }
                    </MudGrid>
                </MudPaper>


                @if (cus_id == 0)
                {

                    <MudPaper Class="p-4 mt-4" Elevation="1">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6" Color="Color.Primary">VUI LÒNG ĐIỀN THÔNG TIN</MudText>
                            </MudItem>

                            <MudItem xs="12" Class="mb-3">
                                <MudText Align="Align.Left" Typo="Typo.subtitle1">
                                    Họ tên
                                </MudText>
                                <MudTextField ShrinkLabel @bind-Value="addCus.fullname" Variant="Variant.Outlined" Placeholder="Vui lòng nhập họ tên" RequiredError="Vui lòng nhập họ tên"></MudTextField>
                                <MudText Align="Align.Left" Typo="Typo.subtitle1">
                                    Email
                                </MudText>
                                <MudTextField ShrinkLabel @bind-Value="addCus.email" Placeholder="Vui lòng nhập email" Variant="Variant.Outlined" RequiredError="Vui lòng nhập email"></MudTextField>
                                <MudText Align="Align.Left" Typo="Typo.subtitle1">
                                    Số điện thoại
                                </MudText>
                                <MudTextField ShrinkLabel @bind-Value="addCus.phone_number" Variant="Variant.Outlined" Placeholder="Vui lòng nhập số điện thoại" RequiredError="Vui lòng nhập số điện thoại"></MudTextField>
                                <MudItem xs="12" Class="mt-3">
                                    <MudButton Variant="Variant.Filled" Class="w-100" Color="Color.Primary" Size="Size.Medium" OnClick="@OnCheckout">Thanh Toán</MudButton>
                                </MudItem>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>

                    @if (errorMessageCheckCus != null)
                    {
                        <MudItem xs="12">
                            <MudText Color="Color.Error" Class="mt-2 text-center">
                                @errorMessageCheckCus
                            </MudText>
                        </MudItem>
                    }
                }
                @if (cus_id != 0)
                {
                    <MudPaper Class="p-4 mt-4" Elevation="1">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6" Color="Color.Primary">THÔNG TIN KHÁCH HÀNG</MudText>
                            </MudItem>

                            <MudItem xs="4" Class="mb-3">
                                <MudText Align="Align.Left" Typo="Typo.subtitle1">
                                    Tên khách hàng
                                </MudText>
                                <MudText Align="Align.Left" Typo="Typo.subtitle1">
                                    Email
                                </MudText>
                                <MudText Align="Align.Left" Typo="Typo.subtitle1">
                                    Số điện thoại
                                </MudText>
                            </MudItem>

                            <MudItem xs="8" Class="mb-3">
                                <MudText Align="Align.Right" Class="fw-bold" Typo="Typo.subtitle1">
                                    @customer.fullname
                                </MudText>
                                <MudText Align="Align.Right" Class="fw-bold" Typo="Typo.subtitle1">
                                    @customer.email
                                </MudText>
                                <MudText Align="Align.Right" Class="fw-bold" Typo="Typo.subtitle1">
                                    @customer.phone_number
                                </MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }
            </MudItem>
        </MudGrid>
    </MudContainer>
}
else
{
    <MudContainer Class="pt-5">
        <MudGrid>
            <MudItem xs="7">
                <MudPaper Class="p-4" Elevation="1">
                    <MudGrid>
                        <MudItem xs="6" Class="mx-auto">
                            <MudText Typo="Typo.h6" Color="Color.Primary">CHUYẾN ĐI</MudText>
                        </MudItem>
                        <MudItem xs="6" Class="mx-auto">
                            <MudText Typo="Typo.h6" Color="Color.Primary">CHUYẾN VỀ</MudText>
                        </MudItem>
                    </MudGrid>
                    <MudGrid>
                        <MudItem xs="6">
                            @{
                                int seatCountTo = car_seat_to.Count();
                            }

                            @if (seatCountTo == 17)
                            {
                                <div class="bus-seat-layout">
                                    @foreach (var item in car_seat_to)
                                    {
                                        var isDisabled = item.status == "Đã đặt" || takenSeats.Contains(item.id.ToString()) || item.name.ToLower() == "tài xế";
                                        <button class="btn btn-outline-primary @((isDisabled ? "disabled" : "")) @(selectedSeatTos.Contains(item.id) ? "btn-outline-success" : "")"
                                                style="grid-row: @item.row; grid-column: @item.col;"
                                                disabled="@isDisabled"
                                                @onclick="() => OnSeatSelectedTo(item.id, item.name)">
                                            @item.name
                                        </button>
                                    }
                                </div>
                            }
                            else if (seatCountTo == 30)
                            {
                                <div class="bus-seat-layout29">
                                    @foreach (var item in car_seat_to)
                                    {
                                        var isDisabled = item.status == "Đã đặt" || takenSeats.Contains(item.id.ToString()) || item.name.ToLower() == "tài xế";
                                        <button class="btn btn-outline-primary @((isDisabled ? "disabled" : "")) @(selectedSeatTos.Contains(item.id) ? "btn-outline-success" : "")"
                                                style="grid-row: @item.row; grid-column: @item.col;"
                                                disabled="@isDisabled"
                                                @onclick="() => OnSeatSelectedTo(item.id, item.name)">
                                            @item.name
                                        </button>
                                    }
                                </div>
                            }
                            else if (seatCountTo == 45)
                            {
                                <div class="bus-seat-layout44">
                                    @foreach (var item in car_seat_to.Where(seat => int.Parse(seat.id.ToString()) % 2 != 0))
                                    {
                                        var isDisabled = item.status == "Đã đặt" || takenSeats.Contains(item.id.ToString()) || item.name.ToLower() == "tài xế";
                                        <button class="btn btn-outline-primary @((isDisabled ? "disabled" : "")) @(selectedSeatTos.Contains(item.id) ? "btn-outline-success" : "")"
                                                style="grid-row: @item.row; grid-column: @item.col;"
                                                disabled="@isDisabled"
                                                @onclick="() => OnSeatSelectedTo(item.id, item.name)">
                                            @item.name
                                        </button>
                                    }
                                </div>

                                <div class="bus-seat-layout44">
                                    @foreach (var item in car_seat_to.Where(seat => int.Parse(seat.id.ToString()) % 2 == 0))
                                    {
                                        var isDisabled = item.status == "Đã đặt" || takenSeats.Contains(item.id.ToString()) || item.name.ToLower() == "tài xế";
                                        <button class="btn btn-outline-primary @((isDisabled ? "disabled" : "")) @(selectedSeatTos.Contains(item.id) ? "btn-outline-success" : "")"
                                                style="grid-row: @item.row; grid-column: @item.col;"
                                                disabled="@isDisabled"
                                                @onclick="() => OnSeatSelectedTo(item.id, item.name)">
                                            @item.name
                                        </button>
                                    }
                                </div>
                            }

                            else
                            {
                                <MudText>Số ghế không hợp lệ: @seatCountTo</MudText>
                            }
                        </MudItem>
                        <MudItem xs="6">
                            @{
                                int seatCountReturn = car_seat_return.Count();
                            }
                            @if (seatCountReturn == 17)
                            {
                                <div class="bus-seat-layout">
                                    @foreach (var item in car_seat_return)
                                    {
                                        var isDisabled = item.status == "Đã đặt" || takenSeats.Contains(item.id.ToString()) || item.name.ToLower() == "tài xế";
                                        <button class="btn btn-outline-primary @((isDisabled ? "disabled" : "")) @(selectedSeatReturns.Contains(item.id) ? "btn-outline-success" : "")"
                                                style="grid-row: @item.row; grid-column: @item.col;"
                                                disabled="@isDisabled"
                                                @onclick="() => OnSeatSelectedReturn(item.id, item.name)">
                                            @item.name
                                        </button>
                                    }
                                </div>
                            }
                            else if (seatCountReturn == 30)
                            {
                                <div class="bus-seat-layout29">
                                    @foreach (var item in car_seat_return)
                                    {
                                        var isDisabled = item.status == "Đã đặt" || takenSeats.Contains(item.id.ToString()) || item.name.ToLower() == "tài xế";
                                        <button class="btn btn-outline-primary @((isDisabled ? "disabled" : "")) @(selectedSeatReturns.Contains(item.id) ? "btn-outline-success" : "")"
                                                style="grid-row: @item.row; grid-column: @item.col;"
                                                disabled="@isDisabled"
                                                @onclick="() => OnSeatSelectedReturn(item.id, item.name)">
                                            @item.name
                                        </button>
                                    }
                                </div>
                            }
                            else if (seatCountReturn == 45)
                            {
                                <div class="bus-seat-layout44">
                                    @foreach (var item in car_seat_return.Where(seat => int.Parse(seat.id.ToString()) % 2 != 0))
                                    {
                                        var isDisabled = item.status == "Đã đặt" || takenSeats.Contains(item.id.ToString()) || item.name.ToLower() == "tài xế";
                                        <button class="btn btn-outline-primary @((isDisabled ? "disabled" : "")) @(selectedSeatReturns.Contains(item.id) ? "btn-outline-success" : "")"
                                                style="grid-row: @item.row; grid-column: @item.col;"
                                                disabled="@isDisabled"
                                                @onclick="() => OnSeatSelectedReturn(item.id, item.name)">
                                            @item.name
                                        </button>
                                    }
                                </div>

                                <div class="bus-seat-layout44">
                                    @foreach (var item in car_seat_return.Where(seat => int.Parse(seat.id.ToString()) % 2 == 0))
                                    {
                                        var isDisabled = item.status == "Đã đặt" || takenSeats.Contains(item.id.ToString()) || item.name.ToLower() == "tài xế";
                                        <button class="btn btn-outline-primary @((isDisabled ? "disabled" : "")) @(selectedSeatReturns.Contains(item.id) ? "btn-outline-success" : "")"
                                                style="grid-row: @item.row; grid-column: @item.col;"
                                                disabled="@isDisabled"
                                                @onclick="() => OnSeatSelectedReturn(item.id, item.name)">
                                            @item.name
                                        </button>
                                    }
                                </div>
                            }
                            else
                            {
                                <MudText>Số ghế không hợp lệ: @seatCountReturn</MudText>
                            }
                        </MudItem>
                    </MudGrid>




                </MudPaper>
                <MudPaper Class="p-4 mt-4" Elevation="1">
                    <MudText Align="Align.Left" Typo="Typo.h6" Color="Color.Primary">ĐIỀU KHOẢN LƯU Ý</MudText>
                    <MudText Align="Align.Justify" Typo="Typo.subtitle1">
                        Quý khách vui lòng có mặt tại bến xuất phát của xe trước ít nhất 30 phút giờ xe khởi hành, mang theo thông báo
                        đã thanh toán vé thành công có chứa mã vé được gửi từ hệ thống BOXCARS.
                    </MudText>
                </MudPaper>
            </MudItem>

            <MudItem xs="5">
                <MudPaper Class="p-4" Elevation="1">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Color="Color.Primary">THÔNG TIN VÉ ĐI</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Tuyến Xe</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@tripTo.from - @tripTo.to</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Chuyến Xe</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@tripTo.location_from - @tripTo.location_to</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Khởi hành</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@tripTo.time_start</MudText>
                        </MudItem>

                        <MudItem xs="4">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Số Lượng Ghế</MudText>
                        </MudItem>
                        <MudItem xs="8">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@selectedSeatTos.Count</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Tên ghế</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1"> @string.Join(", ", selectedSeatToNames)</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Giá vé</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@tripTo.price_voucher.ToString("#,##0") VNĐ</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Tổng Tiền</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Color="Color.Secondary" Class="fw-bold" Typo="Typo.subtitle1">@tripTo.sale.ToString("#,##0") VNĐ</MudText>
                        </MudItem>
                    </MudGrid>
                </MudPaper>

                <MudPaper Class="p-4 mt-4" Elevation="1">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Color="Color.Primary">THÔNG TIN VÉ VỀ</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Tuyến Xe</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@tripReturn.from - @tripReturn.to</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Chuyến Xe</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@tripReturn.location_from - @tripReturn.location_to</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Khởi hành</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@tripReturn.time_start</MudText>
                        </MudItem>

                        <MudItem xs="4">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Số Lượng Ghế</MudText>
                        </MudItem>
                        <MudItem xs="8">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@selectedSeatReturns.Count</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Tên ghế</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1"> @string.Join(", ", selectedSeatReturnNames)</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Giá vé</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Class="fw-bold" Typo="Typo.subtitle1">@tripReturn.price_voucher.ToString("#,##0") VNĐ</MudText>
                        </MudItem>

                        <MudItem xs="3">
                            <MudText Typo="Typo.subtitle1" Color="Color.Default">Tổng Tiền</MudText>
                        </MudItem>
                        <MudItem xs="9">
                            <MudText Align="Align.End" Color="Color.Secondary" Class="fw-bold" Typo="Typo.subtitle1">@tripReturn.sale.ToString("#,##0") VNĐ</MudText>
                        </MudItem>

                    </MudGrid>
                </MudPaper>
                <MudGrid Class="mt-4 mb-4">
                    @if (cus_id != 0)
                    {
                        <MudItem xs="12">
                            <MudButton Variant="Variant.Filled" Class="w-100" Color="Color.Primary" Size="Size.Medium" OnClick="@OnCheckoutToReturn">Thanh Toán</MudButton>
                        </MudItem>
                        @if (errorMessageCheckCus != null)
                        {
                            <MudItem xs="12">
                                <MudText Color="Color.Error" Class="mt-2 text-center">
                                    @errorMessageCheckCus
                                </MudText>
                            </MudItem>
                        }
                    }
                </MudGrid>

                @if (cus_id == 0)
                {

                    <MudPaper Class="p-4 mt-4" Elevation="1">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6" Color="Color.Primary">VUI LÒNG ĐIỀN THÔNG TIN</MudText>
                            </MudItem>

                            <MudItem xs="12" Class="mb-3">
                                <MudText Align="Align.Left" Typo="Typo.subtitle1">
                                    Họ tên
                                </MudText>
                                <MudTextField ShrinkLabel @bind-Value="addCus.fullname" Variant="Variant.Outlined" Placeholder="Vui lòng nhập họ tên" RequiredError="Vui lòng nhập họ tên"></MudTextField>
                                <MudText Align="Align.Left" Typo="Typo.subtitle1">
                                    Email
                                </MudText>
                                <MudTextField ShrinkLabel @bind-Value="addCus.email" Placeholder="Vui lòng nhập email" Variant="Variant.Outlined" RequiredError="Vui lòng nhập email"></MudTextField>
                                <MudText Align="Align.Left" Typo="Typo.subtitle1">
                                    Số điện thoại
                                </MudText>
                                <MudTextField ShrinkLabel @bind-Value="addCus.phone_number" Variant="Variant.Outlined" Placeholder="Vui lòng nhập số điện thoại" RequiredError="Vui lòng nhập số điện thoại"></MudTextField>
                                <MudItem xs="12" Class="mt-3">
                                    <MudButton Variant="Variant.Filled" Class="w-100" Color="Color.Primary" Size="Size.Medium" OnClick="@OnCheckoutToReturn">Thanh Toán</MudButton>
                                </MudItem>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>

                    @if (errorMessageCheckCus != null)
                    {
                        <MudItem xs="12">
                            <MudText Color="Color.Error" Class="mt-2 text-center">
                                @errorMessageCheckCus
                            </MudText>
                        </MudItem>
                    }
                }
                @if (cus_id != 0)
                {
                    <MudPaper Class="p-4 mt-4" Elevation="1">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h6" Color="Color.Primary">THÔNG TIN KHÁCH HÀNG</MudText>
                            </MudItem>

                            <MudItem xs="4" Class="mb-3">
                                <MudText Align="Align.Left" Typo="Typo.subtitle1">
                                    Tên khách hàng
                                </MudText>
                                <MudText Align="Align.Left" Typo="Typo.subtitle1">
                                    Email
                                </MudText>
                                <MudText Align="Align.Left" Typo="Typo.subtitle1">
                                    Số điện thoại
                                </MudText>
                            </MudItem>

                            <MudItem xs="8" Class="mb-3">
                                <MudText Align="Align.Right" Class="fw-bold" Typo="Typo.subtitle1">
                                    @customer.fullname
                                </MudText>
                                <MudText Align="Align.Right" Class="fw-bold" Typo="Typo.subtitle1">
                                    @customer.email
                                </MudText>
                                <MudText Align="Align.Right" Class="fw-bold" Typo="Typo.subtitle1">
                                    @customer.phone_number
                                </MudText>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }
            </MudItem>
        </MudGrid>
    </MudContainer>

}
<script>
    // Lấy token từ localStorage
    function getAuthToken() {
    return localStorage.getItem("authToken");
    }

</script>
<style>
    .bus-seat-layout, .bus-seat-layout29, .bus-seat-layout44 {
        display: grid;
        grid-gap: 10px;
        padding: 2px;
        justify-items: center;
    }

    .bus-seat-layout {
        grid-template-columns: repeat(4, 40px);
        grid-template-rows: repeat(5, 30px);
    }

    .bus-seat-layout29 {
        grid-template-columns: repeat(5, 40px);
        grid-template-rows: repeat(7, 30px);
    }

    .bus-seat-layout44 {
        grid-template-columns: repeat(5, 40px);
        grid-template-rows: repeat(7, 30px);
    }

    .btn {
        width: 40px;
        height: 35px;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 10px;
        padding: 0;
    }

        .btn:disabled {
            cursor: not-allowed;
            background-color: lightgrey
        }

</style>
@code {
    [Parameter] public int id { get; set; }
    [Parameter] public int? tripIdTo { get; set; }
    [Parameter] public int? tripIdReturn { get; set; }
    private int cus_id;
    private HubConnection? hubConnection;
    private List<string> takenSeats = new List<string>();

    private trip trips;
    private TRIPDETAILS TRIPDETAILS = new TRIPDETAILS();
    private TRIPDETAILS tripTo = new TRIPDETAILS();
    private TRIPDETAILS tripReturn = new TRIPDETAILS();
    private List<car_seat> car_seat = new List<car_seat>();
    private List<car_seat> car_seat_to = new List<car_seat>();
    private List<car_seat> car_seat_return = new List<car_seat>();
    private List<car_seat_not_null> car_seat_not_null;
    private customer customer = new customer();
    private customer addCus = new customer();
    private string urlTrip = "http://localhost:49922/api/Trips/trip";
    private string urlCus = "http://localhost:49922/api/Customer";
    private string urlBill = "http://localhost:49922/api/GuestTrip";
    private string urlTopGuestTrip = "http://localhost:49922/api/GuestTrip/GetTop";
    private string urlViewTrip = "http://localhost:49922/api/Trips/viewTrip/";
    private string urlSeatNotNull = "http://localhost:49922/api/GuestTrip/GetSeatNotNull/";
    private string urlVNPayCreate = "http://localhost:49922/api/Payment/create-payment";
    private string urlAddCus = "http://localhost:49922/api/Customer";
    private string urlGetTopCus = "http://localhost:49922/api/Customer/GetTop";

    private string errorMessageCheckCus;
    private List<int> selectedSeats = new List<int>();
    private List<string> selectedSeatNames = new List<string>();

    private List<int> selectedSeatTos = new List<int>();
    private List<string> selectedSeatToNames = new List<string>();
    private List<int> selectedSeatReturns = new List<int>();
    private List<string> selectedSeatReturnNames = new List<string>();


    private static ConcurrentDictionary<string, bool> userCheckoutStatus = new ConcurrentDictionary<string, bool>();

    private Timer? inactivityTimer;

    private guest_trip_create bill = new guest_trip_create();

    private bool isHubConnected = false;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        if (id > 0 && id != null)
        {
            isLoading = true;
            await LoadTripDetail();
            hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("http://localhost:49922/seatHub"))
            .Build();

            // Xử lý chọn ghế từ các client khác
            hubConnection.On<int>("ReceiveSeatSelection", (seatId) =>
            {
                if (!takenSeats.Contains(seatId.ToString()))
                {
                    takenSeats.Add(seatId.ToString());
                    StateHasChanged();
                }
            });

            // Xử lý bỏ chọn ghế từ các client khác
            hubConnection.On<int>("ReceiveSeatDeselection", (seatId) =>
            {
                if (takenSeats.Contains(seatId.ToString()))
                {
                    takenSeats.Remove(seatId.ToString());
                    StateHasChanged();
                }
            });

            // Nhận toàn bộ danh sách ghế đã chọn khi client mới kết nối
            hubConnection.On<List<int>>("ReceiveAllSelectedSeats", (seatIds) =>
            {
                takenSeats = seatIds.Select(id => id.ToString()).ToList();
                StateHasChanged();
            });

            hubConnection.On("ReceiveCheckoutNotification", async () =>
             {
                 await ReloadSeats();
                 await InvokeAsync(() => StateHasChanged());
             });

            await hubConnection.StartAsync();

            InitializeInactivityTimer();
            isLoading = false;
        }
        else
        {
            isLoading = true;

            await LoadTripDetailToReturn();
            await js.InvokeVoidAsync("localStorage.removeItem", "selectedTripIdTo");
            await js.InvokeVoidAsync("localStorage.removeItem", "selectedTripIdReturn");
            isLoading = false;
        }
        var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (!string.IsNullOrEmpty(token))
        {
            // Giải mã token
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            // Lấy giá trị của 'username' từ payload của token
            var usernameClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "id");

            if (usernameClaim != null)
            {
                cus_id = (int.Parse(usernameClaim.Value));
                await LoadUser();
            }
        }

    }

    private void InitializeInactivityTimer()
    {
        inactivityTimer = new Timer(async _ =>
        {
            if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
            {
                await hubConnection.StopAsync();
            }

            await InvokeAsync(() =>
            {
                Navigation.NavigateTo("http://localhost:5112/");
            });
        }, null, TimeSpan.FromMinutes(5), Timeout.InfiniteTimeSpan);

        InterceptUserActivity();
    }

    private async Task ResetInactivityTimer()
    {
        if (inactivityTimer != null)
        {
            inactivityTimer.Change(TimeSpan.FromSeconds(10), Timeout.InfiniteTimeSpan);
        }
    }

    private void InterceptUserActivity()
    {
        var dotNetRef = DotNetObjectReference.Create(this);
        js.InvokeVoidAsync("addEventListenersForActivity", dotNetRef);
    }

    [JSInvokable]
    public async Task UserActivityDetected()
    {
        await ResetInactivityTimer();
    }
    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task ReloadSeats()
    {
        var currentSelectedSeats = new List<int>(selectedSeats);

        var seatsResponse = await httpClient.GetFromJsonAsync<TRIPDETAILS>($"{urlViewTrip}{id}");
        if (seatsResponse != null)
        {
            TRIPDETAILS = seatsResponse;

            takenSeats = seatsResponse.car_seat
                .Where(seat => seat.status == "Đã đặt")
                .Select(seat => seat.id.ToString())
                .ToList();
            Console.WriteLine("Taken Seats: " + string.Join(", ", takenSeats));
        }

        selectedSeats = currentSelectedSeats;
        Console.WriteLine("Restored Selected Seats: " + string.Join(", ", selectedSeats));
    }


    private async Task LoadUser()
    {
        customer = await httpClient.GetFromJsonAsync<customer>($"{urlCus}/{cus_id}");
    }
    private async Task LoadTripDetail()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<TRIPDETAILS>($"{urlViewTrip}{id}");
            TRIPDETAILS = response;
            car_seat = response.car_seat.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task LoadTripDetailToReturn()
    {
        try
        {
            var responseTo = await httpClient.GetFromJsonAsync<TRIPDETAILS>($"{urlViewTrip}{tripIdTo}");
            tripTo = responseTo;
            car_seat_to = responseTo.car_seat.ToList();

            var responseReturn = await httpClient.GetFromJsonAsync<TRIPDETAILS>($"{urlViewTrip}{tripIdReturn}");
            tripReturn = responseReturn;
            car_seat_return = responseReturn.car_seat.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task OnSeatSelected(int seatId, string seatName)
    {
        if (selectedSeats.Contains(seatId))
        {
            selectedSeats.Remove(seatId);
            selectedSeatNames.Remove(seatName);

            if (hubConnection?.State == HubConnectionState.Connected)
            {
                await hubConnection.SendAsync("UnselectSeat", seatId);
            }
        }
        else
        {
            if (selectedSeats.Count < 5)
            {
                selectedSeats.Add(seatId);
                selectedSeatNames.Add(seatName);

                if (hubConnection?.State == HubConnectionState.Connected)
                {
                    await hubConnection.SendAsync("SelectSeat", seatId);
                }
            }
        }
        TRIPDETAILS.sale = (TRIPDETAILS.price - TRIPDETAILS.voucher) * selectedSeats.Count();
    }

    private async Task OnCheckout()
    {
        if (selectedSeats.Count() == 0)
        {
            errorMessageCheckCus = "Quý khách vui lòng chọn ghế.";
            return;
        }

        if (cus_id != 0)
        {
            bill.cus_id = cus_id;
        }
        else
        {
            if (string.IsNullOrWhiteSpace(addCus.fullname) ||
            string.IsNullOrWhiteSpace(addCus.email) ||
            string.IsNullOrWhiteSpace(addCus.phone_number))
            {
                errorMessageCheckCus = "Quý khách vui lòng điền đầy đủ thông tin hoặc đăng nhập.";
                return;
            }

            var emailRegex = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
            if (!Regex.IsMatch(addCus.email, emailRegex))
            {
                errorMessageCheckCus = "Email không hợp lệ. Vui lòng nhập đúng định dạng email.";
                return;
            }

            // Validate số điện thoại
            var phoneRegex = @"^0[0-9]{9}$"; // Chỉ chấp nhận số điện thoại 10 chữ số, bắt đầu bằng số 0
            if (!Regex.IsMatch(addCus.phone_number, phoneRegex))
            {
                errorMessageCheckCus = "Số điện thoại không hợp lệ. Vui lòng nhập đúng định dạng số điện thoại.";
                return;
            }

            // Nếu tất cả hợp lệ
            errorMessageCheckCus = string.Empty; // Xóa thông báo lỗi

            var response = await httpClient.GetAsync($"http://localhost:49922/api/Validate/CheckPhoneNumberCustomer/{addCus.phone_number}");
            if (response.IsSuccessStatusCode)
            {
                var customer = await response.Content.ReadFromJsonAsync<customer>();
                if (customer != null)
                {
                    errorMessageCheckCus = "Số điện thoại này đã được đăng ký. Vui lòng đăng nhập để tiếp tục.";
                    Console.WriteLine(errorMessageCheckCus);
                }
            }
            else if (response.StatusCode == HttpStatusCode.NotFound)
            {
                Console.WriteLine("Số điện thoại chưa được đăng ký, tiếp tục thêm khách hàng.");
                await AddCus();
            }
            else
            {
                errorMessageCheckCus = "Đã xảy ra lỗi khi kiểm tra số điện thoại.";
                Console.WriteLine(errorMessageCheckCus);
            }
        }

        if (selectedSeats.Count() == 1)
        {
            //1 ghế
            bill.emp_id = 5;
            bill.trip_detail_id = id;
            bill.car_seat_id = selectedSeats.First();
            bill.parent_id = 0;

            bill.price = TRIPDETAILS.sale;

            var response = await httpClient.PostAsJsonAsync(urlBill, bill);
            if (response.IsSuccessStatusCode)
            {
                var responseTop = await httpClient.GetAsync(urlTopGuestTrip);
                var jsonResponse = await responseTop.Content.ReadAsStringAsync();
                var guestTrips = JsonSerializer.Deserialize<List<guest_trip>>(jsonResponse);
                var guestTripId = guestTrips.First().id;
                await js.InvokeVoidAsync("sessionStorage.setItem", "billId", guestTripId);
                var paymentRequest = new PaymentRequestModel
                    {
                        OrderId = guestTripId.ToString(),
                        Amount = (int)(bill.price),
                        OrderInfo = guestTripId.ToString(),
                        returnUrl = "http://localhost:5112/checkouttrip"
                    };


                var paymentResponse = await httpClient.PostAsJsonAsync(urlVNPayCreate, paymentRequest);
                if (paymentResponse.IsSuccessStatusCode)
                {
                    var paymentData = await paymentResponse.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                    if (paymentData != null && paymentData.ContainsKey("paymentUrl"))
                    {
                        if (hubConnection != null)
                        {
                            await hubConnection.SendAsync("OnCheckout");
                        }
                        var paymentUrl = paymentData["paymentUrl"];
                        Navigation.NavigateTo(paymentUrl, forceLoad: true);
                        return;
                    }
                }
            }
            else
            {
                Console.WriteLine("Thêm thất bại");
            }
        }
        else
        {
            //nhiều ghế
            bill.emp_id = 5;
            bill.trip_detail_id = id;
            bill.parent_id = 0;
            bill.car_seat_id = null;
            bill.price = TRIPDETAILS.sale;

            var firstResponse = await httpClient.PostAsJsonAsync(urlBill, bill);
            if (firstResponse.IsSuccessStatusCode)
            {
                var responseTop = await httpClient.GetAsync(urlTopGuestTrip);
                var jsonResponse = await responseTop.Content.ReadAsStringAsync();
                var guestTrips = JsonSerializer.Deserialize<List<guest_trip>>(jsonResponse);
                var guestTripId = guestTrips.First().id;

                await js.InvokeVoidAsync("sessionStorage.setItem", "billId", guestTripId.ToString());

                var seatPrice = TRIPDETAILS.sale / selectedSeats.Count();

                foreach (var seatId in selectedSeats)
                {
                    bill.car_seat_id = seatId;
                    bill.parent_id = guestTripId;
                    bill.price = seatPrice;

                    var response = await httpClient.PostAsJsonAsync(urlBill, bill);
                    if (!response.IsSuccessStatusCode)
                    {
                        Console.WriteLine("Thêm ghế thất bại");
                    }
                }

                var paymentRequest = new PaymentRequestModel
                    {
                        OrderId = guestTripId.ToString(),
                        Amount = (int)(bill.price),
                        OrderInfo = guestTripId.ToString(),
                        returnUrl = "http://localhost:5112/checkouttrip"
                    };


                var paymentResponse = await httpClient.PostAsJsonAsync(urlVNPayCreate, paymentRequest);
                if (paymentResponse.IsSuccessStatusCode)
                {
                    var paymentData = await paymentResponse.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                    if (paymentData != null && paymentData.ContainsKey("paymentUrl"))
                    {
                        if (hubConnection != null)
                        {
                            await hubConnection.SendAsync("OnCheckout");
                        }
                        var paymentUrl = paymentData["paymentUrl"];
                        Navigation.NavigateTo(paymentUrl, forceLoad: true);
                        return;
                    }
                }
            }
            else
            {
                Console.WriteLine("Thêm thất bại");
            }
        }
    }

    private async Task AddCus()
    {
        try
        {
            addCus.password = "123456";
            addCus.birthday = DateTime.Now.AddYears(-18);
            addCus.gender = 0;
            addCus.citizen_identity_img1 = null;
            addCus.citizen_identity_number = null;
            addCus.driver_license_img1 = null;
            addCus.driver_license_number = null;
            addCus.status = true;

            var response = await httpClient.PostAsJsonAsync(urlAddCus, addCus);
            if (response.IsSuccessStatusCode)
            {
                var responseTop = await httpClient.GetAsync(urlGetTopCus);
                var jsonResponse = await responseTop.Content.ReadAsStringAsync();
                Console.WriteLine($"JSON Response: {jsonResponse}");

                var customerTop = JsonSerializer.Deserialize<List<customers>>(jsonResponse);
                if (customerTop != null && customerTop.Any())
                {
                    foreach (var customer in customerTop)
                    {
                        Console.WriteLine($"Customer ID: {customer.id}");
                    }
                    var cusID = customerTop.First().id;
                    Console.WriteLine(customerTop.FirstOrDefault().id);
                    bill.cus_id = cusID;
                }
                else
                {
                    Console.WriteLine("Danh sách khách hàng trả về rỗng hoặc null.");
                    return;
                }
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Lỗi khi thêm khách hàng: {ex.Message}", Severity.Error);
        }
    }

    private void OnSeatSelectedTo(int seatId, string seatName)
    {
        if (selectedSeatTos.Contains(seatId))
        {
            selectedSeatTos.Remove(seatId);
            selectedSeatToNames.Remove(seatName);
        }
        else
        {
            if (selectedSeatTos.Count >= 5)
            {
                return;
            }
            selectedSeatTos.Add(seatId);
            selectedSeatToNames.Add(seatName);
        }
        tripTo.sale = (tripTo.price - tripTo.voucher) * selectedSeatTos.Count();
        Console.WriteLine("Ghế đi đã chọn: " + string.Join(", ", selectedSeatTos));
    }

    private void OnSeatSelectedReturn(int seatId, string seatName)
    {
        if (selectedSeatReturns.Contains(seatId))
        {
            selectedSeatReturns.Remove(seatId);
            selectedSeatReturnNames.Remove(seatName);
        }
        else
        {
            if (selectedSeatReturns.Count >= 5)
            {
                return;
            }
            selectedSeatReturns.Add(seatId);
            selectedSeatReturnNames.Add(seatName);
        }
        tripReturn.sale = (tripReturn.price - tripReturn.voucher) * selectedSeatReturns.Count();
        Console.WriteLine("Ghế về đã chọn: " + string.Join(", ", selectedSeatReturns));
    }

    private async Task OnCheckoutToReturn()
    {
        if (selectedSeatReturns.Count() == 0 || selectedSeatTos.Count() == 0)
        {
            errorMessageCheckCus = "Quý khách vui lòng chọn ghế.";
            return;
        }

        if (cus_id != 0)
        {
            bill.cus_id = cus_id;
        }
        else
        {
            if (string.IsNullOrWhiteSpace(addCus.fullname) ||
            string.IsNullOrWhiteSpace(addCus.email) ||
            string.IsNullOrWhiteSpace(addCus.phone_number))
            {
                errorMessageCheckCus = "Quý khách vui lòng điền đầy đủ thông tin hoặc đăng nhập.";
                return;
            }

            var emailRegex = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
            if (!Regex.IsMatch(addCus.email, emailRegex))
            {
                errorMessageCheckCus = "Email không hợp lệ. Vui lòng nhập đúng định dạng email.";
                return;
            }

            // Validate số điện thoại
            var phoneRegex = @"^0[0-9]{9}$"; // Chỉ chấp nhận số điện thoại 10 chữ số, bắt đầu bằng số 0
            if (!Regex.IsMatch(addCus.phone_number, phoneRegex))
            {
                errorMessageCheckCus = "Số điện thoại không hợp lệ. Vui lòng nhập đúng định dạng số điện thoại.";
                return;
            }

            // Nếu tất cả hợp lệ

            errorMessageCheckCus = string.Empty; // Xóa thông báo lỗi
            var response = await httpClient.GetAsync($"http://localhost:49922/api/Validate/CheckPhoneNumberCustomer/{addCus.phone_number}");
            if (response.IsSuccessStatusCode)
            {
                var customer = await response.Content.ReadFromJsonAsync<customer>();
                if (customer != null)
                {
                    errorMessageCheckCus = "Số điện thoại này đã được đăng ký. Vui lòng đăng nhập để tiếp tục.";
                    Console.WriteLine(errorMessageCheckCus);
                    return;
                }
            }
            else if (response.StatusCode == HttpStatusCode.NotFound)
            {
                Console.WriteLine("Số điện thoại chưa được đăng ký, tiếp tục thêm khách hàng.");
                await AddCus();
            }
            else
            {
                errorMessageCheckCus = "Đã xảy ra lỗi khi kiểm tra số điện thoại.";
                Console.WriteLine(errorMessageCheckCus);
                return;
            }
        }

        if (selectedSeatTos.Count() >= 1 && selectedSeatReturns.Count() >= 1)
        {
            //nhiều ghế
            bill.emp_id = 5;
            bill.trip_detail_id = null;
            bill.parent_id = 0;
            bill.car_seat_id = null;
            bill.price = (tripReturn.sale + tripTo.sale) * (selectedSeatTos.Count() + selectedSeatReturns.Count());

            var firstResponse = await httpClient.PostAsJsonAsync(urlBill, bill);
            if (firstResponse.IsSuccessStatusCode)
            {
                var responseTop = await httpClient.GetAsync(urlTopGuestTrip);
                var jsonResponse = await responseTop.Content.ReadAsStringAsync();
                var guestTrips = JsonSerializer.Deserialize<List<guest_trip>>(jsonResponse);
                var guestTripId = guestTrips.First().id;

                await js.InvokeVoidAsync("sessionStorage.setItem", "billId", guestTripId.ToString());

                var seatPriceTo = tripTo.sale;
                var seatPriceFrom = tripReturn.sale;

                foreach (var seatId in selectedSeatTos)
                {
                    bill.car_seat_id = seatId;
                    bill.parent_id = guestTripId;
                    bill.price = seatPriceTo;
                    bill.trip_detail_id = tripIdTo;

                    var response = await httpClient.PostAsJsonAsync(urlBill, bill);
                    if (!response.IsSuccessStatusCode)
                    {
                        Console.WriteLine("Thêm ghế thất bại");
                    }
                }

                foreach (var seatId in selectedSeatReturns)
                {
                    bill.car_seat_id = seatId;
                    bill.parent_id = guestTripId;
                    bill.price = seatPriceFrom;
                    bill.trip_detail_id = tripIdReturn;

                    var response = await httpClient.PostAsJsonAsync(urlBill, bill);
                    if (!response.IsSuccessStatusCode)
                    {
                        Console.WriteLine("Thêm ghế thất bại");
                    }
                }

                var paymentRequest = new PaymentRequestModel
                    {
                        OrderId = guestTripId.ToString(),
                        Amount = (int)(bill.price),
                        OrderInfo = guestTripId.ToString(),
                        returnUrl = "http://localhost:5112/checkouttrip"
                    };


                var paymentResponse = await httpClient.PostAsJsonAsync(urlVNPayCreate, paymentRequest);
                if (paymentResponse.IsSuccessStatusCode)
                {
                    var paymentData = await paymentResponse.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                    if (paymentData != null && paymentData.ContainsKey("paymentUrl"))
                    {
                        if (hubConnection != null)
                        {
                            await hubConnection.SendAsync("OnCheckout");
                        }
                        var paymentUrl = paymentData["paymentUrl"];
                        Navigation.NavigateTo(paymentUrl, forceLoad: true);
                        return;
                    }
                }
            }
            else
            {
                Console.WriteLine("Thêm thất bại");
            }
        }
    }
}

