@page "/getTrip/{id:int}"
@using MudBlazor
@using System.Text.Json
@using System.Collections.Concurrent
@inject HttpClient httpClient
@inject IJSRuntime js
@inject NavigationManager Navigation
@implements IAsyncDisposable

<MudContainer Class="pt-5">
    <MudGrid>
        <MudItem xs="7">
            <MudPaper Class="p-4 rounded-lg" Elevation="0" MaxWidth="MaxWidth.Medium" Style="width: 100%; background: #ffff; border: 1px solid #e5e7eb;">
                <MudGrid>
                    <MudItem xs="12" Class="mx-auto">
                        <MudText Typo="Typo.h5"><b>Chọn Ghế</b></MudText>
                    </MudItem>

                    <MudItem xs="10">
                        @foreach (var item in car_seat)
                        {
                            var isDisabled = item.status == "Đã đặt" || takenSeats.Contains(item.id.ToString());
                            var buttonColor = selectedSeats.Contains(item.id) ? Color.Success : Color.Primary;

                            <MudItem xs="2">
                                <MudButton Variant="Variant.Outlined"
                                           Color="@buttonColor"
                                           Size="Size.Small"
                                           Disabled="@isDisabled"
                                           OnClick="() => OnSeatSelected(item.id, item.name)">
                                    @item.name
                                </MudButton>
                            </MudItem>
                        }

                    </MudItem>

                </MudGrid>
            </MudPaper>
            <MudPaper Class="p-4 rounded-lg mt-1" Elevation="0" MaxWidth="MaxWidth.Medium" Style="width: 100%; background: #ffff; border: 1px solid #e5e7eb;">
                <MudGrid>
                    <MudItem xs="6">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudText Typo="Typo.h5"><b>Thông Tin Khách Hàng</b></MudText>
                            </MudItem>

                            <MudItem xs="12" Class="mb-3">
                                <MudInputLabel>Họ và tên</MudInputLabel>
                                <MudTextField @bind-Value="@customer.fullname" Placeholder="Nhập họ và tên" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                            </MudItem>
                            <MudItem xs="12" Class="mb-3">
                                <MudInputLabel>Email</MudInputLabel>
                                <MudTextField @bind-Value="@customer.email" Placeholder="Nhập email" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                            </MudItem>
                            <MudItem xs="12" Class="mb-3">
                                <MudInputLabel>Số điện thoại</MudInputLabel>
                                <MudTextField @bind-Value="@customer.phone_number" Placeholder="Nhập số điện thoại" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                            </MudItem>
                        </MudGrid>
                    </MudItem>

                    <MudItem xs="6">
                        <MudGrid>
                            <MudItem xs="12" Class="mb-3">
                                <MudText Align="Align.Center" Typo="Typo.h6" Style="color: #ef5222; font-size: 18px;">ĐIỀU KHOẢN LƯU Ý</MudText>
                            </MudItem>

                            <MudItem xs="12" Class="mb-2">
                                <span style="font-weight: bold;">
                                    (*) Quý khách vui lòng có mặt tại bến xuất phát của xe trước ít nhất 30 phút giờ xe khởi hành, mang theo thông báo đã thanh toán vé thành công có chứa mã vé được gửi từ hệ thống FUTA BUS LINE. Vui lòng liên hệ Trung tâm tổng đài <a href="" style="color: #ef5222; text-decoration: none;">1900 6067</a> để được hỗ trợ.
                                </span>
                            </MudItem>
                            <MudItem xs="12" Class="mb-2">
                                <span style="font-weight: bold;">
                                    (*) Nếu quý khách có nhu cầu trung chuyển, vui lòng liên hệ Tổng đài trung chuyển <a href="" style="color: #ef5222; text-decoration: none;">1900 6067</a> trước khi đặt vé. Chúng tôi không đón/trung chuyển tại những điểm xe trung chuyển không thể tới được.
                                </span>
                            </MudItem>


                        </MudGrid>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <MudPaper Class="p-4 rounded-lg mt-1" Elevation="0" MaxWidth="MaxWidth.Medium" Style="width: 100%; background: #ffff; border: 1px solid #e5e7eb;">
                <MudGrid>
                    <MudItem xs="6">
                        <MudText Typo="Typo.h5"><b>@TRIPDETAILS.price.ToString("#,##0") VNĐ</b></MudText>
                    </MudItem>
                    <MudItem xs="6">
                        <MudGrid>
                            <MudItem xs="6">
                                <MudButton Variant="Variant.Outlined" Size="Size.Small">Hủy</MudButton>
                            </MudItem>

                            <MudItem xs="6">
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="@OnCheckout">Thanh Toán</MudButton>
                            </MudItem>
                        </MudGrid>

                    </MudItem>
                </MudGrid>
            </MudPaper>


        </MudItem>

        <MudItem xs="5">
            <MudPaper Class="p-4 rounded-lg" Elevation="0" MaxWidth="MaxWidth.Medium" Style="width: 100%; background: #fff; border: 1px solid #e5e7eb; box-shadow: none;">
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Style="font-size: 20px" Typo="Typo.h5"><b>Thông Tin Lượt Đi</b></MudText>
                    </MudItem>

                    <MudItem xs="3">
                        <MudText Style="font-size: 15px; color: #637280;" Typo="Typo.h5">Tuyến Xe</MudText>
                    </MudItem>
                    <MudItem xs="9">
                        <MudText Align="Align.End" Style="font-size: 15px; font-weight: bold" Typo="Typo.h5">@TRIPDETAILS.from - @TRIPDETAILS.to</MudText>
                    </MudItem>

                    <MudItem xs="3">
                        <MudText Style="font-size: 15px; color: #637280;" Typo="Typo.h5">Chuyến Xe</MudText>
                    </MudItem>
                    <MudItem xs="9">
                        <MudText Align="Align.End" Style="font-size: 15px; font-weight: bold" Typo="Typo.h5">@TRIPDETAILS.location_from - @TRIPDETAILS.location_to</MudText>
                    </MudItem>

                    <MudItem xs="3">
                        <MudText Style="font-size: 15px; color: #637280;" Typo="Typo.h5">Khởi hành</MudText>
                    </MudItem>
                    <MudItem xs="9">
                        <MudText Align="Align.End" Style="font-size: 15px; font-weight: bold" Typo="Typo.h5">@TRIPDETAILS.time_start</MudText>
                    </MudItem>

                    <MudItem xs="4">
                        <MudText Style="font-size: 15px; color: #637280;" Typo="Typo.h5">Số Lượng Ghế</MudText>
                    </MudItem>
                    <MudItem xs="8">
                        <MudText Align="Align.End" Style="font-size: 15px; font-weight: bold" Typo="Typo.h5">@selectedSeats.Count</MudText>
                    </MudItem>

                    <MudItem xs="3">
                        <MudText Style="font-size: 15px; color: #637280;" Typo="Typo.h5">Tên ghế</MudText>
                    </MudItem>
                    <MudItem xs="9">
                        <MudText Align="Align.End" Style="font-size: 15px; font-weight: bold" Typo="Typo.h5"> @string.Join(", ", selectedSeatNames)</MudText>
                    </MudItem>

                    <MudItem xs="3">
                        <MudText Style="font-size: 15px; color: #637280;" Typo="Typo.h5">Giá vé</MudText>
                    </MudItem>
                    <MudItem xs="9">
                        <MudText Align="Align.End" Style="font-size: 15px; font-weight: bold" Typo="Typo.h5">@TRIPDETAILS.price.ToString("#,##0") VNĐ</MudText>
                    </MudItem>

                    <MudItem xs="3">
                        <MudText Style="font-size: 15px; color: #637280;" Typo="Typo.h5">Voucher</MudText>
                    </MudItem>
                    <MudItem xs="9">
                        <MudText Align="Align.End" Style="font-size: 15px; font-weight: bold" Typo="Typo.h5">@TRIPDETAILS.voucher.ToString("#,##0") VNĐ/Vé</MudText>
                    </MudItem>

                    <MudItem xs="3">
                        <MudText Style="font-size: 15px; color: #637280;" Typo="Typo.h5">Tổng Tiền</MudText>
                    </MudItem>
                    <MudItem xs="9">
                        <MudText Align="Align.End" Style="font-size: 15px; font-weight: bold" Typo="Typo.h5">@TRIPDETAILS.sale.ToString("#,##0") VNĐ</MudText>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>
<script>
    // Lấy token từ localStorage
    function getAuthToken() {
        return localStorage.getItem("authToken");
    }

</script>
@code {
    [Parameter] public int id { get; set; }
    private int cus_id;
    private HubConnection? hubConnection;
    private List<string> takenSeats = new List<string>();

    private trip trips;
    private TRIPDETAILS TRIPDETAILS = new TRIPDETAILS();
    private List<car_seat> car_seat = new List<car_seat>();
    private List<car_seat_not_null> car_seat_not_null;
    private customer customer = new customer();
    private string urlTrip = "http://localhost:49922/api/Trips/trip";
    private string urlCus = "http://localhost:49922/api/Customer";
    private string urlBill = "http://localhost:49922/api/GuestTrip";
    private string urlTopGuestTrip = "http://localhost:49922/api/GuestTrip/GetTop";
    private string urlViewTrip = "http://localhost:49922/api/Trips/viewTrip/";
    private string urlSeatNotNull = "http://localhost:49922/api/GuestTrip/GetSeatNotNull/";

    private List<int> selectedSeats = new List<int>();
    private List<string> selectedSeatNames = new List<string>();
    private static ConcurrentDictionary<string, bool> userCheckoutStatus = new ConcurrentDictionary<string, bool>();

    private guest_trip_create bill = new guest_trip_create();

    private bool isHubConnected = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTripDetail();
        var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (!string.IsNullOrEmpty(token))
        {
            // Giải mã token
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            // Lấy giá trị của 'username' từ payload của token
            var usernameClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "id");

            if (usernameClaim != null)
            {
                cus_id = (int.Parse(usernameClaim.Value));
                await LoadUser();
            }
        }
        hubConnection = new HubConnectionBuilder()
             .WithUrl(Navigation.ToAbsoluteUri("http://localhost:49922/seatHub"))
             .Build();

        // Xử lý chọn ghế từ các client khác
        hubConnection.On<int, int>("ReceiveSeatSelection", (seatId, id) =>
        {
            if (!takenSeats.Contains(seatId.ToString()))
            {
                takenSeats.Add(seatId.ToString());
                StateHasChanged();
            }
        });

        // Xử lý bỏ chọn ghế từ các client khác
        hubConnection.On<int, int>("ReceiveSeatDeselection", (seatId, id) =>
        {
            if (takenSeats.Contains(seatId.ToString()))
            {
                takenSeats.Remove(seatId.ToString());
                StateHasChanged();
            }
        });

        // Nhận toàn bộ danh sách ghế đã chọn khi client mới kết nối
        hubConnection.On<List<int>>("ReceiveAllSelectedSeats", (seatIds) =>
        {
            takenSeats = seatIds.Select(id => id.ToString()).ToList();
            StateHasChanged();
        });

        hubConnection.On("ReceiveCheckoutNotification", async () =>
         {
             await ReloadSeats();
             await InvokeAsync(() => StateHasChanged());
         });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task ReloadSeats()
    {
        var currentSelectedSeats = new List<int>(selectedSeats);

        var seatsResponse = await httpClient.GetFromJsonAsync<TRIPDETAILS>($"{urlViewTrip}{id}");
        if (seatsResponse != null)
        {
            TRIPDETAILS = seatsResponse;

            takenSeats = seatsResponse.car_seat
                .Where(seat => seat.status == "Đã đặt")
                .Select(seat => seat.id.ToString())
                .ToList();
            Console.WriteLine("Taken Seats: " + string.Join(", ", takenSeats));
        }

        selectedSeats = currentSelectedSeats;
        Console.WriteLine("Restored Selected Seats: " + string.Join(", ", selectedSeats));
    }


    private async Task LoadUser()
    {
        customer = await httpClient.GetFromJsonAsync<customer>($"{urlCus}/{cus_id}");
    }
    private async Task LoadTripDetail()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<TRIPDETAILS>($"{urlViewTrip}{id}");
            TRIPDETAILS = response;
            car_seat = response.car_seat.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task OnSeatSelected(int seatId, string seatName)
    {
        if (selectedSeats.Contains(seatId))
        {
            selectedSeats.Remove(seatId);
            selectedSeatNames.Remove(seatName);

            if (hubConnection?.State == HubConnectionState.Connected)
            {
                await hubConnection.SendAsync("UnselectSeat", seatId, id);
            }
        }
        else
        {
            if (selectedSeats.Count < 5)
            {
                selectedSeats.Add(seatId);
                selectedSeatNames.Add(seatName);

                if (hubConnection?.State == HubConnectionState.Connected)
                {
                    await hubConnection.SendAsync("SelectSeat", seatId, id);
                }
            }
        }

        TRIPDETAILS.sale = TRIPDETAILS.sale * selectedSeats.Count();
    }

    private async Task OnCheckout()
    {
        if (selectedSeats.Count() == 1)
        {
            //1 ghế
            bill.emp_id = 5;
            bill.trip_detail_id = id;
            bill.car_seat_id = selectedSeats.First();
            bill.parent_id = 0;
            bill.cus_id = cus_id;
            bill.price = TRIPDETAILS.sale;

            var response = await httpClient.PostAsJsonAsync(urlBill, bill);
            if (response.IsSuccessStatusCode)
            {
                var responseTop = await httpClient.GetAsync(urlTopGuestTrip);
                var jsonResponse = await responseTop.Content.ReadAsStringAsync();
                var guestTrips = JsonSerializer.Deserialize<List<guest_trip>>(jsonResponse);
                var guestTripId = guestTrips.First().id;

                if (hubConnection != null)
                {
                    await hubConnection.SendAsync("OnCheckout");

                    Navigation.NavigateTo($"/checkouttrip/{guestTripId}");
                }
            }
            else
            {
                Console.WriteLine("Thêm thất bại");
            }
        }
        else
        {
            //nhiều ghế
            bill.emp_id = 5;
            bill.trip_detail_id = id;
            bill.parent_id = 0;
            bill.car_seat_id = null;
            bill.cus_id = cus_id;
            bill.price = TRIPDETAILS.sale;

            var firstResponse = await httpClient.PostAsJsonAsync(urlBill, bill);
            if (firstResponse.IsSuccessStatusCode)
            {
                var responseTop = await httpClient.GetAsync(urlTopGuestTrip);
                var jsonResponse = await responseTop.Content.ReadAsStringAsync();
                var guestTrips = JsonSerializer.Deserialize<List<guest_trip>>(jsonResponse);
                var guestTripId = guestTrips.First().id;

                var seatPrice = TRIPDETAILS.sale / selectedSeats.Count();

                foreach (var seatId in selectedSeats)
                {
                    bill.car_seat_id = seatId;
                    bill.parent_id = guestTripId;
                    bill.price = seatPrice;

                    var response = await httpClient.PostAsJsonAsync(urlBill, bill);
                    if (!response.IsSuccessStatusCode)
                    {
                        Console.WriteLine("Thêm ghế thất bại");
                    }
                }
                if (hubConnection != null)
                {
                    await hubConnection.SendAsync("OnCheckout");

                    Navigation.NavigateTo($"/checkouttrip/{guestTripId}");
                }

            }
            else
            {
                Console.WriteLine("Thêm thất bại");
            }
        }
    }


}


