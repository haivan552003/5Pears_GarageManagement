@page "/login"
@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager NavigationManager

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="model.username" For="@(() => model.username)" />
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="model.password" For="@(() => model.password)" InputType="InputType.Password" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
                @if (LoginFailed)
                {
                    <MudAlert Severity="Severity.Error" Class="mt-2">Đăng nhập thất bại. Vui lòng kiểm tra lại thông tin.</MudAlert>
                }
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    login model = new login();
    bool LoginFailed;

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:49922/api/Login", model);

            if (response.IsSuccessStatusCode)
            {
                var token = await response.Content.ReadAsStringAsync();

                // Lưu token vào localStorage
                await js.InvokeVoidAsync("localStorage.setItem", "authToken", token);

                // Điều hướng sau khi đăng nhập thành công
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                // Đăng nhập thất bại
                LoginFailed = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
            LoginFailed = true;
        }
    }

}