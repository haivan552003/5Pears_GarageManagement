@page "/profile"
@inject HttpClient httpClient
@inject IJSRuntime js
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager


<MudContainer Class="mt-14 pa-0 fs-18" MaxWidth="MaxWidth.False">
    <MudGrid Class="pa-0">

        <NavProfileUser />

        <MudItem xs="12" md="9">
            <MudPaper Elevation="2" Class="mb-5">
                <MudText Class="pa-3 fw-bold text-uppercase" Typo="Typo.subtitle1">Thông tin tài khoản</MudText>

                <MudGrid>
                    <MudItem xs="12" sm="4" Class="pa-5">
                        <InputFile id="profileImageInput" OnChange="@LoadEmpImage" hidden accept=".jpg,.jpeg,.png" />
                        <MudCard Elevation="0" Class="mb-4">
                            @if (!string.IsNullOrEmpty(newRoleTask.img_cus))
                            {
                                <MudCardMedia Image="@newRoleTask.img_cus"
                                              Height="200"
                                              Class="rounded-lg" />
                            }
                            else
                            {
                                <MudCardMedia Class="d-flex justify-center align-center rounded-lg"
                                              Style="height: 200px; background-color: #f5f5f5;">
                                    <MudIcon Icon="@Icons.Material.Filled.PersonOutline"
                                             Size="Size.Large"
                                             Color="Color.Default" />
                                </MudCardMedia>
                            }
                            <MudCardActions Class="pa-0 mt-2">
                                <MudButton HtmlTag="label"
                                           For="profileImageInput"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload"
                                           FullWidth="true">
                                    Tải lên ảnh đại diện
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>

                    <MudItem xs="12" sm="8" Class="pa-5">
                        <MudText Style="@($"color:{Colors.Grey.Darken1};")" Typo="Typo.subtitle1">Họ và tên</MudText>
                        <MudTextField Class="mb-3" ShrinkLabel @bind-Value="newRoleTask.fullname" Variant="Variant.Outlined" Required="true" />

                        <MudText Style="@($"color:{Colors.Grey.Darken1};")" Typo="Typo.subtitle1">Ngày sinh</MudText>
                        <MudDatePicker Class="mb-3" @bind-Date="birthdayDate" Required="true" Variant="Variant.Outlined" />

                        <MudText Style="@($"color:{Colors.Grey.Darken1};")" Typo="Typo.subtitle1">Giới tính</MudText>
                        <MudSelect @bind-Value="newRoleTask.gender" Variant="Variant.Outlined" Required="true">
                            <MudSelectItem Value="(byte)0">Nam</MudSelectItem>
                            <MudSelectItem Value="(byte)1">Nữ</MudSelectItem>
                        </MudSelect>
                        @if (newRoleTask.email == null)
                        {
                            <MudText Style="@($"color:{Colors.Grey.Darken1};")" Typo="Typo.subtitle1">Email</MudText>
                            <MudTextField Class="mb-3" ShrinkLabel @bind-Value="newRoleTask.email" Variant="Variant.Outlined" Required="true" />
                        }
                        else
                        {
                            <MudText Style="@($"color:{Colors.Grey.Darken1};")" Typo="Typo.subtitle1">Email</MudText>
                            <MudTextField Class="mb-3" ShrinkLabel @bind-Value="newRoleTask.email" Variant="Variant.Outlined" ReadOnly Required="true" />
                        }
                        <MudText Style="@($"color:{Colors.Grey.Darken1};")" Typo="Typo.subtitle1">Số điện thoại</MudText>
                        <MudTextField Class="mb-3" ShrinkLabel @bind-Value="newRoleTask.phone_number" Variant="Variant.Outlined" ReadOnly Required="true" />
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <MudPaper Elevation="2" Class="mb-5">
                <MudGrid>
                    <MudItem xs="12" sm="4" Class="pa-5">
                        <InputFile id="idCardImageInput" OnChange="@LoadEmpImage1" hidden accept=".jpg,.jpeg,.png" />
                        <MudCard Elevation="0">
                            @if (!string.IsNullOrEmpty(newRoleTask.citizen_identity_img1))
                            {
                                <MudCardMedia Image="@newRoleTask.citizen_identity_img1"
                                              Height="200"
                                              Class="rounded-lg" />
                            }
                            else
                            {
                                <MudCardMedia Class="d-flex justify-center align-center rounded-lg"
                                              Style="height: 200px; background-color: #f5f5f5;">
                                    <MudIcon Icon="@Icons.Material.Filled.Badge"
                                             Size="Size.Large"
                                             Color="Color.Default" />
                                </MudCardMedia>
                            }
                            <MudCardActions Class="pa-0 mt-2">
                                <MudButton HtmlTag="label"
                                           For="idCardImageInput"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload"
                                           FullWidth="true">
                                    Tải lên ảnh CCCD
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>

                    <MudItem xs="12" sm="8" Class="pa-5">
                       

                        <MudText Style="@($"color:{Colors.Grey.Darken1};")" Typo="Typo.subtitle1">Số CCCD</MudText>
                        <MudTextField Class="mb-3" ShrinkLabel @bind-Value="newRoleTask.citizen_identity_number" Variant="Variant.Outlined" Required="true" />
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <MudPaper Elevation="2" Class="mb-5">
                <MudGrid>
                    <MudItem xs="12" sm="4" Class="pa-5">
                        <InputFile id="idCardImageInput2" OnChange="@LoadEmpImage2" hidden accept=".jpg,.jpeg,.png" />
                        <MudCard Elevation="0">
                            @if (!string.IsNullOrEmpty(newRoleTask.driver_license_img1))
                            {
                                <MudCardMedia Image="@newRoleTask.driver_license_img1"
                                              Height="200"
                                              Class="rounded-lg" />
                            }
                            else
                            {
                                <MudCardMedia Class="d-flex justify-center align-center rounded-lg"
                                              Style="height: 200px; background-color: #f5f5f5;">
                                    <MudIcon Icon="@Icons.Material.Filled.Badge"
                                             Size="Size.Large"
                                             Color="Color.Default" />
                                </MudCardMedia>
                            }
                            <MudCardActions Class="pa-0 mt-2">
                                <MudButton HtmlTag="label"
                                           For="idCardImageInput2"
                                           Variant="Variant.Filled"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.CloudUpload"
                                           FullWidth="true">
                                    Tải lên ảnh GPLX
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>

                    <MudItem xs="12" sm="8" Class="pa-5">
                        <MudText Style="@($"color:{Colors.Grey.Darken1};")" Typo="Typo.subtitle1">Số GPLX</MudText>
                        <MudTextField Class="mb-3" ShrinkLabel @bind-Value="newRoleTask.driver_license_number" Variant="Variant.Outlined" Required="true" />
                    </MudItem>
                </MudGrid>
            </MudPaper>
            <div class="flex justify-end float-end items-center space-x-4 mt-4">
                <MudButton Size="Size.Small"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Outlined.Save"
                           Color="Color.Primary"
                           OnClick="UpdateData">
                    Lưu
                </MudButton>

                <MudButton Size="Size.Small"
                           OnClick="OpenDeleteAccountDialog"
                           Variant="Variant.Filled"
                           Color="Color.Error"
                           StartIcon="@Icons.Material.Outlined.DeleteForever">
                    Xóa tài khoản
                </MudButton>
            </div>

        </MudItem>
    </MudGrid>
</MudContainer>
<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.14.0/firebase-app.js";
    import { getAnalytics } from "https://www.gstatic.com/firebasejs/10.14.0/firebase-analytics.js";
    import { getStorage, ref, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/10.14.0/firebase-storage.js";

    // Your web app's Firebase configuration
    const firebaseConfig = {
        apiKey: "AIzaSyDHguIZkgDiKR6_EtOeQOQij79t8tXZS0w",
        authDomain: "pear-b8fc3.firebaseapp.com",
        projectId: "pear-b8fc3",
        storageBucket: "pear-b8fc3.appspot.com",
        messagingSenderId: "663990872588",
        appId: "1:663990872588:web:e4b3b81a82e0bfb4c31c29",
        measurementId: "G-XFDQG449JZ"
    };
    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const analytics = getAnalytics(app);
    const storage = getStorage(app);

    // Upload file
    async function uploadImage(fileName, base64String) {
        const fileRef = ref(storage, fileName);
        try {
            const response = await fetch(`data:image/jpeg;base64,${base64String}`);
            const blob = await response.blob();
            await uploadBytes(fileRef, blob);
            const downloadURL = await getDownloadURL(fileRef);
            return downloadURL;
        } catch (error) {
            console.error("Error uploading image:", error);
            throw error;
        }
    }// Expose function to global window object
    window.uploadImage = uploadImage;
    uploadImage
    async function getImageUrl(fileName) {
        const fileRef = ref(storage, fileName);
        try {
            const downloadURL = await getDownloadURL(fileRef);
            return downloadURL;
        } catch (error) {
            console.error("Error getting download URL:", error);
            throw error;
        }
    }
    function getAuthToken() {
        return localStorage.getItem("authToken");
    }
</script>
@code {
    [Parameter] public int customerId { get; set; } // Lấy ID từ URL
    private bool isDialogVisible = false; 
    private customer_address newAddress = new customer_address();
    private customer newRoleTask = new customer();
    private List<customer_address> customerAddresses = new List<customer_address>();
    private bool isFormValid = false;
    private bool showSuccess = false;
    private bool showError = false;
    private DateTime? birthdayDate;
    private MudForm form;
    private MudForm formAddress;
    private string url = "http://localhost:49922/api/Customer";
    private string addressUrl = "http://localhost:49922/api/Cus_Address";
    private bool isLoading = false;
    private void OpenAddAddressDialog()
    {
        isDialogVisible = true;
    }

    // Đóng dialog
    private void CloseDialog()
    {
        isDialogVisible = false;
    }

    protected override async Task OnInitializedAsync()
    {
        // Lấy JWT token từ localStorage
        var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");

        if (!string.IsNullOrEmpty(token))
        {
            // Giải mã token
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            // Lấy giá trị của 'username' từ payload của token
            var userId = jwtToken.Claims.FirstOrDefault(c => c.Type == "id");

            if (userId != null)
            {
                customerId = int.Parse(userId.Value);
            }
        }
        var response = await httpClient.GetFromJsonAsync<customer>($"{url}/{customerId}");
        if (response != null)
        {
            newRoleTask = response;
            birthdayDate = newRoleTask.birthday;
        }
        
    }

    private async Task LoadEmpImage(InputFileChangeEventArgs e)
    {
        try
        {
            isLoading = true;
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"emp_images_avt/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);
                    newRoleTask.img_cus = imageUrl;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi tải lên hình ảnh: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadEmpImage1(InputFileChangeEventArgs e)
    {
        try
        {
            isLoading = true;
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"emp_images_cccd/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);
                    newRoleTask.citizen_identity_img1 = imageUrl;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi tải lên hình ảnh: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
    private async Task LoadEmpImage2(InputFileChangeEventArgs e)
    {
        try
        {
            isLoading = true;
            var file = e.File;
            if (file != null)
            {
                var base64Data = await GetBase64Image(file);
                if (base64Data != null)
                {
                    var fileName = $"emp_images_gplx/{Guid.NewGuid()}{Path.GetExtension(file.Name)}";
                    var imageUrl = await js.InvokeAsync<string>("uploadImage", fileName, base64Data);
                    newRoleTask.driver_license_img1 = imageUrl;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi tải lên hình ảnh: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<string> GetBase64Image(IBrowserFile file)
    {
        try
        {
            using var memoryStream = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(memoryStream);
            return Convert.ToBase64String(memoryStream.ToArray());
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi xử lý hình ảnh: {ex.Message}", Severity.Error);
            return null;
        }
    }

    private async Task UpdateData()
    {
        try
        {
            newRoleTask.birthday = birthdayDate.Value;
            var response = await httpClient.PutAsJsonAsync($"{url}/{newRoleTask.Id}", newRoleTask);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Sửa thành công", Severity.Success);

                showSuccess = true;
            }
            else
            {
                showError = true;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Lỗi khi cập nhật thông tin: {ex.Message}", Severity.Error);
        }
    }
    private async Task OpenDeleteAccountDialog()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", "Bạn có chắc chắn muốn xóa tài khoản? Hành động này không thể hoàn tác." },
            { "ButtonText", "Xóa Tài Khoản" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions() { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<DeleteDialog>("Xác nhận xóa tài khoản", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await DeleteAccount();
        }
    }

    private async Task DeleteAccount()
    {
        try
        {
            // Get the customer ID from the JWT token
            var token = await js.InvokeAsync<string>("localStorage.getItem", "authToken");
            var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            var userId = jwtToken.Claims.FirstOrDefault(c => c.Type == "id");

            if (userId != null)
            {
                var httpClient = new HttpClient();
                var response = await httpClient.DeleteAsync($"http://localhost:49922/api/Customer/{customerId}");

                if (response.IsSuccessStatusCode)
                {
                    // Remove token and navigate to login page
                    await js.InvokeVoidAsync("localStorage.removeItem", "authToken");
                    NavigationManager.NavigateTo("/", true);
                }
                else
                {
                    // Handle error scenario
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error deleting account: {errorContent}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception when deleting account: {ex.Message}");
        }
    }

}
