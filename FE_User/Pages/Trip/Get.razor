@page "/getTrip"
<h3>Get</h3>

@using System.Net.Http.Json
@inject HttpClient httpClient

<div class="container">
    <MudTable Hover="true" Breakpoint="Breakpoint.Sm" Height="500px" FixedHeader="true"
              Items="@Trips"
              Virtualize="@_virtualize"
              GroupBy="@_groupDefinition"
              GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
              GroupFooterClass="mb-4"
              Dense="_dense"
              MultiSelection="_multiSelect">
        <ColGroup>
            @if (_multiSelect)
            {
                <col style="width: 60px;" />
            }
            @if (_groupDefinition.Expandable)
            {
                <col style="width: 60px;" />
            }
        </ColGroup>
        <HeaderContent>
            <MudTh>From</MudTh>
            <MudTh>To</MudTh>
            <MudTh>Distance</MudTh>
            <MudTh>Created Date</MudTh>
            <MudTh>Updated Date</MudTh>
            <MudTh>Status</MudTh>
        </HeaderContent>
        <GroupHeaderTemplate>
            <MudTh Class="mud-table-cell-custom-group" colspan="9">@($"{context.GroupName}: {context.Key}")</MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            <MudTd DataLabel="From">@context.from</MudTd>
            <MudTd DataLabel="To">@context.to</MudTd>
            <MudTd DataLabel="Distance">@context.distance</MudTd>
            <MudTd DataLabel="Created Date">@context.date_create.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</MudTd>
            <MudTd DataLabel="Updated Date">@context.date_update.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</MudTd>
@*             <MudTd>
                <MudIconButton Href="@($"/getTrip/{@context.id}")" Icon="far fa-edit" Color="Color.Success" Size="Size.Small" />
            </MudTd>
            <MudTd DataLabel="Status">
                <MudChip Color="@(context.is_delete == 0 ? Color.Success : Color.Error)"
                         Size="Size.Small">
                    @(context.is_delete == 0 ? "Active" : "Deleted")
                </MudChip>
            </MudTd> *@
            <MudTd>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.id))">
                    @((context.IsDetailsVisible ? "Hide" : "Show") + " Trip Details")
                </MudButton>
            </MudTd>
        </RowTemplate>
        <ChildRowContent>
            @if (context.IsDetailsVisible)
            {
                <MudTr>
                    <MudTd ColSpan="7">
                        <MudCard Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">Details for Trip: <strong>@context.distance</strong></MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent Class="pa-0">
                                <MudTable Items="@context.trip_Details" Context="AddressContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                    <ColGroup>
                                        <col />
                                        <col />
                                        <col style="width:200px;" />
                                    </ColGroup>
                                    <HeaderContent>
                                        <MudTh>Start Time</MudTh>
                                        <MudTh>End Time</MudTh>
                                        <MudTh>Price</MudTh>
                                        <MudTh>ID Car</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Start Time">@AddressContext.time_start.ToString("dd/MM/yyyy HH:mm")</MudTd>
                                        <MudTd DataLabel="End Time">@AddressContext.time_end.ToString("dd/MM/yyyy HH:mm")</MudTd>
                                        <MudTd DataLabel="Price">@AddressContext.price</MudTd>
                                        <MudTd DataLabel="ID Car">@AddressContext.car_id</MudTd>
                                        <MudTd>
                                            <MudIconButton Href="@($"/getCar/{AddressContext.car_id}")" Icon="far fa-edit" Color="Color.Success" Size="Size.Small" />
                                        </MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </MudTd>
                </MudTr>
            }
        </ChildRowContent>


        <GroupFooterTemplate>
            <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="9">
                Total Distance: @CalculateTotalDistance(context.Items) km | Number of Trips: @context.Items.Count()
            </MudTh>
        </GroupFooterTemplate>
    </MudTable>
</div>

<MudSwitch @bind-Value="_dense" Color="Color.Primary">Dense</MudSwitch>
<MudSwitch @bind-Value="_multiSelect" Color="Color.Primary">MultiSelect</MudSwitch>
<MudSwitch @bind-Value="_virtualize" Color="Color.Primary">Virtualize</MudSwitch>
<MudSwitch @bind-Value="_groupDefinition.Indentation" Color="Color.Primary">Indentation</MudSwitch>
<MudSwitch @bind-Value="_groupDefinition.Expandable" Color="Color.Primary">Expandable</MudSwitch>

@code {
    private bool _dense = false;
    private bool _multiSelect = true;
    private bool _virtualize = false;

    private TableGroupDefinition<trip> _groupDefinition = new()
        {
            GroupName = "Departure City",
            Indentation = false,
            Expandable = false,
            Selector = (e) => e.from
        };

    private IEnumerable<trip> Trips = new List<trip>();
    private IEnumerable<trip_detail> TripDetails = new List<trip_detail>();

    protected override async Task OnInitializedAsync()
    {
        Trips = await httpClient.GetFromJsonAsync<List<trip>>("http://localhost:49922/api/Trips/trip");
    }

    private string CalculateTotalDistance(IEnumerable<trip> trips)
    {
        if (trips == null) return "0";

        double totalDistance = 0;
        foreach (var trip in trips)
        {
            if (string.IsNullOrEmpty(trip.distance)) continue;

            string distanceStr = trip.distance.Replace("km", "").Trim();
            if (double.TryParse(distanceStr, out double distance))
            {
                totalDistance += distance;
            }
        }
        return totalDistance.ToString("N1");
    }

    private async Task ShowBtnPress(int tripId)
    {
        var trip = Trips.FirstOrDefault(t => t.id == tripId);
        if (trip != null)
        {
            // Đảo ngược trạng thái hiển thị chi tiết
            trip.IsDetailsVisible = !trip.IsDetailsVisible;

            // Nếu chi tiết cần hiển thị, lấy chi tiết chuyến đi
            if (trip.IsDetailsVisible)
            {
                var tripDetails = await httpClient.GetFromJsonAsync<List<trip_detail>>($"http://localhost:49922/api/Trips/tripdetailany/{tripId}");
                trip.trip_Details = tripDetails ?? new List<trip_detail>();

                StateHasChanged(); // Cập nhật lại UI
            }
            else
            {
                // Ẩn chi tiết
                trip.trip_Details = null;
            }
        }
    }


}
