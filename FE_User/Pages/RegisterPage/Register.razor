@page "/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient httpClient
@inject ISnackbar Snackbar
@layout EmptyLayout

<MudContainer Class="mt-5 pa-0" MaxWidth="MaxWidth.False" Style="margin-top: 100px;">
    <MudGrid Class="pa-0 justify-center">
        <MudItem xs="6" Class="mx-auto">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12">
                        <MudCard Class="mud-elevation-12 rounded pa-6" Style="border-radius: 12px;">
                            <MudText Typo="Typo.h4" Color="Color.Primary" Class="fw-bold text-center pt-5">Đăng ký tài khoản</MudText>
                            <MudCardContent Class="pa-4">
                                <MudTextField Label="Email" Class="mt-3"
                                              Variant="Variant.Outlined"
                                              Placeholder="Email"
                                              @bind-Value="model.email" Required="true"
                                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Email" />

                                <MudTextField Label="Mật khẩu" Class="mt-3"
                                              Variant="Variant.Outlined"
                                              Placeholder="Mật khẩu"
                                              @bind-Value="model.pass_word" Required="true"
                                              InputType="InputType.Password"
                                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Lock" />

                                <MudTextField Label="Họ tên" Class="mt-3"
                                              Variant="Variant.Outlined"
                                              Placeholder="Họ tên"
                                              @bind-Value="model.full_name" Required="true"
                                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person" />

                                <MudDatePicker Label="Ngày sinh" Class="mt-3"
                                               Variant="Variant.Outlined"
                                               @bind-Date="model.birthday" Required="true" />

                                <MudTextField Label="Số điện thoại" Class="mt-3"
                                              Variant="Variant.Outlined"
                                              Placeholder="Số điện thoại"
                                              @bind-Value="model.phone_number" Required="true"
                                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Phone" />

                                <MudRadioGroup T="byte" Class="mt-3" Variant="Variant.Outlined"
                                               @bind-Value="model.gender" Required="true">
                                    <MudRadio Value="0" Color="Color.Primary">Nam</MudRadio>
                                    <MudRadio Value="1" Color="Color.Secondary">Nữ</MudRadio>
                                </MudRadioGroup>

                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                                           Color="Color.Primary" Class="mx-auto w-100 mt-7 mb-3" Style="border-radius: 20px;">
                                    Đăng ký
                                </MudButton>

                                <MudGrid Class="mt-3 mb-5">
                                    <MudItem xs="6" Class="text-center pa-0">
                                        <MudLink Href="/" Underline="Underline.Hover">Trang chủ</MudLink>
                                    </MudItem>
                                    <MudItem xs="6" Class="text-center pa-0">
                                        <MudLink Href="/login" Underline="Underline.Hover">Đã có tài khoản? Đăng nhập</MudLink>
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudItem>
    </MudGrid>
</MudContainer>




@code {
    private add_model_customer model = new add_model_customer();
    private bool success;
    private string[] errors = { };
    private MudForm form;

    public class add_model_customer : IValidatableObject
    {
        [Required(ErrorMessage = "Email chưa được nhập")]
        [EmailAddress(ErrorMessage = "Email định dạng chưa đúng")]
        public string email { get; set; }

        [Required(ErrorMessage = "Vui lòng nhập mật khẩu")]
        [StringLength(30, MinimumLength = 5, ErrorMessage = "Mật khẩu không hợp lệ")]
        public string pass_word { get; set; }

        [Required(ErrorMessage = "Vui lòng nhập tên của bạn")]
        [StringLength(100, MinimumLength = 5, ErrorMessage = "Tên quá ngắn & quá dài vui lòng nhập lại")]
        public string full_name { get; set; }

        [Required(ErrorMessage = "Vui lòng chọn độ tuổi")]
        public DateTime? birthday { get; set; }

        [Required(ErrorMessage = "Vui lòng chọn giới tính")]
        public byte gender { get; set; }

        [Required(ErrorMessage = "Vui lòng nhập số điện thoại")]
        [RegularExpression(@"^(03|05|07|08|09)\d{8}$", ErrorMessage = "Số điện thoại không hợp lệ")]
        public string phone_number { get; set; }

        public byte is_delete { get; set; } = 0;

        public int id_role { get; set; } = 2;  // Mặc định là vai trò người dùng mới

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (birthday.HasValue)
            {
                var today = DateTime.Today;
                var age = today.Year - birthday.Value.Year;

                if (birthday.Value.Date > today.AddYears(-age))
                {
                    age--;
                }

                if (age < 18)
                {
                    yield return new ValidationResult("Không đủ tuổi để tạo tài khoản, hãy đủ 18 tuổi", new[] { nameof(birthday) });
                }
            }
        }
    }

    private async Task OnValidSubmit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            var validationContext = new ValidationContext(model, null, null);
            var validationResults = new List<ValidationResult>();
            if (!Validator.TryValidateObject(model, validationContext, validationResults, true))
            {
                foreach (var validationResult in validationResults)
                {
                    Snackbar.Add(validationResult.ErrorMessage, Severity.Error);
                }
                return;
            }

            var response = await httpClient.PostAsJsonAsync("http://localhost:49922/api/Register", model);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Đăng ký thành công!", Severity.Success);
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Đăng ký không thành công! vui lòng thử lại!", Severity.Error);
            }


        }
    }
}