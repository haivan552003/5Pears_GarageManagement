@page "/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient httpClient
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Small">
    <MudCard Elevation="3" Class="mt-6">
        <MudForm Model="@model" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            <MudCardContent>
                <MudText Typo="Typo.h4" Class="mb-4">Đăng ký tài khoản</MudText>

                <MudTextField T="string" Label="Email" @bind-Value="model.user_name" Required="true" />

                <MudTextField T="string" Label="Password" @bind-Value="model.pass_word" Required="true"
                              RequiredError="Password is required!"
                              InputType="InputType.Password" />

                <MudTextField T="string" Label="Full Name" @bind-Value="model.full_name" Required="true"
                              RequiredError="Full name is required!" />

                <MudDatePicker Label="Birthday" @bind-Date="model.birthday" Required="true"
                               RequiredError="Birthday is required!" />             
                <MudTextField T="string" Label="Phone Number" @bind-Value="model.phone_number" Required="true"
                              RequiredError="Phone number is required!" />
                <MudRadioGroup T="byte" @bind-Value="model.gender" Required="true" RequiredError="Gender is required!">
                    <MudRadio Value="@((byte)0)" Color="Color.Primary">Nam</MudRadio>
                    <MudRadio Value="@((byte)1)" Color="Color.Secondary">Nữ</MudRadio>
                </MudRadioGroup>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await OnValidSubmit())">Đăng ký</MudButton>
            </MudCardActions>
        </MudForm>
    </MudCard>
</MudContainer>

@code {
    private add_model_customer model = new add_model_customer();
    private bool success;
    private string[] errors = { };
    private MudForm form;

    public class add_model_customer : IValidatableObject
    {
        [Required(ErrorMessage = "Email chưa được nhập")]
        [EmailAddress(ErrorMessage = "Email định dạng chưa đúng")]
        public string user_name { get; set; }

        [Required(ErrorMessage = "Vui lòng nhập mật khẩu")]
        [StringLength(30, MinimumLength = 5, ErrorMessage = "Mật khẩu không hợp lệ")]
        public string pass_word { get; set; }

        [Required(ErrorMessage = "Vui lòng nhập tên của bạn")]
        [StringLength(100, MinimumLength = 5, ErrorMessage = "Tên quá ngắn & quá dài vui lòng nhập lại")]
        public string full_name { get; set; }

        [Required(ErrorMessage = "Vui lòng chọn độ tuổi")]
        public DateTime? birthday { get; set; }

        [Required(ErrorMessage = "Vui lòng chọn giới tính")]
        public byte gender { get; set; }

        [Required(ErrorMessage = "Vui lòng nhập số điện thoại")]
        [RegularExpression(@"^(03|05|07|08|09)\d{8}$", ErrorMessage = "Số điện thoại không hợp lệ")]
        public string phone_number { get; set; }

        public byte is_delete { get; set; } = 0;

        public int id_role { get; set; } = 2;  // Mặc định là vai trò người dùng mới

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (birthday.HasValue)
            {
                var today = DateTime.Today;
                var age = today.Year - birthday.Value.Year;

                if (birthday.Value.Date > today.AddYears(-age))
                {
                    age--;
                }

                if (age < 18)
                {
                    yield return new ValidationResult("Không đủ tuổi để tạo tài khoản, hãy đủ 18 tuổi", new[] { nameof(birthday) });
                }
            }
        }
    }

    private async Task OnValidSubmit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            var validationContext = new ValidationContext(model, null, null);
            var validationResults = new List<ValidationResult>();
            if (!Validator.TryValidateObject(model, validationContext, validationResults, true))
            {
                foreach (var validationResult in validationResults)
                {
                    Snackbar.Add(validationResult.ErrorMessage, Severity.Error);
                }
                return;
            }

            var response = await httpClient.PostAsJsonAsync("http://localhost:49922/api/Register", model);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Đăng ký thành công!", Severity.Success);
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Đăng ký không thành công! vui lòng thử lại!", Severity.Error);
            }


        }
    }
}