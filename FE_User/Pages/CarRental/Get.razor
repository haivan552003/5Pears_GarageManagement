@page "/getCar"
@using MudBlazor
@inject HttpClient httpClient

<style>
    .mud-card1 {
        transition: all 0.2s ease-in-out;
    }

        .mud-card1:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
</style>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-6 mb-5">
    <MudGrid Class="mt-5">
        <MudItem xs="3">
            <MudPaper Width="300px" Class="d-inline-flex p-3" Elevation="0">
                <MudNavMenu Dense="true" Rounded="true" Class="mud-width-full">
                    <MudTextField T="string"
                                  Placeholder="Tìm kiếm dòng xe, thương hiệu..."
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Class="mb-4"
                                  @bind-Value="searchString1"
                                  OnInput="OnSearchInput" />
                    <MudDivider Class="my-2" />

                    <MudNavGroup Title="Chọn loại xe" Icon="" Expanded="false">
                        @foreach (var item in car_Types)
                        {
                            <MudNavLink Href="/users" Icon="" IconColor="Color.Success">@item.name</MudNavLink>
                        }
                    </MudNavGroup>

                    <MudNavGroup Title="Chọn loại hộp số" Icon="" Expanded="false">
                        <MudNavLink Href="/users" Icon="" IconColor="Color.Success">Số tự động</MudNavLink>
                        <MudNavLink Href="/security" Icon="" IconColor="Color.Info">Số sàn</MudNavLink>
                    </MudNavGroup>

                    <MudNavGroup Title="Chọn hãng xe" Icon="" Expanded="false">
                        @foreach (var item in car_Brands)
                        {
                            <MudNavLink Href="/users" Icon="" IconColor="Color.Success">@item.name</MudNavLink>
                        }
                    </MudNavGroup>

                    <MudNavLink Href="/getdriver" Icon="">Thuê Tài Xế</MudNavLink>
                </MudNavMenu>
            </MudPaper>
        </MudItem>

        <MudItem xs="9">
            <MudGrid>
                @foreach (var item in PaginatedElements)
                {
                    <MudItem xs="12" sm="6" md="4" Class="mb-4">
                        <a Href="@($"/getidcar/{item.id}")" Style="text-decoration: none;">
                            <MudPaper Class="p-3 mud-card1">
                                <img src="@item.img_name" alt="Hình xe"
                                     style="width: 100%; height: 220px; border-radius: 5px; object-fit: cover;"
                                     class="mb-3" />
                                <MudText Typo="Typo.h6" Class="mb-1 text-center fw-bold ">@item.car_name</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="text-center"> (@(item.isAuto == 0 ? "Xe số tự động" : "Xe số sàn"))</MudText>
                                <MudItem Class="d-flex align-center pt-2 pb-2">
                                    <MudIcon Icon="fas fa-car" Size="Size.Small" Color="Color.Primary" />
                                    <MudText Typo="Typo.body2" Class="ml-2">@item.type_name</MudText>
                                </MudItem>
                                <MudItem Class="d-flex align-center pt-2 pb-2">
                                    <MudIcon Icon="fas fa-copyright" Size="Size.Small" Color="Color.Primary" />
                                    <MudText Typo="Typo.body2" Class="ml-2">@item.brand_name</MudText>
                                </MudItem>
                                <MudItem Class="d-flex align-center pt-2 pb-2">
                                    <MudIcon Icon="fas fa-gas-pump" Size="Size.Small" Color="Color.Primary" />
                                    @if (item.fuel == 1)
                                    {
                                        <MudText Typo="Typo.body2" Class="ml-2">Xăng RON 92 (E5)</MudText>
                                    }
                                    else if (item.fuel == 2)
                                    {
                                        <MudText Typo="Typo.body2" Class="ml-2">RON 95-III</MudText>
                                    }
                                    else if (item.fuel == 3)
                                    {
                                        <MudText Typo="Typo.body2" Class="ml-2">RON 95-IV</MudText>
                                    }
                                    else if (item.fuel == 4)
                                    {
                                        <MudText Typo="Typo.body2" Class="ml-2">Diesel 0,05%5</MudText>
                                    }
                                    else if (item.fuel == 5)
                                    {
                                        <MudText Typo="Typo.body2" Class="ml-2">Diesel 0,001%S (Diesel Euro 5)</MudText>
                                    }
                                    else if (item.fuel == 6)
                                    {
                                        <MudText Typo="Typo.body2" Class="ml-2">Pin Lithium-ion (Li-ion)</MudText>
                                    }
                                    else if (item.fuel == 7)
                                    {
                                        <MudText Typo="Typo.body2" Class="ml-2">Pin Lithium Iron Phosphate (LFP)</MudText>
                                    }
                                    else if (item.fuel == 8)
                                    {
                                        <MudText Typo="Typo.body2" Class="ml-2">Pin thể rắn (Solid-State Battery)</MudText>
                                    }
                                    else if (item.fuel == 9)
                                    {
                                        <MudText Typo="Typo.body2" Class="ml-2">Hybrid truyền thống (HEV)</MudText>
                                    }
                                    else if (item.fuel == 10)
                                    {
                                        <MudText Typo="Typo.body2" Class="ml-2">Plug-in Hybrid (PHEV)</MudText>
                                    }
                                    else if (item.fuel == 11)
                                    {
                                        <MudText Typo="Typo.body2" Class="ml-2">Pin CATL</MudText>
                                    }
                                </MudItem>
                                <MudGrid Class="mt-2">
                                    <MudItem xs="4" Class="d-flex align-center">
                                        <MudIcon Icon="@Icons.Material.Filled.BarChart" Color="Color.Success" />
                                        <MudText Typo="Typo.body2" Class="ml-1">@item.rate</MudText>
                                    </MudItem>

                                    <MudItem xs="8">
                                        <MudText Typo="Typo.h6" Class="fw-bold" Align="Align.End">
                                            @item.price_user.ToString("#,##0")
                                        </MudText>
                                    </MudItem>
                                </MudGrid>
                            </MudPaper>
                        </a>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudGrid Justify="Justify.Center">
    <MudItem>
        <MudPagination Align="Align.Center" Color="Color.Primary" Count="@TotalPages" @bind-Selected="@_selected" />
    </MudItem>
</MudGrid>

@code {
    private int _selected = 1;
    private const int PageSize = 12;
    private IEnumerable<car> Elements = new List<car>();
    private IEnumerable<car> FilteredElements => Elements.Where(FilterFunc);
    private IEnumerable<car> PaginatedElements => FilteredElements.Skip((_selected - 1) * PageSize).Take(PageSize);
    private IEnumerable<car_type> car_Types = new List<car_type>();
    private IEnumerable<car_brand> car_Brands = new List<car_brand>();
    private string searchString1 = "";

    private int TotalPages => (int)Math.Ceiling((double)FilteredElements.Count() / PageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadCars();
        await LoadCartype();
        await LoadCarBrand();
    }

    private async Task LoadCars()
    {
        try
        {
            Elements = await httpClient.GetFromJsonAsync<List<car>>("http://localhost:49922/api/Cars/getAllCars");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task LoadCartype()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<car_type>>("http://localhost:49922/api/CarTypes");
            if (response != null)
            {
                car_Types = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task LoadCarBrand()
    {
        try
        {
            var response = await httpClient.GetFromJsonAsync<List<car_brand>>("http://localhost:49922/api/CarBrands");
            if (response != null)
            {
                car_Brands = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private bool FilterFunc(car element) =>
        string.IsNullOrWhiteSpace(searchString1) ||
        element.brand_name.Contains(searchString1, StringComparison.OrdinalIgnoreCase) ||
        element.type_name.Contains(searchString1, StringComparison.OrdinalIgnoreCase);

    private void OnSearchInput(ChangeEventArgs e)
    {
        searchString1 = e.Value.ToString();
        _selected = 1;
    }
}
